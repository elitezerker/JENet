// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class enet_h_25 extends enet_h_24 {

    public static MethodHandle VarDecFromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarDecFromDisp$MH,"VarDecFromDisp");
    }
    public static int VarDecFromDisp ( Addressable pdispIn,  int lcid,  Addressable pdecOut) {
        var mh$ = VarDecFromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarDecFromBool$MH,"VarDecFromBool");
    }
    public static int VarDecFromBool ( short boolIn,  Addressable pdecOut) {
        var mh$ = VarDecFromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarDecFromI1$MH,"VarDecFromI1");
    }
    public static int VarDecFromI1 ( byte cIn,  Addressable pdecOut) {
        var mh$ = VarDecFromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarDecFromUI2$MH,"VarDecFromUI2");
    }
    public static int VarDecFromUI2 ( short uiIn,  Addressable pdecOut) {
        var mh$ = VarDecFromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarDecFromUI4$MH,"VarDecFromUI4");
    }
    public static int VarDecFromUI4 ( int ulIn,  Addressable pdecOut) {
        var mh$ = VarDecFromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarDecFromUI8$MH,"VarDecFromUI8");
    }
    public static int VarDecFromUI8 ( long ui64In,  Addressable pdecOut) {
        var mh$ = VarDecFromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarParseNumFromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarParseNumFromStr$MH,"VarParseNumFromStr");
    }
    public static int VarParseNumFromStr ( Addressable strIn,  int lcid,  int dwFlags,  Addressable pnumprs,  Addressable rgbDig) {
        var mh$ = VarParseNumFromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pnumprs, rgbDig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarNumFromParseNum$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarNumFromParseNum$MH,"VarNumFromParseNum");
    }
    public static int VarNumFromParseNum ( Addressable pnumprs,  Addressable rgbDig,  int dwVtBits,  Addressable pvar) {
        var mh$ = VarNumFromParseNum$MH();
        try {
            return (int)mh$.invokeExact(pnumprs, rgbDig, dwVtBits, pvar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarAdd$MH,"VarAdd");
    }
    public static int VarAdd ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarAdd$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarAnd$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarAnd$MH,"VarAnd");
    }
    public static int VarAnd ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarAnd$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCat$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarCat$MH,"VarCat");
    }
    public static int VarCat ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarCat$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarDiv$MH,"VarDiv");
    }
    public static int VarDiv ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarDiv$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarEqv$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.VarEqv$MH,"VarEqv");
    }
    public static int VarEqv ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarEqv$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarIdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.VarIdiv$MH,"VarIdiv");
    }
    public static int VarIdiv ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarIdiv$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarImp$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.VarImp$MH,"VarImp");
    }
    public static int VarImp ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarImp$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarMod$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.VarMod$MH,"VarMod");
    }
    public static int VarMod ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarMod$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarMul$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.VarMul$MH,"VarMul");
    }
    public static int VarMul ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarMul$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarOr$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.VarOr$MH,"VarOr");
    }
    public static int VarOr ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarOr$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarPow$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarPow$MH,"VarPow");
    }
    public static int VarPow ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarPow$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarSub$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarSub$MH,"VarSub");
    }
    public static int VarSub ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarSub$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarXor$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarXor$MH,"VarXor");
    }
    public static int VarXor ( Addressable pvarLeft,  Addressable pvarRight,  Addressable pvarResult) {
        var mh$ = VarXor$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarAbs$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarAbs$MH,"VarAbs");
    }
    public static int VarAbs ( Addressable pvarIn,  Addressable pvarResult) {
        var mh$ = VarAbs$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFix$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarFix$MH,"VarFix");
    }
    public static int VarFix ( Addressable pvarIn,  Addressable pvarResult) {
        var mh$ = VarFix$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarInt$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarInt$MH,"VarInt");
    }
    public static int VarInt ( Addressable pvarIn,  Addressable pvarResult) {
        var mh$ = VarInt$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.VarNeg$MH,"VarNeg");
    }
    public static int VarNeg ( Addressable pvarIn,  Addressable pvarResult) {
        var mh$ = VarNeg$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarNot$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.VarNot$MH,"VarNot");
    }
    public static int VarNot ( Addressable pvarIn,  Addressable pvarResult) {
        var mh$ = VarNot$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarRound$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.VarRound$MH,"VarRound");
    }
    public static int VarRound ( Addressable pvarIn,  int cDecimals,  Addressable pvarResult) {
        var mh$ = VarRound$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, cDecimals, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.VarCmp$MH,"VarCmp");
    }
    public static int VarCmp ( Addressable pvarLeft,  Addressable pvarRight,  int lcid,  int dwFlags) {
        var mh$ = VarCmp$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, lcid, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.VarDecAdd$MH,"VarDecAdd");
    }
    public static int VarDecAdd ( Addressable pdecLeft,  Addressable pdecRight,  Addressable pdecResult) {
        var mh$ = VarDecAdd$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.VarDecDiv$MH,"VarDecDiv");
    }
    public static int VarDecDiv ( Addressable pdecLeft,  Addressable pdecRight,  Addressable pdecResult) {
        var mh$ = VarDecDiv$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecMul$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.VarDecMul$MH,"VarDecMul");
    }
    public static int VarDecMul ( Addressable pdecLeft,  Addressable pdecRight,  Addressable pdecResult) {
        var mh$ = VarDecMul$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecSub$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.VarDecSub$MH,"VarDecSub");
    }
    public static int VarDecSub ( Addressable pdecLeft,  Addressable pdecRight,  Addressable pdecResult) {
        var mh$ = VarDecSub$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecAbs$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.VarDecAbs$MH,"VarDecAbs");
    }
    public static int VarDecAbs ( Addressable pdecIn,  Addressable pdecResult) {
        var mh$ = VarDecAbs$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFix$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.VarDecFix$MH,"VarDecFix");
    }
    public static int VarDecFix ( Addressable pdecIn,  Addressable pdecResult) {
        var mh$ = VarDecFix$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecInt$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.VarDecInt$MH,"VarDecInt");
    }
    public static int VarDecInt ( Addressable pdecIn,  Addressable pdecResult) {
        var mh$ = VarDecInt$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.VarDecNeg$MH,"VarDecNeg");
    }
    public static int VarDecNeg ( Addressable pdecIn,  Addressable pdecResult) {
        var mh$ = VarDecNeg$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecRound$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.VarDecRound$MH,"VarDecRound");
    }
    public static int VarDecRound ( Addressable pdecIn,  int cDecimals,  Addressable pdecResult) {
        var mh$ = VarDecRound$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, cDecimals, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecCmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.VarDecCmp$MH,"VarDecCmp");
    }
    public static int VarDecCmp ( Addressable pdecLeft,  Addressable pdecRight) {
        var mh$ = VarDecCmp$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, pdecRight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecCmpR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.VarDecCmpR8$MH,"VarDecCmpR8");
    }
    public static int VarDecCmpR8 ( Addressable pdecLeft,  double dblRight) {
        var mh$ = VarDecCmpR8$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, dblRight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.VarCyAdd$MH,"VarCyAdd");
    }
    public static int VarCyAdd ( MemorySegment cyLeft,  MemorySegment cyRight,  Addressable pcyResult) {
        var mh$ = VarCyAdd$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyMul$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.VarCyMul$MH,"VarCyMul");
    }
    public static int VarCyMul ( MemorySegment cyLeft,  MemorySegment cyRight,  Addressable pcyResult) {
        var mh$ = VarCyMul$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyMulI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.VarCyMulI4$MH,"VarCyMulI4");
    }
    public static int VarCyMulI4 ( MemorySegment cyLeft,  int lRight,  Addressable pcyResult) {
        var mh$ = VarCyMulI4$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, lRight, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyMulI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.VarCyMulI8$MH,"VarCyMulI8");
    }
    public static int VarCyMulI8 ( MemorySegment cyLeft,  long lRight,  Addressable pcyResult) {
        var mh$ = VarCyMulI8$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, lRight, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCySub$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.VarCySub$MH,"VarCySub");
    }
    public static int VarCySub ( MemorySegment cyLeft,  MemorySegment cyRight,  Addressable pcyResult) {
        var mh$ = VarCySub$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyAbs$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.VarCyAbs$MH,"VarCyAbs");
    }
    public static int VarCyAbs ( MemorySegment cyIn,  Addressable pcyResult) {
        var mh$ = VarCyAbs$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFix$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.VarCyFix$MH,"VarCyFix");
    }
    public static int VarCyFix ( MemorySegment cyIn,  Addressable pcyResult) {
        var mh$ = VarCyFix$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyInt$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.VarCyInt$MH,"VarCyInt");
    }
    public static int VarCyInt ( MemorySegment cyIn,  Addressable pcyResult) {
        var mh$ = VarCyInt$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.VarCyNeg$MH,"VarCyNeg");
    }
    public static int VarCyNeg ( MemorySegment cyIn,  Addressable pcyResult) {
        var mh$ = VarCyNeg$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyRound$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.VarCyRound$MH,"VarCyRound");
    }
    public static int VarCyRound ( MemorySegment cyIn,  int cDecimals,  Addressable pcyResult) {
        var mh$ = VarCyRound$MH();
        try {
            return (int)mh$.invokeExact(cyIn, cDecimals, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyCmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.VarCyCmp$MH,"VarCyCmp");
    }
    public static int VarCyCmp ( MemorySegment cyLeft,  MemorySegment cyRight) {
        var mh$ = VarCyCmp$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, cyRight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyCmpR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.VarCyCmpR8$MH,"VarCyCmpR8");
    }
    public static int VarCyCmpR8 ( MemorySegment cyLeft,  double dblRight) {
        var mh$ = VarCyCmpR8$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, dblRight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrCat$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.VarBstrCat$MH,"VarBstrCat");
    }
    public static int VarBstrCat ( Addressable bstrLeft,  Addressable bstrRight,  Addressable pbstrResult) {
        var mh$ = VarBstrCat$MH();
        try {
            return (int)mh$.invokeExact(bstrLeft, bstrRight, pbstrResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrCmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.VarBstrCmp$MH,"VarBstrCmp");
    }
    public static int VarBstrCmp ( Addressable bstrLeft,  Addressable bstrRight,  int lcid,  int dwFlags) {
        var mh$ = VarBstrCmp$MH();
        try {
            return (int)mh$.invokeExact(bstrLeft, bstrRight, lcid, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8Pow$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.VarR8Pow$MH,"VarR8Pow");
    }
    public static int VarR8Pow ( double dblLeft,  double dblRight,  Addressable pdblResult) {
        var mh$ = VarR8Pow$MH();
        try {
            return (int)mh$.invokeExact(dblLeft, dblRight, pdblResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4CmpR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.VarR4CmpR8$MH,"VarR4CmpR8");
    }
    public static int VarR4CmpR8 ( float fltLeft,  double dblRight) {
        var mh$ = VarR4CmpR8$MH();
        try {
            return (int)mh$.invokeExact(fltLeft, dblRight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8Round$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.VarR8Round$MH,"VarR8Round");
    }
    public static int VarR8Round ( double dblIn,  int cDecimals,  Addressable pdblResult) {
        var mh$ = VarR8Round$MH();
        try {
            return (int)mh$.invokeExact(dblIn, cDecimals, pdblResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromUdate$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.VarDateFromUdate$MH,"VarDateFromUdate");
    }
    public static int VarDateFromUdate ( Addressable pudateIn,  int dwFlags,  Addressable pdateOut) {
        var mh$ = VarDateFromUdate$MH();
        try {
            return (int)mh$.invokeExact(pudateIn, dwFlags, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromUdateEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.VarDateFromUdateEx$MH,"VarDateFromUdateEx");
    }
    public static int VarDateFromUdateEx ( Addressable pudateIn,  int lcid,  int dwFlags,  Addressable pdateOut) {
        var mh$ = VarDateFromUdateEx$MH();
        try {
            return (int)mh$.invokeExact(pudateIn, lcid, dwFlags, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUdateFromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.VarUdateFromDate$MH,"VarUdateFromDate");
    }
    public static int VarUdateFromDate ( double dateIn,  int dwFlags,  Addressable pudateOut) {
        var mh$ = VarUdateFromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, dwFlags, pudateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAltMonthNames$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.GetAltMonthNames$MH,"GetAltMonthNames");
    }
    public static int GetAltMonthNames ( int lcid,  Addressable prgp) {
        var mh$ = GetAltMonthNames$MH();
        try {
            return (int)mh$.invokeExact(lcid, prgp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.VarFormat$MH,"VarFormat");
    }
    public static int VarFormat ( Addressable pvarIn,  Addressable pstrFormat,  int iFirstDay,  int iFirstWeek,  int dwFlags,  Addressable pbstrOut) {
        var mh$ = VarFormat$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pstrFormat, iFirstDay, iFirstWeek, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormatDateTime$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.VarFormatDateTime$MH,"VarFormatDateTime");
    }
    public static int VarFormatDateTime ( Addressable pvarIn,  int iNamedFormat,  int dwFlags,  Addressable pbstrOut) {
        var mh$ = VarFormatDateTime$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, iNamedFormat, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormatNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.VarFormatNumber$MH,"VarFormatNumber");
    }
    public static int VarFormatNumber ( Addressable pvarIn,  int iNumDig,  int iIncLead,  int iUseParens,  int iGroup,  int dwFlags,  Addressable pbstrOut) {
        var mh$ = VarFormatNumber$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormatPercent$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.VarFormatPercent$MH,"VarFormatPercent");
    }
    public static int VarFormatPercent ( Addressable pvarIn,  int iNumDig,  int iIncLead,  int iUseParens,  int iGroup,  int dwFlags,  Addressable pbstrOut) {
        var mh$ = VarFormatPercent$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormatCurrency$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.VarFormatCurrency$MH,"VarFormatCurrency");
    }
    public static int VarFormatCurrency ( Addressable pvarIn,  int iNumDig,  int iIncLead,  int iUseParens,  int iGroup,  int dwFlags,  Addressable pbstrOut) {
        var mh$ = VarFormatCurrency$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarWeekdayName$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.VarWeekdayName$MH,"VarWeekdayName");
    }
    public static int VarWeekdayName ( int iWeekday,  int fAbbrev,  int iFirstDay,  int dwFlags,  Addressable pbstrOut) {
        var mh$ = VarWeekdayName$MH();
        try {
            return (int)mh$.invokeExact(iWeekday, fAbbrev, iFirstDay, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarMonthName$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.VarMonthName$MH,"VarMonthName");
    }
    public static int VarMonthName ( int iMonth,  int fAbbrev,  int dwFlags,  Addressable pbstrOut) {
        var mh$ = VarMonthName$MH();
        try {
            return (int)mh$.invokeExact(iMonth, fAbbrev, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormatFromTokens$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.VarFormatFromTokens$MH,"VarFormatFromTokens");
    }
    public static int VarFormatFromTokens ( Addressable pvarIn,  Addressable pstrFormat,  Addressable pbTokCur,  int dwFlags,  Addressable pbstrOut,  int lcid) {
        var mh$ = VarFormatFromTokens$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pstrFormat, pbTokCur, dwFlags, pbstrOut, lcid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarTokenizeFormatString$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.VarTokenizeFormatString$MH,"VarTokenizeFormatString");
    }
    public static int VarTokenizeFormatString ( Addressable pstrFormat,  Addressable rgbTok,  int cbTok,  int iFirstDay,  int iFirstWeek,  int lcid,  Addressable pcbActual) {
        var mh$ = VarTokenizeFormatString$MH();
        try {
            return (int)mh$.invokeExact(pstrFormat, rgbTok, cbTok, iFirstDay, iFirstWeek, lcid, pcbActual);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPTYPELIB = Constants$root.C_POINTER$LAYOUT;
    public static OfInt DISPID = Constants$root.C_LONG$LAYOUT;
    public static OfInt MEMBERID = Constants$root.C_LONG$LAYOUT;
    public static OfAddress LPTYPEINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTYPECOMP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATETYPELIB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATETYPEINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LHashValOfNameSysA$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.LHashValOfNameSysA$MH,"LHashValOfNameSysA");
    }
    public static int LHashValOfNameSysA ( int syskind,  int lcid,  Addressable szName) {
        var mh$ = LHashValOfNameSysA$MH();
        try {
            return (int)mh$.invokeExact(syskind, lcid, szName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LHashValOfNameSys$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.LHashValOfNameSys$MH,"LHashValOfNameSys");
    }
    public static int LHashValOfNameSys ( int syskind,  int lcid,  Addressable szName) {
        var mh$ = LHashValOfNameSys$MH();
        try {
            return (int)mh$.invokeExact(syskind, lcid, szName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.LoadTypeLib$MH,"LoadTypeLib");
    }
    public static int LoadTypeLib ( Addressable szFile,  Addressable pptlib) {
        var mh$ = LoadTypeLib$MH();
        try {
            return (int)mh$.invokeExact(szFile, pptlib);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int REGKIND_DEFAULT() {
        return (int)0L;
    }
    public static int REGKIND_REGISTER() {
        return (int)1L;
    }
    public static int REGKIND_NONE() {
        return (int)2L;
    }
    public static MethodHandle LoadTypeLibEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.LoadTypeLibEx$MH,"LoadTypeLibEx");
    }
    public static int LoadTypeLibEx ( Addressable szFile,  int regkind,  Addressable pptlib) {
        var mh$ = LoadTypeLibEx$MH();
        try {
            return (int)mh$.invokeExact(szFile, regkind, pptlib);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadRegTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.LoadRegTypeLib$MH,"LoadRegTypeLib");
    }
    public static int LoadRegTypeLib ( Addressable rguid,  short wVerMajor,  short wVerMinor,  int lcid,  Addressable pptlib) {
        var mh$ = LoadRegTypeLib$MH();
        try {
            return (int)mh$.invokeExact(rguid, wVerMajor, wVerMinor, lcid, pptlib);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryPathOfRegTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.QueryPathOfRegTypeLib$MH,"QueryPathOfRegTypeLib");
    }
    public static int QueryPathOfRegTypeLib ( Addressable guid,  short wMaj,  short wMin,  int lcid,  Addressable lpbstrPathName) {
        var mh$ = QueryPathOfRegTypeLib$MH();
        try {
            return (int)mh$.invokeExact(guid, wMaj, wMin, lcid, lpbstrPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.RegisterTypeLib$MH,"RegisterTypeLib");
    }
    public static int RegisterTypeLib ( Addressable ptlib,  Addressable szFullPath,  Addressable szHelpDir) {
        var mh$ = RegisterTypeLib$MH();
        try {
            return (int)mh$.invokeExact(ptlib, szFullPath, szHelpDir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnRegisterTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.UnRegisterTypeLib$MH,"UnRegisterTypeLib");
    }
    public static int UnRegisterTypeLib ( Addressable libID,  short wVerMajor,  short wVerMinor,  int lcid,  int syskind) {
        var mh$ = UnRegisterTypeLib$MH();
        try {
            return (int)mh$.invokeExact(libID, wVerMajor, wVerMinor, lcid, syskind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterTypeLibForUser$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.RegisterTypeLibForUser$MH,"RegisterTypeLibForUser");
    }
    public static int RegisterTypeLibForUser ( Addressable ptlib,  Addressable szFullPath,  Addressable szHelpDir) {
        var mh$ = RegisterTypeLibForUser$MH();
        try {
            return (int)mh$.invokeExact(ptlib, szFullPath, szHelpDir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnRegisterTypeLibForUser$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.UnRegisterTypeLibForUser$MH,"UnRegisterTypeLibForUser");
    }
    public static int UnRegisterTypeLibForUser ( Addressable libID,  short wMajorVerNum,  short wMinorVerNum,  int lcid,  int syskind) {
        var mh$ = UnRegisterTypeLibForUser$MH();
        try {
            return (int)mh$.invokeExact(libID, wMajorVerNum, wMinorVerNum, lcid, syskind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.CreateTypeLib$MH,"CreateTypeLib");
    }
    public static int CreateTypeLib ( int syskind,  Addressable szFile,  Addressable ppctlib) {
        var mh$ = CreateTypeLib$MH();
        try {
            return (int)mh$.invokeExact(syskind, szFile, ppctlib);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateTypeLib2$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.CreateTypeLib2$MH,"CreateTypeLib2");
    }
    public static int CreateTypeLib2 ( int syskind,  Addressable szFile,  Addressable ppctlib) {
        var mh$ = CreateTypeLib2$MH();
        try {
            return (int)mh$.invokeExact(syskind, szFile, ppctlib);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDISPATCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPARAMDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMETHODDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPINTERFACEDATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DispGetParam$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.DispGetParam$MH,"DispGetParam");
    }
    public static int DispGetParam ( Addressable pdispparams,  int position,  short vtTarg,  Addressable pvarResult,  Addressable puArgErr) {
        var mh$ = DispGetParam$MH();
        try {
            return (int)mh$.invokeExact(pdispparams, position, vtTarg, pvarResult, puArgErr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispGetIDsOfNames$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.DispGetIDsOfNames$MH,"DispGetIDsOfNames");
    }
    public static int DispGetIDsOfNames ( Addressable ptinfo,  Addressable rgszNames,  int cNames,  Addressable rgdispid) {
        var mh$ = DispGetIDsOfNames$MH();
        try {
            return (int)mh$.invokeExact(ptinfo, rgszNames, cNames, rgdispid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispInvoke$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.DispInvoke$MH,"DispInvoke");
    }
    public static int DispInvoke ( Addressable _this,  Addressable ptinfo,  int dispidMember,  short wFlags,  Addressable pparams,  Addressable pvarResult,  Addressable pexcepinfo,  Addressable puArgErr) {
        var mh$ = DispInvoke$MH();
        try {
            return (int)mh$.invokeExact(_this, ptinfo, dispidMember, wFlags, pparams, pvarResult, pexcepinfo, puArgErr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDispTypeInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.CreateDispTypeInfo$MH,"CreateDispTypeInfo");
    }
    public static int CreateDispTypeInfo ( Addressable pidata,  int lcid,  Addressable pptinfo) {
        var mh$ = CreateDispTypeInfo$MH();
        try {
            return (int)mh$.invokeExact(pidata, lcid, pptinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateStdDispatch$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.CreateStdDispatch$MH,"CreateStdDispatch");
    }
    public static int CreateStdDispatch ( Addressable punkOuter,  Addressable pvThis,  Addressable ptinfo,  Addressable ppunkStdDisp) {
        var mh$ = CreateStdDispatch$MH();
        try {
            return (int)mh$.invokeExact(punkOuter, pvThis, ptinfo, ppunkStdDisp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispCallFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.DispCallFunc$MH,"DispCallFunc");
    }
    public static int DispCallFunc ( Addressable pvInstance,  long oVft,  int cc,  short vtReturn,  int cActuals,  Addressable prgvt,  Addressable prgpvarg,  Addressable pvargResult) {
        var mh$ = DispCallFunc$MH();
        try {
            return (int)mh$.invokeExact(pvInstance, oVft, cc, vtReturn, cActuals, prgvt, prgpvarg, pvargResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterActiveObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.RegisterActiveObject$MH,"RegisterActiveObject");
    }
    public static int RegisterActiveObject ( Addressable punk,  Addressable rclsid,  int dwFlags,  Addressable pdwRegister) {
        var mh$ = RegisterActiveObject$MH();
        try {
            return (int)mh$.invokeExact(punk, rclsid, dwFlags, pdwRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RevokeActiveObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.RevokeActiveObject$MH,"RevokeActiveObject");
    }
    public static int RevokeActiveObject ( int dwRegister,  Addressable pvReserved) {
        var mh$ = RevokeActiveObject$MH();
        try {
            return (int)mh$.invokeExact(dwRegister, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetActiveObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.GetActiveObject$MH,"GetActiveObject");
    }
    public static int GetActiveObject ( Addressable rclsid,  Addressable pvReserved,  Addressable ppunk) {
        var mh$ = GetActiveObject$MH();
        try {
            return (int)mh$.invokeExact(rclsid, pvReserved, ppunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.SetErrorInfo$MH,"SetErrorInfo");
    }
    public static int SetErrorInfo ( int dwReserved,  Addressable perrinfo) {
        var mh$ = SetErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(dwReserved, perrinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.GetErrorInfo$MH,"GetErrorInfo");
    }
    public static int GetErrorInfo ( int dwReserved,  Addressable pperrinfo) {
        var mh$ = GetErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(dwReserved, pperrinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.CreateErrorInfo$MH,"CreateErrorInfo");
    }
    public static int CreateErrorInfo ( Addressable pperrinfo) {
        var mh$ = CreateErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(pperrinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRecordInfoFromTypeInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.GetRecordInfoFromTypeInfo$MH,"GetRecordInfoFromTypeInfo");
    }
    public static int GetRecordInfoFromTypeInfo ( Addressable pTypeInfo,  Addressable ppRecInfo) {
        var mh$ = GetRecordInfoFromTypeInfo$MH();
        try {
            return (int)mh$.invokeExact(pTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRecordInfoFromGuids$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.GetRecordInfoFromGuids$MH,"GetRecordInfoFromGuids");
    }
    public static int GetRecordInfoFromGuids ( Addressable rGuidTypeLib,  int uVerMajor,  int uVerMinor,  int lcid,  Addressable rGuidTypeInfo,  Addressable ppRecInfo) {
        var mh$ = GetRecordInfoFromGuids$MH();
        try {
            return (int)mh$.invokeExact(rGuidTypeLib, uVerMajor, uVerMinor, lcid, rGuidTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OaBuildVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.OaBuildVersion$MH,"OaBuildVersion");
    }
    public static int OaBuildVersion () {
        var mh$ = OaBuildVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClearCustData$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.ClearCustData$MH,"ClearCustData");
    }
    public static void ClearCustData ( Addressable pCustData) {
        var mh$ = ClearCustData$MH();
        try {
            mh$.invokeExact(pCustData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OaEnablePerUserTLibRegistration$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.OaEnablePerUserTLibRegistration$MH,"OaEnablePerUserTLibRegistration");
    }
    public static void OaEnablePerUserTLibRegistration () {
        var mh$ = OaEnablePerUserTLibRegistration$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleBuildVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.OleBuildVersion$MH,"OleBuildVersion");
    }
    public static int OleBuildVersion () {
        var mh$ = OleBuildVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFmtUserTypeStg$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.WriteFmtUserTypeStg$MH,"WriteFmtUserTypeStg");
    }
    public static int WriteFmtUserTypeStg ( Addressable pstg,  short cf,  Addressable lpszUserType) {
        var mh$ = WriteFmtUserTypeStg$MH();
        try {
            return (int)mh$.invokeExact(pstg, cf, lpszUserType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFmtUserTypeStg$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.ReadFmtUserTypeStg$MH,"ReadFmtUserTypeStg");
    }
    public static int ReadFmtUserTypeStg ( Addressable pstg,  Addressable pcf,  Addressable lplpszUserType) {
        var mh$ = ReadFmtUserTypeStg$MH();
        try {
            return (int)mh$.invokeExact(pstg, pcf, lplpszUserType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.OleInitialize$MH,"OleInitialize");
    }
    public static int OleInitialize ( Addressable pvReserved) {
        var mh$ = OleInitialize$MH();
        try {
            return (int)mh$.invokeExact(pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleUninitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.OleUninitialize$MH,"OleUninitialize");
    }
    public static void OleUninitialize () {
        var mh$ = OleUninitialize$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleQueryLinkFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.OleQueryLinkFromData$MH,"OleQueryLinkFromData");
    }
    public static int OleQueryLinkFromData ( Addressable pSrcDataObject) {
        var mh$ = OleQueryLinkFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleQueryCreateFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.OleQueryCreateFromData$MH,"OleQueryCreateFromData");
    }
    public static int OleQueryCreateFromData ( Addressable pSrcDataObject) {
        var mh$ = OleQueryCreateFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.OleCreate$MH,"OleCreate");
    }
    public static int OleCreate ( Addressable rclsid,  Addressable riid,  int renderopt,  Addressable pFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreate$MH();
        try {
            return (int)mh$.invokeExact(rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.OleCreateEx$MH,"OleCreateEx");
    }
    public static int OleCreateEx ( Addressable rclsid,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateEx$MH();
        try {
            return (int)mh$.invokeExact(rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.OleCreateFromData$MH,"OleCreateFromData");
    }
    public static int OleCreateFromData ( Addressable pSrcDataObj,  Addressable riid,  int renderopt,  Addressable pFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromDataEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleCreateFromDataEx$MH,"OleCreateFromDataEx");
    }
    public static int OleCreateFromDataEx ( Addressable pSrcDataObj,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateFromDataEx$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleCreateLinkFromData$MH,"OleCreateLinkFromData");
    }
    public static int OleCreateLinkFromData ( Addressable pSrcDataObj,  Addressable riid,  int renderopt,  Addressable pFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLinkFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkFromDataEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleCreateLinkFromDataEx$MH,"OleCreateLinkFromDataEx");
    }
    public static int OleCreateLinkFromDataEx ( Addressable pSrcDataObj,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLinkFromDataEx$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateStaticFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleCreateStaticFromData$MH,"OleCreateStaticFromData");
    }
    public static int OleCreateStaticFromData ( Addressable pSrcDataObj,  Addressable iid,  int renderopt,  Addressable pFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateStaticFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLink$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleCreateLink$MH,"OleCreateLink");
    }
    public static int OleCreateLink ( Addressable pmkLinkSrc,  Addressable riid,  int renderopt,  Addressable lpFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLink$MH();
        try {
            return (int)mh$.invokeExact(pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleCreateLinkEx$MH,"OleCreateLinkEx");
    }
    public static int OleCreateLinkEx ( Addressable pmkLinkSrc,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLinkEx$MH();
        try {
            return (int)mh$.invokeExact(pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkToFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.OleCreateLinkToFile$MH,"OleCreateLinkToFile");
    }
    public static int OleCreateLinkToFile ( Addressable lpszFileName,  Addressable riid,  int renderopt,  Addressable lpFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLinkToFile$MH();
        try {
            return (int)mh$.invokeExact(lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkToFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.OleCreateLinkToFileEx$MH,"OleCreateLinkToFileEx");
    }
    public static int OleCreateLinkToFileEx ( Addressable lpszFileName,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLinkToFileEx$MH();
        try {
            return (int)mh$.invokeExact(lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.OleCreateFromFile$MH,"OleCreateFromFile");
    }
    public static int OleCreateFromFile ( Addressable rclsid,  Addressable lpszFileName,  Addressable riid,  int renderopt,  Addressable lpFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateFromFile$MH();
        try {
            return (int)mh$.invokeExact(rclsid, lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.OleCreateFromFileEx$MH,"OleCreateFromFileEx");
    }
    public static int OleCreateFromFileEx ( Addressable rclsid,  Addressable lpszFileName,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateFromFileEx$MH();
        try {
            return (int)mh$.invokeExact(rclsid, lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleLoad$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.OleLoad$MH,"OleLoad");
    }
    public static int OleLoad ( Addressable pStg,  Addressable riid,  Addressable pClientSite,  Addressable ppvObj) {
        var mh$ = OleLoad$MH();
        try {
            return (int)mh$.invokeExact(pStg, riid, pClientSite, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSave$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.OleSave$MH,"OleSave");
    }
    public static int OleSave ( Addressable pPS,  Addressable pStg,  int fSameAsLoad) {
        var mh$ = OleSave$MH();
        try {
            return (int)mh$.invokeExact(pPS, pStg, fSameAsLoad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleLoadFromStream$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.OleLoadFromStream$MH,"OleLoadFromStream");
    }
    public static int OleLoadFromStream ( Addressable pStm,  Addressable iidInterface,  Addressable ppvObj) {
        var mh$ = OleLoadFromStream$MH();
        try {
            return (int)mh$.invokeExact(pStm, iidInterface, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSaveToStream$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.OleSaveToStream$MH,"OleSaveToStream");
    }
    public static int OleSaveToStream ( Addressable pPStm,  Addressable pStm) {
        var mh$ = OleSaveToStream$MH();
        try {
            return (int)mh$.invokeExact(pPStm, pStm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetContainedObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.OleSetContainedObject$MH,"OleSetContainedObject");
    }
    public static int OleSetContainedObject ( Addressable pUnknown,  int fContained) {
        var mh$ = OleSetContainedObject$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, fContained);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleNoteObjectVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.OleNoteObjectVisible$MH,"OleNoteObjectVisible");
    }
    public static int OleNoteObjectVisible ( Addressable pUnknown,  int fVisible) {
        var mh$ = OleNoteObjectVisible$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, fVisible);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterDragDrop$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.RegisterDragDrop$MH,"RegisterDragDrop");
    }
    public static int RegisterDragDrop ( Addressable hwnd,  Addressable pDropTarget) {
        var mh$ = RegisterDragDrop$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pDropTarget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RevokeDragDrop$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.RevokeDragDrop$MH,"RevokeDragDrop");
    }
    public static int RevokeDragDrop ( Addressable hwnd) {
        var mh$ = RevokeDragDrop$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DoDragDrop$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.DoDragDrop$MH,"DoDragDrop");
    }
    public static int DoDragDrop ( Addressable pDataObj,  Addressable pDropSource,  int dwOKEffects,  Addressable pdwEffect) {
        var mh$ = DoDragDrop$MH();
        try {
            return (int)mh$.invokeExact(pDataObj, pDropSource, dwOKEffects, pdwEffect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.OleSetClipboard$MH,"OleSetClipboard");
    }
    public static int OleSetClipboard ( Addressable pDataObj) {
        var mh$ = OleSetClipboard$MH();
        try {
            return (int)mh$.invokeExact(pDataObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.OleGetClipboard$MH,"OleGetClipboard");
    }
    public static int OleGetClipboard ( Addressable ppDataObj) {
        var mh$ = OleGetClipboard$MH();
        try {
            return (int)mh$.invokeExact(ppDataObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetClipboardWithEnterpriseInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.OleGetClipboardWithEnterpriseInfo$MH,"OleGetClipboardWithEnterpriseInfo");
    }
    public static int OleGetClipboardWithEnterpriseInfo ( Addressable dataObject,  Addressable dataEnterpriseId,  Addressable sourceDescription,  Addressable targetDescription,  Addressable dataDescription) {
        var mh$ = OleGetClipboardWithEnterpriseInfo$MH();
        try {
            return (int)mh$.invokeExact(dataObject, dataEnterpriseId, sourceDescription, targetDescription, dataDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleFlushClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.OleFlushClipboard$MH,"OleFlushClipboard");
    }
    public static int OleFlushClipboard () {
        var mh$ = OleFlushClipboard$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleIsCurrentClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.OleIsCurrentClipboard$MH,"OleIsCurrentClipboard");
    }
    public static int OleIsCurrentClipboard ( Addressable pDataObj) {
        var mh$ = OleIsCurrentClipboard$MH();
        try {
            return (int)mh$.invokeExact(pDataObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateMenuDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.OleCreateMenuDescriptor$MH,"OleCreateMenuDescriptor");
    }
    public static MemoryAddress OleCreateMenuDescriptor ( Addressable hmenuCombined,  Addressable lpMenuWidths) {
        var mh$ = OleCreateMenuDescriptor$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hmenuCombined, lpMenuWidths);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetMenuDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.OleSetMenuDescriptor$MH,"OleSetMenuDescriptor");
    }
    public static int OleSetMenuDescriptor ( Addressable holemenu,  Addressable hwndFrame,  Addressable hwndActiveObject,  Addressable lpFrame,  Addressable lpActiveObj) {
        var mh$ = OleSetMenuDescriptor$MH();
        try {
            return (int)mh$.invokeExact(holemenu, hwndFrame, hwndActiveObject, lpFrame, lpActiveObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDestroyMenuDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.OleDestroyMenuDescriptor$MH,"OleDestroyMenuDescriptor");
    }
    public static int OleDestroyMenuDescriptor ( Addressable holemenu) {
        var mh$ = OleDestroyMenuDescriptor$MH();
        try {
            return (int)mh$.invokeExact(holemenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleTranslateAccelerator$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.OleTranslateAccelerator$MH,"OleTranslateAccelerator");
    }
    public static int OleTranslateAccelerator ( Addressable lpFrame,  Addressable lpFrameInfo,  Addressable lpmsg) {
        var mh$ = OleTranslateAccelerator$MH();
        try {
            return (int)mh$.invokeExact(lpFrame, lpFrameInfo, lpmsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDuplicateData$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.OleDuplicateData$MH,"OleDuplicateData");
    }
    public static MemoryAddress OleDuplicateData ( Addressable hSrc,  short cfFormat,  int uiFlags) {
        var mh$ = OleDuplicateData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSrc, cfFormat, uiFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDraw$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.OleDraw$MH,"OleDraw");
    }
    public static int OleDraw ( Addressable pUnknown,  int dwAspect,  Addressable hdcDraw,  Addressable lprcBounds) {
        var mh$ = OleDraw$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, dwAspect, hdcDraw, lprcBounds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRun$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.OleRun$MH,"OleRun");
    }
    public static int OleRun ( Addressable pUnknown) {
        var mh$ = OleRun$MH();
        try {
            return (int)mh$.invokeExact(pUnknown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleIsRunning$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.OleIsRunning$MH,"OleIsRunning");
    }
    public static int OleIsRunning ( Addressable pObject) {
        var mh$ = OleIsRunning$MH();
        try {
            return (int)mh$.invokeExact(pObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleLockRunning$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.OleLockRunning$MH,"OleLockRunning");
    }
    public static int OleLockRunning ( Addressable pUnknown,  int fLock,  int fLastUnlockCloses) {
        var mh$ = OleLockRunning$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, fLock, fLastUnlockCloses);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseStgMedium$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.ReleaseStgMedium$MH,"ReleaseStgMedium");
    }
    public static void ReleaseStgMedium ( Addressable x0) {
        var mh$ = ReleaseStgMedium$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateOleAdviseHolder$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.CreateOleAdviseHolder$MH,"CreateOleAdviseHolder");
    }
    public static int CreateOleAdviseHolder ( Addressable ppOAHolder) {
        var mh$ = CreateOleAdviseHolder$MH();
        try {
            return (int)mh$.invokeExact(ppOAHolder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateDefaultHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.OleCreateDefaultHandler$MH,"OleCreateDefaultHandler");
    }
    public static int OleCreateDefaultHandler ( Addressable clsid,  Addressable pUnkOuter,  Addressable riid,  Addressable lplpObj) {
        var mh$ = OleCreateDefaultHandler$MH();
        try {
            return (int)mh$.invokeExact(clsid, pUnkOuter, riid, lplpObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateEmbeddingHelper$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.OleCreateEmbeddingHelper$MH,"OleCreateEmbeddingHelper");
    }
    public static int OleCreateEmbeddingHelper ( Addressable clsid,  Addressable pUnkOuter,  int flags,  Addressable pCF,  Addressable riid,  Addressable lplpObj) {
        var mh$ = OleCreateEmbeddingHelper$MH();
        try {
            return (int)mh$.invokeExact(clsid, pUnkOuter, flags, pCF, riid, lplpObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsAccelerator$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.IsAccelerator$MH,"IsAccelerator");
    }
    public static int IsAccelerator ( Addressable hAccel,  int cAccelEntries,  Addressable lpMsg,  Addressable lpwCmd) {
        var mh$ = IsAccelerator$MH();
        try {
            return (int)mh$.invokeExact(hAccel, cAccelEntries, lpMsg, lpwCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetIconOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.OleGetIconOfFile$MH,"OleGetIconOfFile");
    }
    public static MemoryAddress OleGetIconOfFile ( Addressable lpszPath,  int fUseFileAsLabel) {
        var mh$ = OleGetIconOfFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszPath, fUseFileAsLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetIconOfClass$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.OleGetIconOfClass$MH,"OleGetIconOfClass");
    }
    public static MemoryAddress OleGetIconOfClass ( Addressable rclsid,  Addressable lpszLabel,  int fUseTypeAsLabel) {
        var mh$ = OleGetIconOfClass$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(rclsid, lpszLabel, fUseTypeAsLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleMetafilePictFromIconAndLabel$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.OleMetafilePictFromIconAndLabel$MH,"OleMetafilePictFromIconAndLabel");
    }
    public static MemoryAddress OleMetafilePictFromIconAndLabel ( Addressable hIcon,  Addressable lpszLabel,  Addressable lpszSourceFile,  int iIconIndex) {
        var mh$ = OleMetafilePictFromIconAndLabel$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hIcon, lpszLabel, lpszSourceFile, iIconIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegGetUserType$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.OleRegGetUserType$MH,"OleRegGetUserType");
    }
    public static int OleRegGetUserType ( Addressable clsid,  int dwFormOfType,  Addressable pszUserType) {
        var mh$ = OleRegGetUserType$MH();
        try {
            return (int)mh$.invokeExact(clsid, dwFormOfType, pszUserType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegGetMiscStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.OleRegGetMiscStatus$MH,"OleRegGetMiscStatus");
    }
    public static int OleRegGetMiscStatus ( Addressable clsid,  int dwAspect,  Addressable pdwStatus) {
        var mh$ = OleRegGetMiscStatus$MH();
        try {
            return (int)mh$.invokeExact(clsid, dwAspect, pdwStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegEnumFormatEtc$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.OleRegEnumFormatEtc$MH,"OleRegEnumFormatEtc");
    }
    public static int OleRegEnumFormatEtc ( Addressable clsid,  int dwDirection,  Addressable ppenum) {
        var mh$ = OleRegEnumFormatEtc$MH();
        try {
            return (int)mh$.invokeExact(clsid, dwDirection, ppenum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegEnumVerbs$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.OleRegEnumVerbs$MH,"OleRegEnumVerbs");
    }
    public static int OleRegEnumVerbs ( Addressable clsid,  Addressable ppenum) {
        var mh$ = OleRegEnumVerbs$MH();
        try {
            return (int)mh$.invokeExact(clsid, ppenum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPOLESTREAM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOLESTREAMVTBL = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle OleConvertOLESTREAMToIStorage$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.OleConvertOLESTREAMToIStorage$MH,"OleConvertOLESTREAMToIStorage");
    }
    public static int OleConvertOLESTREAMToIStorage ( Addressable lpolestream,  Addressable pstg,  Addressable ptd) {
        var mh$ = OleConvertOLESTREAMToIStorage$MH();
        try {
            return (int)mh$.invokeExact(lpolestream, pstg, ptd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleConvertIStorageToOLESTREAM$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.OleConvertIStorageToOLESTREAM$MH,"OleConvertIStorageToOLESTREAM");
    }
    public static int OleConvertIStorageToOLESTREAM ( Addressable pstg,  Addressable lpolestream) {
        var mh$ = OleConvertIStorageToOLESTREAM$MH();
        try {
            return (int)mh$.invokeExact(pstg, lpolestream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDoAutoConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.OleDoAutoConvert$MH,"OleDoAutoConvert");
    }
    public static int OleDoAutoConvert ( Addressable pStg,  Addressable pClsidNew) {
        var mh$ = OleDoAutoConvert$MH();
        try {
            return (int)mh$.invokeExact(pStg, pClsidNew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetAutoConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.OleGetAutoConvert$MH,"OleGetAutoConvert");
    }
    public static int OleGetAutoConvert ( Addressable clsidOld,  Addressable pClsidNew) {
        var mh$ = OleGetAutoConvert$MH();
        try {
            return (int)mh$.invokeExact(clsidOld, pClsidNew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetAutoConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.OleSetAutoConvert$MH,"OleSetAutoConvert");
    }
    public static int OleSetAutoConvert ( Addressable clsidOld,  Addressable clsidNew) {
        var mh$ = OleSetAutoConvert$MH();
        try {
            return (int)mh$.invokeExact(clsidOld, clsidNew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConvertStg$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.SetConvertStg$MH,"SetConvertStg");
    }
    public static int SetConvertStg ( Addressable pStg,  int fConvert) {
        var mh$ = SetConvertStg$MH();
        try {
            return (int)mh$.invokeExact(pStg, fConvert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleConvertIStorageToOLESTREAMEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.OleConvertIStorageToOLESTREAMEx$MH,"OleConvertIStorageToOLESTREAMEx");
    }
    public static int OleConvertIStorageToOLESTREAMEx ( Addressable pstg,  short cfFormat,  int lWidth,  int lHeight,  int dwSize,  Addressable pmedium,  Addressable polestm) {
        var mh$ = OleConvertIStorageToOLESTREAMEx$MH();
        try {
            return (int)mh$.invokeExact(pstg, cfFormat, lWidth, lHeight, dwSize, pmedium, polestm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleConvertOLESTREAMToIStorageEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.OleConvertOLESTREAMToIStorageEx$MH,"OleConvertOLESTREAMToIStorageEx");
    }
    public static int OleConvertOLESTREAMToIStorageEx ( Addressable polestm,  Addressable pstg,  Addressable pcfFormat,  Addressable plwWidth,  Addressable plHeight,  Addressable pdwSize,  Addressable pmedium) {
        var mh$ = OleConvertOLESTREAMToIStorageEx$MH();
        try {
            return (int)mh$.invokeExact(polestm, pstg, pcfFormat, plwWidth, plHeight, pdwSize, pmedium);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment IID_IPrintDialogCallback$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1247.IID_IPrintDialogCallback$SEGMENT,"IID_IPrintDialogCallback");
    }
    public static MemorySegment IID_IPrintDialogServices$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1248.IID_IPrintDialogServices$SEGMENT,"IID_IPrintDialogServices");
    }
    public static OfAddress LPOPENFILENAME_NT4A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENFILENAME_NT4W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENFILENAME_NT4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENFILENAMEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENFILENAMEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENFILENAME = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetOpenFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.GetOpenFileNameA$MH,"GetOpenFileNameA");
    }
    public static int GetOpenFileNameA ( Addressable x0) {
        var mh$ = GetOpenFileNameA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOpenFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.GetOpenFileNameW$MH,"GetOpenFileNameW");
    }
    public static int GetOpenFileNameW ( Addressable x0) {
        var mh$ = GetOpenFileNameW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSaveFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.GetSaveFileNameA$MH,"GetSaveFileNameA");
    }
    public static int GetSaveFileNameA ( Addressable x0) {
        var mh$ = GetSaveFileNameA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSaveFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.GetSaveFileNameW$MH,"GetSaveFileNameW");
    }
    public static int GetSaveFileNameW ( Addressable x0) {
        var mh$ = GetSaveFileNameW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.GetFileTitleA$MH,"GetFileTitleA");
    }
    public static short GetFileTitleA ( Addressable x0,  Addressable Buf,  short cchSize) {
        var mh$ = GetFileTitleA$MH();
        try {
            return (short)mh$.invokeExact(x0, Buf, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.GetFileTitleW$MH,"GetFileTitleW");
    }
    public static short GetFileTitleW ( Addressable x0,  Addressable Buf,  short cchSize) {
        var mh$ = GetFileTitleW$MH();
        try {
            return (short)mh$.invokeExact(x0, Buf, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPOFNOTIFYA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOFNOTIFYW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOFNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOFNOTIFYEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOFNOTIFYEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOFNOTIFYEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCHOOSECOLORA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCHOOSECOLORW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCHOOSECOLOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChooseColorA$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.ChooseColorA$MH,"ChooseColorA");
    }
    public static int ChooseColorA ( Addressable x0) {
        var mh$ = ChooseColorA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChooseColorW$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.ChooseColorW$MH,"ChooseColorW");
    }
    public static int ChooseColorW ( Addressable x0) {
        var mh$ = ChooseColorW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPFINDREPLACEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFINDREPLACEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFINDREPLACE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle FindTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.FindTextA$MH,"FindTextA");
    }
    public static MemoryAddress FindTextA ( Addressable x0) {
        var mh$ = FindTextA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.FindTextW$MH,"FindTextW");
    }
    public static MemoryAddress FindTextW ( Addressable x0) {
        var mh$ = FindTextW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.ReplaceTextA$MH,"ReplaceTextA");
    }
    public static MemoryAddress ReplaceTextA ( Addressable x0) {
        var mh$ = ReplaceTextA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.ReplaceTextW$MH,"ReplaceTextW");
    }
    public static MemoryAddress ReplaceTextW ( Addressable x0) {
        var mh$ = ReplaceTextW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPCHOOSEFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCHOOSEFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCHOOSEFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCHOOSEFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCHOOSEFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCHOOSEFONT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChooseFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.ChooseFontA$MH,"ChooseFontA");
    }
    public static int ChooseFontA ( Addressable x0) {
        var mh$ = ChooseFontA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChooseFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.ChooseFontW$MH,"ChooseFontW");
    }
    public static int ChooseFontW ( Addressable x0) {
        var mh$ = ChooseFontW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPPRINTDLGA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTDLGW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTDLG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PrintDlgA$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.PrintDlgA$MH,"PrintDlgA");
    }
    public static int PrintDlgA ( Addressable pPD) {
        var mh$ = PrintDlgA$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrintDlgW$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.PrintDlgW$MH,"PrintDlgW");
    }
    public static int PrintDlgW ( Addressable pPD) {
        var mh$ = PrintDlgW$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPPRINTPAGERANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCPRINTPAGERANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTDLGEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTDLGEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTDLGEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PrintDlgExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.PrintDlgExA$MH,"PrintDlgExA");
    }
    public static int PrintDlgExA ( Addressable pPD) {
        var mh$ = PrintDlgExA$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrintDlgExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.PrintDlgExW$MH,"PrintDlgExW");
    }
    public static int PrintDlgExW ( Addressable pPD) {
        var mh$ = PrintDlgExW$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDEVNAMES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCDEVNAMES = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CommDlgExtendedError$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.CommDlgExtendedError$MH,"CommDlgExtendedError");
    }
    public static int CommDlgExtendedError () {
        var mh$ = CommDlgExtendedError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPPAGESETUPDLGA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPAGESETUPDLGW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPAGESETUPDLG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PageSetupDlgA$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.PageSetupDlgA$MH,"PageSetupDlgA");
    }
    public static int PageSetupDlgA ( Addressable x0) {
        var mh$ = PageSetupDlgA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PageSetupDlgW$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.PageSetupDlgW$MH,"PageSetupDlgW");
    }
    public static int PageSetupDlgW ( Addressable x0) {
        var mh$ = PageSetupDlgW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_CharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.uaw_CharUpperW$MH,"uaw_CharUpperW");
    }
    public static MemoryAddress uaw_CharUpperW ( Addressable String_) {
        var mh$ = uaw_CharUpperW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrcmpW$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.uaw_lstrcmpW$MH,"uaw_lstrcmpW");
    }
    public static int uaw_lstrcmpW ( Addressable String1,  Addressable String2) {
        var mh$ = uaw_lstrcmpW$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrcmpiW$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.uaw_lstrcmpiW$MH,"uaw_lstrcmpiW");
    }
    public static int uaw_lstrcmpiW ( Addressable String1,  Addressable String2) {
        var mh$ = uaw_lstrcmpiW$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrlenW$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.uaw_lstrlenW$MH,"uaw_lstrlenW");
    }
    public static int uaw_lstrlenW ( Addressable String_) {
        var mh$ = uaw_lstrlenW$MH();
        try {
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcschr$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.uaw_wcschr$MH,"uaw_wcschr");
    }
    public static MemoryAddress uaw_wcschr ( Addressable String_,  short Character) {
        var mh$ = uaw_wcschr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcscpy$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.uaw_wcscpy$MH,"uaw_wcscpy");
    }
    public static MemoryAddress uaw_wcscpy ( Addressable Destination,  Addressable Source) {
        var mh$ = uaw_wcscpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Destination, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.uaw_wcsicmp$MH,"uaw_wcsicmp");
    }
    public static int uaw_wcsicmp ( Addressable String1,  Addressable String2) {
        var mh$ = uaw_wcsicmp$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.uaw_wcslen$MH,"uaw_wcslen");
    }
    public static long uaw_wcslen ( Addressable String_) {
        var mh$ = uaw_wcslen$MH();
        try {
            return (long)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcsrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.uaw_wcsrchr$MH,"uaw_wcsrchr");
    }
    public static MemoryAddress uaw_wcsrchr ( Addressable String_,  short Character) {
        var mh$ = uaw_wcsrchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_CharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.ua_CharUpperW$MH,"ua_CharUpperW");
    }
    public static MemoryAddress ua_CharUpperW ( Addressable String_) {
        var mh$ = ua_CharUpperW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_lstrcmpW$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.ua_lstrcmpW$MH,"ua_lstrcmpW");
    }
    public static int ua_lstrcmpW ( Addressable String1,  Addressable String2) {
        var mh$ = ua_lstrcmpW$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_lstrcmpiW$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.ua_lstrcmpiW$MH,"ua_lstrcmpiW");
    }
    public static int ua_lstrcmpiW ( Addressable String1,  Addressable String2) {
        var mh$ = ua_lstrcmpiW$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_lstrlenW$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.ua_lstrlenW$MH,"ua_lstrlenW");
    }
    public static int ua_lstrlenW ( Addressable String_) {
        var mh$ = ua_lstrlenW$MH();
        try {
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PUWSTR_C = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ua_wcschr$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.ua_wcschr$MH,"ua_wcschr");
    }
    public static MemoryAddress ua_wcschr ( Addressable String_,  short Character) {
        var mh$ = ua_wcschr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcsrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.ua_wcsrchr$MH,"ua_wcsrchr");
    }
    public static MemoryAddress ua_wcsrchr ( Addressable String_,  short Character) {
        var mh$ = ua_wcsrchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcscpy$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.ua_wcscpy$MH,"ua_wcscpy");
    }
    public static MemoryAddress ua_wcscpy ( Addressable Destination,  Addressable Source) {
        var mh$ = ua_wcscpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Destination, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcscpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.ua_wcscpy_s$MH,"ua_wcscpy_s");
    }
    public static MemoryAddress ua_wcscpy_s ( Addressable Destination,  long DestinationSize,  Addressable Source) {
        var mh$ = ua_wcscpy_s$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Destination, DestinationSize, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.ua_wcslen$MH,"ua_wcslen");
    }
    public static long ua_wcslen ( Addressable String_) {
        var mh$ = ua_wcslen$MH();
        try {
            return (long)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.ua_wcsicmp$MH,"ua_wcsicmp");
    }
    public static int ua_wcsicmp ( Addressable String1,  Addressable String2) {
        var mh$ = ua_wcsicmp$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1257.NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$SEGMENT,"NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID");
    }
    public static MemorySegment NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1257.NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$SEGMENT,"NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID");
    }
    public static MemorySegment DOMAIN_JOIN_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1257.DOMAIN_JOIN_GUID$SEGMENT,"DOMAIN_JOIN_GUID");
    }
    public static MemorySegment DOMAIN_LEAVE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1258.DOMAIN_LEAVE_GUID$SEGMENT,"DOMAIN_LEAVE_GUID");
    }
    public static MemorySegment FIREWALL_PORT_OPEN_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1258.FIREWALL_PORT_OPEN_GUID$SEGMENT,"FIREWALL_PORT_OPEN_GUID");
    }
    public static MemorySegment FIREWALL_PORT_CLOSE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1258.FIREWALL_PORT_CLOSE_GUID$SEGMENT,"FIREWALL_PORT_CLOSE_GUID");
    }
    public static MemorySegment MACHINE_POLICY_PRESENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1258.MACHINE_POLICY_PRESENT_GUID$SEGMENT,"MACHINE_POLICY_PRESENT_GUID");
    }
    public static MemorySegment USER_POLICY_PRESENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1258.USER_POLICY_PRESENT_GUID$SEGMENT,"USER_POLICY_PRESENT_GUID");
    }
    public static MemorySegment RPC_INTERFACE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1258.RPC_INTERFACE_EVENT_GUID$SEGMENT,"RPC_INTERFACE_EVENT_GUID");
    }
    public static MemorySegment NAMED_PIPE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1259.NAMED_PIPE_EVENT_GUID$SEGMENT,"NAMED_PIPE_EVENT_GUID");
    }
    public static MemorySegment CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1259.CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$SEGMENT,"CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID");
    }
    public static OfAddress LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DESCRIPTIONA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DESCRIPTIONW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DESCRIPTION = Constants$root.C_POINTER$LAYOUT;
    public static int SC_ACTION_NONE() {
        return (int)0L;
    }
    public static int SC_ACTION_RESTART() {
        return (int)1L;
    }
    public static int SC_ACTION_REBOOT() {
        return (int)2L;
    }
    public static int SC_ACTION_RUN_COMMAND() {
        return (int)3L;
    }
    public static int SC_ACTION_OWN_RESTART() {
        return (int)4L;
    }
    public static OfAddress LPSC_ACTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DELAYED_AUTO_START_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONS_FLAG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_SID_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_PRESHUTDOWN_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TRIGGER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TRIGGER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_PREFERRED_NODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TIMECHANGE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_LAUNCH_PROTECTED_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress SC_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSC_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress SERVICE_STATUS_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static int SC_STATUS_PROCESS_INFO() {
        return (int)0L;
    }
    public static int SC_ENUM_PROCESS_INFO() {
        return (int)0L;
    }
    public static OfAddress LPSERVICE_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_STATUS_PROCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS_PROCESSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS_PROCESSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS_PROCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress SC_LOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_LOCK_STATUSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_LOCK_STATUSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_LOCK_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_CONFIGA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_CONFIGW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_TABLE_ENTRYA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_TABLE_ENTRYW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_TABLE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFYA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFYW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_START_REASON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChangeServiceConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.ChangeServiceConfigA$MH,"ChangeServiceConfigA");
    }
    public static int ChangeServiceConfigA ( Addressable hService,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword,  Addressable lpDisplayName) {
        var mh$ = ChangeServiceConfigA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.ChangeServiceConfigW$MH,"ChangeServiceConfigW");
    }
    public static int ChangeServiceConfigW ( Addressable hService,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword,  Addressable lpDisplayName) {
        var mh$ = ChangeServiceConfigW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfig2A$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.ChangeServiceConfig2A$MH,"ChangeServiceConfig2A");
    }
    public static int ChangeServiceConfig2A ( Addressable hService,  int dwInfoLevel,  Addressable lpInfo) {
        var mh$ = ChangeServiceConfig2A$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfig2W$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.ChangeServiceConfig2W$MH,"ChangeServiceConfig2W");
    }
    public static int ChangeServiceConfig2W ( Addressable hService,  int dwInfoLevel,  Addressable lpInfo) {
        var mh$ = ChangeServiceConfig2W$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseServiceHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.CloseServiceHandle$MH,"CloseServiceHandle");
    }
    public static int CloseServiceHandle ( Addressable hSCObject) {
        var mh$ = CloseServiceHandle$MH();
        try {
            return (int)mh$.invokeExact(hSCObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlService$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.ControlService$MH,"ControlService");
    }
    public static int ControlService ( Addressable hService,  int dwControl,  Addressable lpServiceStatus) {
        var mh$ = ControlService$MH();
        try {
            return (int)mh$.invokeExact(hService, dwControl, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.CreateServiceA$MH,"CreateServiceA");
    }
    public static MemoryAddress CreateServiceA ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  int dwDesiredAccess,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword) {
        var mh$ = CreateServiceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.CreateServiceW$MH,"CreateServiceW");
    }
    public static MemoryAddress CreateServiceW ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  int dwDesiredAccess,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword) {
        var mh$ = CreateServiceW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteService$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.DeleteService$MH,"DeleteService");
    }
    public static int DeleteService ( Addressable hService) {
        var mh$ = DeleteService$MH();
        try {
            return (int)mh$.invokeExact(hService);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDependentServicesA$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.EnumDependentServicesA$MH,"EnumDependentServicesA");
    }
    public static int EnumDependentServicesA ( Addressable hService,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned) {
        var mh$ = EnumDependentServicesA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDependentServicesW$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.EnumDependentServicesW$MH,"EnumDependentServicesW");
    }
    public static int EnumDependentServicesW ( Addressable hService,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned) {
        var mh$ = EnumDependentServicesW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusA$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.EnumServicesStatusA$MH,"EnumServicesStatusA");
    }
    public static int EnumServicesStatusA ( Addressable hSCManager,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle) {
        var mh$ = EnumServicesStatusA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusW$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.EnumServicesStatusW$MH,"EnumServicesStatusW");
    }
    public static int EnumServicesStatusW ( Addressable hSCManager,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle) {
        var mh$ = EnumServicesStatusW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.EnumServicesStatusExA$MH,"EnumServicesStatusExA");
    }
    public static int EnumServicesStatusExA ( Addressable hSCManager,  int InfoLevel,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle,  Addressable pszGroupName) {
        var mh$ = EnumServicesStatusExA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.EnumServicesStatusExW$MH,"EnumServicesStatusExW");
    }
    public static int EnumServicesStatusExW ( Addressable hSCManager,  int InfoLevel,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle,  Addressable pszGroupName) {
        var mh$ = EnumServicesStatusExW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceKeyNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.GetServiceKeyNameA$MH,"GetServiceKeyNameA");
    }
    public static int GetServiceKeyNameA ( Addressable hSCManager,  Addressable lpDisplayName,  Addressable lpServiceName,  Addressable lpcchBuffer) {
        var mh$ = GetServiceKeyNameA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceKeyNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.GetServiceKeyNameW$MH,"GetServiceKeyNameW");
    }
    public static int GetServiceKeyNameW ( Addressable hSCManager,  Addressable lpDisplayName,  Addressable lpServiceName,  Addressable lpcchBuffer) {
        var mh$ = GetServiceKeyNameW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceDisplayNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.GetServiceDisplayNameA$MH,"GetServiceDisplayNameA");
    }
    public static int GetServiceDisplayNameA ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  Addressable lpcchBuffer) {
        var mh$ = GetServiceDisplayNameA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceDisplayNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.GetServiceDisplayNameW$MH,"GetServiceDisplayNameW");
    }
    public static int GetServiceDisplayNameW ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  Addressable lpcchBuffer) {
        var mh$ = GetServiceDisplayNameW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockServiceDatabase$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.LockServiceDatabase$MH,"LockServiceDatabase");
    }
    public static MemoryAddress LockServiceDatabase ( Addressable hSCManager) {
        var mh$ = LockServiceDatabase$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSCManager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyBootConfigStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.NotifyBootConfigStatus$MH,"NotifyBootConfigStatus");
    }
    public static int NotifyBootConfigStatus ( int BootAcceptable) {
        var mh$ = NotifyBootConfigStatus$MH();
        try {
            return (int)mh$.invokeExact(BootAcceptable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSCManagerA$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.OpenSCManagerA$MH,"OpenSCManagerA");
    }
    public static MemoryAddress OpenSCManagerA ( Addressable lpMachineName,  Addressable lpDatabaseName,  int dwDesiredAccess) {
        var mh$ = OpenSCManagerA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSCManagerW$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.OpenSCManagerW$MH,"OpenSCManagerW");
    }
    public static MemoryAddress OpenSCManagerW ( Addressable lpMachineName,  Addressable lpDatabaseName,  int dwDesiredAccess) {
        var mh$ = OpenSCManagerW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.OpenServiceA$MH,"OpenServiceA");
    }
    public static MemoryAddress OpenServiceA ( Addressable hSCManager,  Addressable lpServiceName,  int dwDesiredAccess) {
        var mh$ = OpenServiceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.OpenServiceW$MH,"OpenServiceW");
    }
    public static MemoryAddress OpenServiceW ( Addressable hSCManager,  Addressable lpServiceName,  int dwDesiredAccess) {
        var mh$ = OpenServiceW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.QueryServiceConfigA$MH,"QueryServiceConfigA");
    }
    public static int QueryServiceConfigA ( Addressable hService,  Addressable lpServiceConfig,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceConfigA$MH();
        try {
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.QueryServiceConfigW$MH,"QueryServiceConfigW");
    }
    public static int QueryServiceConfigW ( Addressable hService,  Addressable lpServiceConfig,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceConfigW$MH();
        try {
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfig2A$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.QueryServiceConfig2A$MH,"QueryServiceConfig2A");
    }
    public static int QueryServiceConfig2A ( Addressable hService,  int dwInfoLevel,  Addressable lpBuffer,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceConfig2A$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfig2W$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.QueryServiceConfig2W$MH,"QueryServiceConfig2W");
    }
    public static int QueryServiceConfig2W ( Addressable hService,  int dwInfoLevel,  Addressable lpBuffer,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceConfig2W$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceLockStatusA$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.QueryServiceLockStatusA$MH,"QueryServiceLockStatusA");
    }
    public static int QueryServiceLockStatusA ( Addressable hSCManager,  Addressable lpLockStatus,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceLockStatusA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceLockStatusW$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.QueryServiceLockStatusW$MH,"QueryServiceLockStatusW");
    }
    public static int QueryServiceLockStatusW ( Addressable hSCManager,  Addressable lpLockStatus,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceLockStatusW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.QueryServiceObjectSecurity$MH,"QueryServiceObjectSecurity");
    }
    public static int QueryServiceObjectSecurity ( Addressable hService,  int dwSecurityInformation,  Addressable lpSecurityDescriptor,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.QueryServiceStatus$MH,"QueryServiceStatus");
    }
    public static int QueryServiceStatus ( Addressable hService,  Addressable lpServiceStatus) {
        var mh$ = QueryServiceStatus$MH();
        try {
            return (int)mh$.invokeExact(hService, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceStatusEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.QueryServiceStatusEx$MH,"QueryServiceStatusEx");
    }
    public static int QueryServiceStatusEx ( Addressable hService,  int InfoLevel,  Addressable lpBuffer,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceStatusEx$MH();
        try {
            return (int)mh$.invokeExact(hService, InfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerA$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.RegisterServiceCtrlHandlerA$MH,"RegisterServiceCtrlHandlerA");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerA ( Addressable lpServiceName,  Addressable lpHandlerProc) {
        var mh$ = RegisterServiceCtrlHandlerA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerW$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.RegisterServiceCtrlHandlerW$MH,"RegisterServiceCtrlHandlerW");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerW ( Addressable lpServiceName,  Addressable lpHandlerProc) {
        var mh$ = RegisterServiceCtrlHandlerW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.RegisterServiceCtrlHandlerExA$MH,"RegisterServiceCtrlHandlerExA");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerExA ( Addressable lpServiceName,  Addressable lpHandlerProc,  Addressable lpContext) {
        var mh$ = RegisterServiceCtrlHandlerExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.RegisterServiceCtrlHandlerExW$MH,"RegisterServiceCtrlHandlerExW");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerExW ( Addressable lpServiceName,  Addressable lpHandlerProc,  Addressable lpContext) {
        var mh$ = RegisterServiceCtrlHandlerExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetServiceObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.SetServiceObjectSecurity$MH,"SetServiceObjectSecurity");
    }
    public static int SetServiceObjectSecurity ( Addressable hService,  int dwSecurityInformation,  Addressable lpSecurityDescriptor) {
        var mh$ = SetServiceObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetServiceStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.SetServiceStatus$MH,"SetServiceStatus");
    }
    public static int SetServiceStatus ( Addressable hServiceStatus,  Addressable lpServiceStatus) {
        var mh$ = SetServiceStatus$MH();
        try {
            return (int)mh$.invokeExact(hServiceStatus, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceCtrlDispatcherA$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.StartServiceCtrlDispatcherA$MH,"StartServiceCtrlDispatcherA");
    }
    public static int StartServiceCtrlDispatcherA ( Addressable lpServiceStartTable) {
        var mh$ = StartServiceCtrlDispatcherA$MH();
        try {
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceCtrlDispatcherW$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.StartServiceCtrlDispatcherW$MH,"StartServiceCtrlDispatcherW");
    }
    public static int StartServiceCtrlDispatcherW ( Addressable lpServiceStartTable) {
        var mh$ = StartServiceCtrlDispatcherW$MH();
        try {
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.StartServiceA$MH,"StartServiceA");
    }
    public static int StartServiceA ( Addressable hService,  int dwNumServiceArgs,  Addressable lpServiceArgVectors) {
        var mh$ = StartServiceA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.StartServiceW$MH,"StartServiceW");
    }
    public static int StartServiceW ( Addressable hService,  int dwNumServiceArgs,  Addressable lpServiceArgVectors) {
        var mh$ = StartServiceW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockServiceDatabase$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.UnlockServiceDatabase$MH,"UnlockServiceDatabase");
    }
    public static int UnlockServiceDatabase ( Addressable ScLock) {
        var mh$ = UnlockServiceDatabase$MH();
        try {
            return (int)mh$.invokeExact(ScLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyServiceStatusChangeA$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.NotifyServiceStatusChangeA$MH,"NotifyServiceStatusChangeA");
    }
    public static int NotifyServiceStatusChangeA ( Addressable hService,  int dwNotifyMask,  Addressable pNotifyBuffer) {
        var mh$ = NotifyServiceStatusChangeA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyServiceStatusChangeW$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.NotifyServiceStatusChangeW$MH,"NotifyServiceStatusChangeW");
    }
    public static int NotifyServiceStatusChangeW ( Addressable hService,  int dwNotifyMask,  Addressable pNotifyBuffer) {
        var mh$ = NotifyServiceStatusChangeW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlServiceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.ControlServiceExA$MH,"ControlServiceExA");
    }
    public static int ControlServiceExA ( Addressable hService,  int dwControl,  int dwInfoLevel,  Addressable pControlParams) {
        var mh$ = ControlServiceExA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlServiceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.ControlServiceExW$MH,"ControlServiceExW");
    }
    public static int ControlServiceExW ( Addressable hService,  int dwControl,  int dwInfoLevel,  Addressable pControlParams) {
        var mh$ = ControlServiceExW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceDynamicInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.QueryServiceDynamicInformation$MH,"QueryServiceDynamicInformation");
    }
    public static int QueryServiceDynamicInformation ( Addressable hServiceStatus,  int dwInfoLevel,  Addressable ppDynamicInfo) {
        var mh$ = QueryServiceDynamicInformation$MH();
        try {
            return (int)mh$.invokeExact(hServiceStatus, dwInfoLevel, ppDynamicInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SC_EVENT_DATABASE_CHANGE() {
        return (int)0L;
    }
    public static int SC_EVENT_PROPERTY_CHANGE() {
        return (int)1L;
    }
    public static int SC_EVENT_STATUS_CHANGE() {
        return (int)2L;
    }
    public static OfAddress PSC_EVENT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSC_NOTIFICATION_REGISTRATION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SubscribeServiceChangeNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.SubscribeServiceChangeNotifications$MH,"SubscribeServiceChangeNotifications");
    }
    public static int SubscribeServiceChangeNotifications ( Addressable hService,  int eEventType,  Addressable pCallback,  Addressable pCallbackContext,  Addressable pSubscription) {
        var mh$ = SubscribeServiceChangeNotifications$MH();
        try {
            return (int)mh$.invokeExact(hService, eEventType, pCallback, pCallbackContext, pSubscription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnsubscribeServiceChangeNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.UnsubscribeServiceChangeNotifications$MH,"UnsubscribeServiceChangeNotifications");
    }
    public static void UnsubscribeServiceChangeNotifications ( Addressable pSubscription) {
        var mh$ = UnsubscribeServiceChangeNotifications$MH();
        try {
            mh$.invokeExact(pSubscription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitServiceState$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.WaitServiceState$MH,"WaitServiceState");
    }
    public static int WaitServiceState ( Addressable hService,  int dwNotify,  int dwTimeout,  Addressable hCancelEvent) {
        var mh$ = WaitServiceState$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNotify, dwTimeout, hCancelEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ServiceRegistryStateParameters() {
        return (int)0L;
    }
    public static int ServiceRegistryStatePersistent() {
        return (int)1L;
    }
    public static int MaxServiceRegistryStateType() {
        return (int)2L;
    }
    public static MethodHandle GetServiceRegistryStateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.GetServiceRegistryStateKey$MH,"GetServiceRegistryStateKey");
    }
    public static int GetServiceRegistryStateKey ( Addressable ServiceStatusHandle,  int StateType,  int AccessMask,  Addressable ServiceStateKey) {
        var mh$ = GetServiceRegistryStateKey$MH();
        try {
            return (int)mh$.invokeExact(ServiceStatusHandle, StateType, AccessMask, ServiceStateKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ServiceDirectoryPersistentState() {
        return (int)0L;
    }
    public static int ServiceDirectoryTypeMax() {
        return (int)1L;
    }
    public static MethodHandle GetServiceDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.GetServiceDirectory$MH,"GetServiceDirectory");
    }
    public static int GetServiceDirectory ( Addressable hServiceStatus,  int eDirectoryType,  Addressable lpPathBuffer,  int cchPathBufferLength,  Addressable lpcchRequiredBufferLength) {
        var mh$ = GetServiceDirectory$MH();
        try {
            return (int)mh$.invokeExact(hServiceStatus, eDirectoryType, lpPathBuffer, cchPathBufferLength, lpcchRequiredBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMODEMDEVCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMODEMDEVCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMODEMSETTINGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMODEMSETTINGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HIMC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HIMCC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHKL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ImmInstallIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.ImmInstallIMEA$MH,"ImmInstallIMEA");
    }
    public static MemoryAddress ImmInstallIMEA ( Addressable lpszIMEFileName,  Addressable lpszLayoutText) {
        var mh$ = ImmInstallIMEA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmInstallIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.ImmInstallIMEW$MH,"ImmInstallIMEW");
    }
    public static MemoryAddress ImmInstallIMEW ( Addressable lpszIMEFileName,  Addressable lpszLayoutText) {
        var mh$ = ImmInstallIMEW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDefaultIMEWnd$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.ImmGetDefaultIMEWnd$MH,"ImmGetDefaultIMEWnd");
    }
    public static MemoryAddress ImmGetDefaultIMEWnd ( Addressable x0) {
        var mh$ = ImmGetDefaultIMEWnd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionA$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.ImmGetDescriptionA$MH,"ImmGetDescriptionA");
    }
    public static int ImmGetDescriptionA ( Addressable x0,  Addressable lpszDescription,  int uBufLen) {
        var mh$ = ImmGetDescriptionA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionW$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.ImmGetDescriptionW$MH,"ImmGetDescriptionW");
    }
    public static int ImmGetDescriptionW ( Addressable x0,  Addressable lpszDescription,  int uBufLen) {
        var mh$ = ImmGetDescriptionW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.ImmGetIMEFileNameA$MH,"ImmGetIMEFileNameA");
    }
    public static int ImmGetIMEFileNameA ( Addressable x0,  Addressable lpszFileName,  int uBufLen) {
        var mh$ = ImmGetIMEFileNameA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.ImmGetIMEFileNameW$MH,"ImmGetIMEFileNameW");
    }
    public static int ImmGetIMEFileNameW ( Addressable x0,  Addressable lpszFileName,  int uBufLen) {
        var mh$ = ImmGetIMEFileNameW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.ImmGetProperty$MH,"ImmGetProperty");
    }
    public static int ImmGetProperty ( Addressable x0,  int x1) {
        var mh$ = ImmGetProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.ImmIsIME$MH,"ImmIsIME");
    }
    public static int ImmIsIME ( Addressable x0) {
        var mh$ = ImmIsIME$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSimulateHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmSimulateHotKey$MH,"ImmSimulateHotKey");
    }
    public static int ImmSimulateHotKey ( Addressable x0,  int x1) {
        var mh$ = ImmSimulateHotKey$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmCreateContext$MH,"ImmCreateContext");
    }
    public static MemoryAddress ImmCreateContext () {
        var mh$ = ImmCreateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDestroyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmDestroyContext$MH,"ImmDestroyContext");
    }
    public static int ImmDestroyContext ( Addressable x0) {
        var mh$ = ImmDestroyContext$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmGetContext$MH,"ImmGetContext");
    }
    public static MemoryAddress ImmGetContext ( Addressable x0) {
        var mh$ = ImmGetContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmReleaseContext$MH,"ImmReleaseContext");
    }
    public static int ImmReleaseContext ( Addressable x0,  Addressable x1) {
        var mh$ = ImmReleaseContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmAssociateContext$MH,"ImmAssociateContext");
    }
    public static MemoryAddress ImmAssociateContext ( Addressable x0,  Addressable x1) {
        var mh$ = ImmAssociateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContextEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.ImmAssociateContextEx$MH,"ImmAssociateContextEx");
    }
    public static int ImmAssociateContextEx ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = ImmAssociateContextEx$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.ImmGetCompositionStringA$MH,"ImmGetCompositionStringA");
    }
    public static int ImmGetCompositionStringA ( Addressable x0,  int x1,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetCompositionStringA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.ImmGetCompositionStringW$MH,"ImmGetCompositionStringW");
    }
    public static int ImmGetCompositionStringW ( Addressable x0,  int x1,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetCompositionStringW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.ImmSetCompositionStringA$MH,"ImmSetCompositionStringA");
    }
    public static int ImmSetCompositionStringA ( Addressable x0,  int dwIndex,  Addressable lpComp,  int dwCompLen,  Addressable lpRead,  int dwReadLen) {
        var mh$ = ImmSetCompositionStringA$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.ImmSetCompositionStringW$MH,"ImmSetCompositionStringW");
    }
    public static int ImmSetCompositionStringW ( Addressable x0,  int dwIndex,  Addressable lpComp,  int dwCompLen,  Addressable lpRead,  int dwReadLen) {
        var mh$ = ImmSetCompositionStringW$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.ImmGetCandidateListCountA$MH,"ImmGetCandidateListCountA");
    }
    public static int ImmGetCandidateListCountA ( Addressable x0,  Addressable lpdwListCount) {
        var mh$ = ImmGetCandidateListCountA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.ImmGetCandidateListCountW$MH,"ImmGetCandidateListCountW");
    }
    public static int ImmGetCandidateListCountW ( Addressable x0,  Addressable lpdwListCount) {
        var mh$ = ImmGetCandidateListCountW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListA$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.ImmGetCandidateListA$MH,"ImmGetCandidateListA");
    }
    public static int ImmGetCandidateListA ( Addressable x0,  int deIndex,  Addressable lpCandList,  int dwBufLen) {
        var mh$ = ImmGetCandidateListA$MH();
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListW$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.ImmGetCandidateListW$MH,"ImmGetCandidateListW");
    }
    public static int ImmGetCandidateListW ( Addressable x0,  int deIndex,  Addressable lpCandList,  int dwBufLen) {
        var mh$ = ImmGetCandidateListW$MH();
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineA$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.ImmGetGuideLineA$MH,"ImmGetGuideLineA");
    }
    public static int ImmGetGuideLineA ( Addressable x0,  int dwIndex,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetGuideLineA$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineW$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.ImmGetGuideLineW$MH,"ImmGetGuideLineW");
    }
    public static int ImmGetGuideLineW ( Addressable x0,  int dwIndex,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetGuideLineW$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.ImmGetConversionStatus$MH,"ImmGetConversionStatus");
    }
    public static int ImmGetConversionStatus ( Addressable x0,  Addressable lpfdwConversion,  Addressable lpfdwSentence) {
        var mh$ = ImmGetConversionStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, lpfdwConversion, lpfdwSentence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.ImmSetConversionStatus$MH,"ImmSetConversionStatus");
    }
    public static int ImmSetConversionStatus ( Addressable x0,  int x1,  int x2) {
        var mh$ = ImmSetConversionStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.ImmGetOpenStatus$MH,"ImmGetOpenStatus");
    }
    public static int ImmGetOpenStatus ( Addressable x0) {
        var mh$ = ImmGetOpenStatus$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.ImmSetOpenStatus$MH,"ImmSetOpenStatus");
    }
    public static int ImmSetOpenStatus ( Addressable x0,  int x1) {
        var mh$ = ImmSetOpenStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.ImmGetCompositionFontA$MH,"ImmGetCompositionFontA");
    }
    public static int ImmGetCompositionFontA ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmGetCompositionFontA$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.ImmGetCompositionFontW$MH,"ImmGetCompositionFontW");
    }
    public static int ImmGetCompositionFontW ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmGetCompositionFontW$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.ImmSetCompositionFontA$MH,"ImmSetCompositionFontA");
    }
    public static int ImmSetCompositionFontA ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmSetCompositionFontA$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.ImmSetCompositionFontW$MH,"ImmSetCompositionFontW");
    }
    public static int ImmSetCompositionFontW ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmSetCompositionFontW$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.ImmConfigureIMEA$MH,"ImmConfigureIMEA");
    }
    public static int ImmConfigureIMEA ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmConfigureIMEA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.ImmConfigureIMEW$MH,"ImmConfigureIMEW");
    }
    public static int ImmConfigureIMEW ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmConfigureIMEW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeA$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.ImmEscapeA$MH,"ImmEscapeA");
    }
    public static long ImmEscapeA ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmEscapeA$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeW$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.ImmEscapeW$MH,"ImmEscapeW");
    }
    public static long ImmEscapeW ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmEscapeW$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListA$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.ImmGetConversionListA$MH,"ImmGetConversionListA");
    }
    public static int ImmGetConversionListA ( Addressable x0,  Addressable x1,  Addressable lpSrc,  Addressable lpDst,  int dwBufLen,  int uFlag) {
        var mh$ = ImmGetConversionListA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListW$MH() {
        return RuntimeHelper.requireNonNull(constants$1279.ImmGetConversionListW$MH,"ImmGetConversionListW");
    }
    public static int ImmGetConversionListW ( Addressable x0,  Addressable x1,  Addressable lpSrc,  Addressable lpDst,  int dwBufLen,  int uFlag) {
        var mh$ = ImmGetConversionListW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmNotifyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1279.ImmNotifyIME$MH,"ImmNotifyIME");
    }
    public static int ImmNotifyIME ( Addressable x0,  int dwAction,  int dwIndex,  int dwValue) {
        var mh$ = ImmNotifyIME$MH();
        try {
            return (int)mh$.invokeExact(x0, dwAction, dwIndex, dwValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1279.ImmGetStatusWindowPos$MH,"ImmGetStatusWindowPos");
    }
    public static int ImmGetStatusWindowPos ( Addressable x0,  Addressable lpptPos) {
        var mh$ = ImmGetStatusWindowPos$MH();
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1279.ImmSetStatusWindowPos$MH,"ImmSetStatusWindowPos");
    }
    public static int ImmSetStatusWindowPos ( Addressable x0,  Addressable lpptPos) {
        var mh$ = ImmSetStatusWindowPos$MH();
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1279.ImmGetCompositionWindow$MH,"ImmGetCompositionWindow");
    }
    public static int ImmGetCompositionWindow ( Addressable x0,  Addressable lpCompForm) {
        var mh$ = ImmGetCompositionWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1279.ImmSetCompositionWindow$MH,"ImmSetCompositionWindow");
    }
    public static int ImmSetCompositionWindow ( Addressable x0,  Addressable lpCompForm) {
        var mh$ = ImmSetCompositionWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1280.ImmGetCandidateWindow$MH,"ImmGetCandidateWindow");
    }
    public static int ImmGetCandidateWindow ( Addressable x0,  int x1,  Addressable lpCandidate) {
        var mh$ = ImmGetCandidateWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1280.ImmSetCandidateWindow$MH,"ImmSetCandidateWindow");
    }
    public static int ImmSetCandidateWindow ( Addressable x0,  Addressable lpCandidate) {
        var mh$ = ImmSetCandidateWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1280.ImmIsUIMessageA$MH,"ImmIsUIMessageA");
    }
    public static int ImmIsUIMessageA ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = ImmIsUIMessageA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1280.ImmIsUIMessageW$MH,"ImmIsUIMessageW");
    }
    public static int ImmIsUIMessageW ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = ImmIsUIMessageW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetVirtualKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1280.ImmGetVirtualKey$MH,"ImmGetVirtualKey");
    }
    public static int ImmGetVirtualKey ( Addressable x0) {
        var mh$ = ImmGetVirtualKey$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1281.ImmRegisterWordA$MH,"ImmRegisterWordA");
    }
    public static int ImmRegisterWordA ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszRegister) {
        var mh$ = ImmRegisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1281.ImmRegisterWordW$MH,"ImmRegisterWordW");
    }
    public static int ImmRegisterWordW ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszRegister) {
        var mh$ = ImmRegisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1281.ImmUnregisterWordA$MH,"ImmUnregisterWordA");
    }
    public static int ImmUnregisterWordA ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszUnregister) {
        var mh$ = ImmUnregisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmUnregisterWordW$MH,"ImmUnregisterWordW");
    }
    public static int ImmUnregisterWordW ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszUnregister) {
        var mh$ = ImmUnregisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleA$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmGetRegisterWordStyleA$MH,"ImmGetRegisterWordStyleA");
    }
    public static int ImmGetRegisterWordStyleA ( Addressable x0,  int nItem,  Addressable lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleA$MH();
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleW$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmGetRegisterWordStyleW$MH,"ImmGetRegisterWordStyleW");
    }
    public static int ImmGetRegisterWordStyleW ( Addressable x0,  int nItem,  Addressable lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleW$MH();
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmEnumRegisterWordA$MH,"ImmEnumRegisterWordA");
    }
    public static int ImmEnumRegisterWordA ( Addressable x0,  Addressable x1,  Addressable lpszReading,  int x3,  Addressable lpszRegister,  Addressable x5) {
        var mh$ = ImmEnumRegisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmEnumRegisterWordW$MH,"ImmEnumRegisterWordW");
    }
    public static int ImmEnumRegisterWordW ( Addressable x0,  Addressable x1,  Addressable lpszReading,  int x3,  Addressable lpszRegister,  Addressable x5) {
        var mh$ = ImmEnumRegisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmDisableIME$MH,"ImmDisableIME");
    }
    public static int ImmDisableIME ( int x0) {
        var mh$ = ImmDisableIME$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumInputContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.ImmEnumInputContext$MH,"ImmEnumInputContext");
    }
    public static int ImmEnumInputContext ( int idThread,  Addressable lpfn,  long lParam) {
        var mh$ = ImmEnumInputContext$MH();
        try {
            return (int)mh$.invokeExact(idThread, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.ImmGetImeMenuItemsA$MH,"ImmGetImeMenuItemsA");
    }
    public static int ImmGetImeMenuItemsA ( Addressable x0,  int x1,  int x2,  Addressable lpImeParentMenu,  Addressable lpImeMenu,  int dwSize) {
        var mh$ = ImmGetImeMenuItemsA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.ImmGetImeMenuItemsW$MH,"ImmGetImeMenuItemsW");
    }
    public static int ImmGetImeMenuItemsW ( Addressable x0,  int x1,  int x2,  Addressable lpImeParentMenu,  Addressable lpImeMenu,  int dwSize) {
        var mh$ = ImmGetImeMenuItemsW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableTextFrameService$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.ImmDisableTextFrameService$MH,"ImmDisableTextFrameService");
    }
    public static int ImmDisableTextFrameService ( int idThread) {
        var mh$ = ImmDisableTextFrameService$MH();
        try {
            return (int)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableLegacyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.ImmDisableLegacyIME$MH,"ImmDisableLegacyIME");
    }
    public static int ImmDisableLegacyIME () {
        var mh$ = ImmDisableLegacyIME$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PIN_ADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIN_ADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKET_ADDRESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKET_ADDRESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKET_ADDRESS_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKET_ADDRESS_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSADDR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCSADDR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_STORAGE_LH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKADDR_STORAGE_LH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_STORAGE_XP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKADDR_STORAGE_XP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_STORAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKADDR_STORAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKET_PROCESSOR_AFFINITY = Constants$root.C_POINTER$LAYOUT;
    public static int IPPROTO_HOPOPTS() {
        return (int)0L;
    }
    public static int IPPROTO_ICMP() {
        return (int)1L;
    }
    public static int IPPROTO_IGMP() {
        return (int)2L;
    }
    public static int IPPROTO_GGP() {
        return (int)3L;
    }
    public static int IPPROTO_IPV4() {
        return (int)4L;
    }
    public static int IPPROTO_ST() {
        return (int)5L;
    }
    public static int IPPROTO_TCP() {
        return (int)6L;
    }
    public static int IPPROTO_CBT() {
        return (int)7L;
    }
    public static int IPPROTO_EGP() {
        return (int)8L;
    }
    public static int IPPROTO_IGP() {
        return (int)9L;
    }
    public static int IPPROTO_PUP() {
        return (int)12L;
    }
    public static int IPPROTO_UDP() {
        return (int)17L;
    }
    public static int IPPROTO_IDP() {
        return (int)22L;
    }
    public static int IPPROTO_RDP() {
        return (int)27L;
    }
    public static int IPPROTO_IPV6() {
        return (int)41L;
    }
    public static int IPPROTO_ROUTING() {
        return (int)43L;
    }
    public static int IPPROTO_FRAGMENT() {
        return (int)44L;
    }
    public static int IPPROTO_ESP() {
        return (int)50L;
    }
    public static int IPPROTO_AH() {
        return (int)51L;
    }
    public static int IPPROTO_ICMPV6() {
        return (int)58L;
    }
    public static int IPPROTO_NONE() {
        return (int)59L;
    }
    public static int IPPROTO_DSTOPTS() {
        return (int)60L;
    }
    public static int IPPROTO_ND() {
        return (int)77L;
    }
    public static int IPPROTO_ICLFXBM() {
        return (int)78L;
    }
    public static int IPPROTO_PIM() {
        return (int)103L;
    }
    public static int IPPROTO_PGM() {
        return (int)113L;
    }
    public static int IPPROTO_L2TP() {
        return (int)115L;
    }
    public static int IPPROTO_SCTP() {
        return (int)132L;
    }
    public static int IPPROTO_RAW() {
        return (int)255L;
    }
    public static int IPPROTO_MAX() {
        return (int)256L;
    }
    public static int IPPROTO_RESERVED_RAW() {
        return (int)257L;
    }
    public static int IPPROTO_RESERVED_IPSEC() {
        return (int)258L;
    }
    public static int IPPROTO_RESERVED_IPSECOFFLOAD() {
        return (int)259L;
    }
    public static int IPPROTO_RESERVED_WNV() {
        return (int)260L;
    }
    public static int IPPROTO_RESERVED_MAX() {
        return (int)261L;
    }
    public static OfAddress PIPROTO = Constants$root.C_POINTER$LAYOUT;
    public static int ScopeLevelInterface() {
        return (int)1L;
    }
    public static int ScopeLevelLink() {
        return (int)2L;
    }
    public static int ScopeLevelSubnet() {
        return (int)3L;
    }
    public static int ScopeLevelAdmin() {
        return (int)4L;
    }
    public static int ScopeLevelSite() {
        return (int)5L;
    }
    public static int ScopeLevelOrganization() {
        return (int)8L;
    }
    public static int ScopeLevelGlobal() {
        return (int)14L;
    }
    public static int ScopeLevelCount() {
        return (int)16L;
    }
    public static OfAddress PSCOPE_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_IN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_DL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSABUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSACMSGHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSACMSGHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSGHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEX2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEX2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEX2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEX2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEX3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEX3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEX4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEX4 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle __WSAFDIsSet$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.__WSAFDIsSet$MH,"__WSAFDIsSet");
    }
    public static int __WSAFDIsSet ( long fd,  Addressable x1) {
        var mh$ = __WSAFDIsSet$MH();
        try {
            return (int)mh$.invokeExact(fd, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPWSADATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAOVERLAPPED = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFLOWSPEC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFLOWSPEC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQOS_OBJECT_HDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQOS_SD_MODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQOS_SHAPING_RATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQOS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANETWORKEVENTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAPROTOCOLCHAIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAPROTOCOL_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAPROTOCOL_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAPROTOCOL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int NSP_NOTIFY_IMMEDIATELY() {
        return (int)0L;
    }
    public static int NSP_NOTIFY_HWND() {
        return (int)1L;
    }
    public static int NSP_NOTIFY_EVENT() {
        return (int)2L;
    }
    public static int NSP_NOTIFY_PORT() {
        return (int)3L;
    }
    public static int NSP_NOTIFY_APC() {
        return (int)4L;
    }
    public static OfAddress PWSACOMPLETIONTYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSACOMPLETIONTYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSACOMPLETION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSACOMPLETION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAFPROTOCOLS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAFPROTOCOLS = Constants$root.C_POINTER$LAYOUT;
    public static int COMP_EQUAL() {
        return (int)0L;
    }
    public static int COMP_NOTLESS() {
        return (int)1L;
    }
    public static OfAddress PWSAECOMPARATOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAECOMPARATOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAVERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAVERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSETA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSETA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSETW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSETW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSET2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSET2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSET2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSET2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSET2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSET2 = Constants$root.C_POINTER$LAYOUT;
    public static int RNRSERVICE_REGISTER() {
        return (int)0L;
    }
    public static int RNRSERVICE_DEREGISTER() {
        return (int)1L;
    }
    public static int RNRSERVICE_DELETE() {
        return (int)2L;
    }
    public static OfAddress PWSAESETSERVICEOP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAESETSERVICEOP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANSCLASSINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANSCLASSINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANSCLASSINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANSCLASSINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANSCLASSINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANSCLASSINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSASERVICECLASSINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSASERVICECLASSINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSASERVICECLASSINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSASERVICECLASSINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSASERVICECLASSINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSASERVICECLASSINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAPOLLFD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAPOLLFD = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle accept$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.accept$MH,"accept");
    }
    public static long accept ( long s,  Addressable addr,  Addressable addrlen) {
        var mh$ = accept$MH();
        try {
            return (long)mh$.invokeExact(s, addr, addrlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bind$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.bind$MH,"bind");
    }
    public static int bind ( long s,  Addressable name,  int namelen) {
        var mh$ = bind$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closesocket$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.closesocket$MH,"closesocket");
    }
    public static int closesocket ( long s) {
        var mh$ = closesocket$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle connect$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.connect$MH,"connect");
    }
    public static int connect ( long s,  Addressable name,  int namelen) {
        var mh$ = connect$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ioctlsocket$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.ioctlsocket$MH,"ioctlsocket");
    }
    public static int ioctlsocket ( long s,  int cmd,  Addressable argp) {
        var mh$ = ioctlsocket$MH();
        try {
            return (int)mh$.invokeExact(s, cmd, argp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpeername$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.getpeername$MH,"getpeername");
    }
    public static int getpeername ( long s,  Addressable name,  Addressable namelen) {
        var mh$ = getpeername$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockname$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.getsockname$MH,"getsockname");
    }
    public static int getsockname ( long s,  Addressable name,  Addressable namelen) {
        var mh$ = getsockname$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.getsockopt$MH,"getsockopt");
    }
    public static int getsockopt ( long s,  int level,  int optname,  Addressable optval,  Addressable optlen) {
        var mh$ = getsockopt$MH();
        try {
            return (int)mh$.invokeExact(s, level, optname, optval, optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htonl$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.htonl$MH,"htonl");
    }
    public static int htonl ( int hostlong) {
        var mh$ = htonl$MH();
        try {
            return (int)mh$.invokeExact(hostlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htons$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.htons$MH,"htons");
    }
    public static short htons ( short hostshort) {
        var mh$ = htons$MH();
        try {
            return (short)mh$.invokeExact(hostshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_addr$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.inet_addr$MH,"inet_addr");
    }
    public static int inet_addr ( Addressable cp) {
        var mh$ = inet_addr$MH();
        try {
            return (int)mh$.invokeExact(cp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_ntoa$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.inet_ntoa$MH,"inet_ntoa");
    }
    public static MemoryAddress inet_ntoa ( MemorySegment in) {
        var mh$ = inet_ntoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htonll$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.htonll$MH,"htonll");
    }
    public static long htonll ( long Value) {
        var mh$ = htonll$MH();
        try {
            return (long)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohll$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.ntohll$MH,"ntohll");
    }
    public static long ntohll ( long Value) {
        var mh$ = ntohll$MH();
        try {
            return (long)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htonf$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.htonf$MH,"htonf");
    }
    public static int htonf ( float Value) {
        var mh$ = htonf$MH();
        try {
            return (int)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohf$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.ntohf$MH,"ntohf");
    }
    public static float ntohf ( int Value) {
        var mh$ = ntohf$MH();
        try {
            return (float)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htond$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.htond$MH,"htond");
    }
    public static long htond ( double Value) {
        var mh$ = htond$MH();
        try {
            return (long)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohd$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.ntohd$MH,"ntohd");
    }
    public static double ntohd ( long Value) {
        var mh$ = ntohd$MH();
        try {
            return (double)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle listen$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.listen$MH,"listen");
    }
    public static int listen ( long s,  int backlog) {
        var mh$ = listen$MH();
        try {
            return (int)mh$.invokeExact(s, backlog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohl$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.ntohl$MH,"ntohl");
    }
    public static int ntohl ( int netlong) {
        var mh$ = ntohl$MH();
        try {
            return (int)mh$.invokeExact(netlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohs$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.ntohs$MH,"ntohs");
    }
    public static short ntohs ( short netshort) {
        var mh$ = ntohs$MH();
        try {
            return (short)mh$.invokeExact(netshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recv$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.recv$MH,"recv");
    }
    public static int recv ( long s,  Addressable buf,  int len,  int flags) {
        var mh$ = recv$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvfrom$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.recvfrom$MH,"recvfrom");
    }
    public static int recvfrom ( long s,  Addressable buf,  int len,  int flags,  Addressable from,  Addressable fromlen) {
        var mh$ = recvfrom$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags, from, fromlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.select$MH,"select");
    }
    public static int select ( int nfds,  Addressable readfds,  Addressable writefds,  Addressable exceptfds,  Addressable timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(nfds, readfds, writefds, exceptfds, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle send$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.send$MH,"send");
    }
    public static int send ( long s,  Addressable buf,  int len,  int flags) {
        var mh$ = send$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendto$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.sendto$MH,"sendto");
    }
    public static int sendto ( long s,  Addressable buf,  int len,  int flags,  Addressable to,  int tolen) {
        var mh$ = sendto$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags, to, tolen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1289.setsockopt$MH,"setsockopt");
    }
    public static int setsockopt ( long s,  int level,  int optname,  Addressable optval,  int optlen) {
        var mh$ = setsockopt$MH();
        try {
            return (int)mh$.invokeExact(s, level, optname, optval, optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$1289.shutdown$MH,"shutdown");
    }
    public static int shutdown ( long s,  int how) {
        var mh$ = shutdown$MH();
        try {
            return (int)mh$.invokeExact(s, how);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle socket$MH() {
        return RuntimeHelper.requireNonNull(constants$1289.socket$MH,"socket");
    }
    public static long socket ( int af,  int type,  int protocol) {
        var mh$ = socket$MH();
        try {
            return (long)mh$.invokeExact(af, type, protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostbyaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$1289.gethostbyaddr$MH,"gethostbyaddr");
    }
    public static MemoryAddress gethostbyaddr ( Addressable addr,  int len,  int type) {
        var mh$ = gethostbyaddr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(addr, len, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1289.gethostbyname$MH,"gethostbyname");
    }
    public static MemoryAddress gethostbyname ( Addressable name) {
        var mh$ = gethostbyname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$1289.gethostname$MH,"gethostname");
    }
    public static int gethostname ( Addressable name,  int namelen) {
        var mh$ = gethostname$MH();
        try {
            return (int)mh$.invokeExact(name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetHostNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.GetHostNameW$MH,"GetHostNameW");
    }
    public static int GetHostNameW ( Addressable name,  int namelen) {
        var mh$ = GetHostNameW$MH();
        try {
            return (int)mh$.invokeExact(name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getservbyport$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.getservbyport$MH,"getservbyport");
    }
    public static MemoryAddress getservbyport ( int port,  Addressable proto) {
        var mh$ = getservbyport$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(port, proto);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getservbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.getservbyname$MH,"getservbyname");
    }
    public static MemoryAddress getservbyname ( Addressable name,  Addressable proto) {
        var mh$ = getservbyname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name, proto);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getprotobynumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.getprotobynumber$MH,"getprotobynumber");
    }
    public static MemoryAddress getprotobynumber ( int number) {
        var mh$ = getprotobynumber$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getprotobyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.getprotobyname$MH,"getprotobyname");
    }
    public static MemoryAddress getprotobyname ( Addressable name) {
        var mh$ = getprotobyname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAStartup$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.WSAStartup$MH,"WSAStartup");
    }
    public static int WSAStartup ( short wVersionRequested,  Addressable lpWSAData) {
        var mh$ = WSAStartup$MH();
        try {
            return (int)mh$.invokeExact(wVersionRequested, lpWSAData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.WSACleanup$MH,"WSACleanup");
    }
    public static int WSACleanup () {
        var mh$ = WSACleanup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.WSASetLastError$MH,"WSASetLastError");
    }
    public static void WSASetLastError ( int iError) {
        var mh$ = WSASetLastError$MH();
        try {
            mh$.invokeExact(iError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.WSAGetLastError$MH,"WSAGetLastError");
    }
    public static int WSAGetLastError () {
        var mh$ = WSAGetLastError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAIsBlocking$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.WSAIsBlocking$MH,"WSAIsBlocking");
    }
    public static int WSAIsBlocking () {
        var mh$ = WSAIsBlocking$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAUnhookBlockingHook$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.WSAUnhookBlockingHook$MH,"WSAUnhookBlockingHook");
    }
    public static int WSAUnhookBlockingHook () {
        var mh$ = WSAUnhookBlockingHook$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetBlockingHook$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.WSASetBlockingHook$MH,"WSASetBlockingHook");
    }
    public static MemoryAddress WSASetBlockingHook ( Addressable lpBlockFunc) {
        var mh$ = WSASetBlockingHook$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpBlockFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACancelBlockingCall$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.WSACancelBlockingCall$MH,"WSACancelBlockingCall");
    }
    public static int WSACancelBlockingCall () {
        var mh$ = WSACancelBlockingCall$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetServByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.WSAAsyncGetServByName$MH,"WSAAsyncGetServByName");
    }
    public static MemoryAddress WSAAsyncGetServByName ( Addressable hWnd,  int wMsg,  Addressable name,  Addressable proto,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetServByName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, name, proto, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetServByPort$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.WSAAsyncGetServByPort$MH,"WSAAsyncGetServByPort");
    }
    public static MemoryAddress WSAAsyncGetServByPort ( Addressable hWnd,  int wMsg,  int port,  Addressable proto,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetServByPort$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, port, proto, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetProtoByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.WSAAsyncGetProtoByName$MH,"WSAAsyncGetProtoByName");
    }
    public static MemoryAddress WSAAsyncGetProtoByName ( Addressable hWnd,  int wMsg,  Addressable name,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetProtoByName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, name, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetProtoByNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.WSAAsyncGetProtoByNumber$MH,"WSAAsyncGetProtoByNumber");
    }
    public static MemoryAddress WSAAsyncGetProtoByNumber ( Addressable hWnd,  int wMsg,  int number,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetProtoByNumber$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, number, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetHostByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.WSAAsyncGetHostByName$MH,"WSAAsyncGetHostByName");
    }
    public static MemoryAddress WSAAsyncGetHostByName ( Addressable hWnd,  int wMsg,  Addressable name,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetHostByName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, name, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetHostByAddr$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.WSAAsyncGetHostByAddr$MH,"WSAAsyncGetHostByAddr");
    }
    public static MemoryAddress WSAAsyncGetHostByAddr ( Addressable hWnd,  int wMsg,  Addressable addr,  int len,  int type,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetHostByAddr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, addr, len, type, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACancelAsyncRequest$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.WSACancelAsyncRequest$MH,"WSACancelAsyncRequest");
    }
    public static int WSACancelAsyncRequest ( Addressable hAsyncTaskHandle) {
        var mh$ = WSACancelAsyncRequest$MH();
        try {
            return (int)mh$.invokeExact(hAsyncTaskHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncSelect$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.WSAAsyncSelect$MH,"WSAAsyncSelect");
    }
    public static int WSAAsyncSelect ( long s,  Addressable hWnd,  int wMsg,  int lEvent) {
        var mh$ = WSAAsyncSelect$MH();
        try {
            return (int)mh$.invokeExact(s, hWnd, wMsg, lEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAccept$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.WSAAccept$MH,"WSAAccept");
    }
    public static long WSAAccept ( long s,  Addressable addr,  Addressable addrlen,  Addressable lpfnCondition,  long dwCallbackData) {
        var mh$ = WSAAccept$MH();
        try {
            return (long)mh$.invokeExact(s, addr, addrlen, lpfnCondition, dwCallbackData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACloseEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.WSACloseEvent$MH,"WSACloseEvent");
    }
    public static int WSACloseEvent ( Addressable hEvent) {
        var mh$ = WSACloseEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.WSAConnect$MH,"WSAConnect");
    }
    public static int WSAConnect ( long s,  Addressable name,  int namelen,  Addressable lpCallerData,  Addressable lpCalleeData,  Addressable lpSQOS,  Addressable lpGQOS) {
        var mh$ = WSAConnect$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnectByNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.WSAConnectByNameW$MH,"WSAConnectByNameW");
    }
    public static int WSAConnectByNameW ( long s,  Addressable nodename,  Addressable servicename,  Addressable LocalAddressLength,  Addressable LocalAddress,  Addressable RemoteAddressLength,  Addressable RemoteAddress,  Addressable timeout,  Addressable Reserved) {
        var mh$ = WSAConnectByNameW$MH();
        try {
            return (int)mh$.invokeExact(s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnectByNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.WSAConnectByNameA$MH,"WSAConnectByNameA");
    }
    public static int WSAConnectByNameA ( long s,  Addressable nodename,  Addressable servicename,  Addressable LocalAddressLength,  Addressable LocalAddress,  Addressable RemoteAddressLength,  Addressable RemoteAddress,  Addressable timeout,  Addressable Reserved) {
        var mh$ = WSAConnectByNameA$MH();
        try {
            return (int)mh$.invokeExact(s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnectByList$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.WSAConnectByList$MH,"WSAConnectByList");
    }
    public static int WSAConnectByList ( long s,  Addressable SocketAddress,  Addressable LocalAddressLength,  Addressable LocalAddress,  Addressable RemoteAddressLength,  Addressable RemoteAddress,  Addressable timeout,  Addressable Reserved) {
        var mh$ = WSAConnectByList$MH();
        try {
            return (int)mh$.invokeExact(s, SocketAddress, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACreateEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.WSACreateEvent$MH,"WSACreateEvent");
    }
    public static MemoryAddress WSACreateEvent () {
        var mh$ = WSACreateEvent$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSADuplicateSocketA$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.WSADuplicateSocketA$MH,"WSADuplicateSocketA");
    }
    public static int WSADuplicateSocketA ( long s,  int dwProcessId,  Addressable lpProtocolInfo) {
        var mh$ = WSADuplicateSocketA$MH();
        try {
            return (int)mh$.invokeExact(s, dwProcessId, lpProtocolInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSADuplicateSocketW$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.WSADuplicateSocketW$MH,"WSADuplicateSocketW");
    }
    public static int WSADuplicateSocketW ( long s,  int dwProcessId,  Addressable lpProtocolInfo) {
        var mh$ = WSADuplicateSocketW$MH();
        try {
            return (int)mh$.invokeExact(s, dwProcessId, lpProtocolInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNetworkEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.WSAEnumNetworkEvents$MH,"WSAEnumNetworkEvents");
    }
    public static int WSAEnumNetworkEvents ( long s,  Addressable hEventObject,  Addressable lpNetworkEvents) {
        var mh$ = WSAEnumNetworkEvents$MH();
        try {
            return (int)mh$.invokeExact(s, hEventObject, lpNetworkEvents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumProtocolsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.WSAEnumProtocolsA$MH,"WSAEnumProtocolsA");
    }
    public static int WSAEnumProtocolsA ( Addressable lpiProtocols,  Addressable lpProtocolBuffer,  Addressable lpdwBufferLength) {
        var mh$ = WSAEnumProtocolsA$MH();
        try {
            return (int)mh$.invokeExact(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumProtocolsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.WSAEnumProtocolsW$MH,"WSAEnumProtocolsW");
    }
    public static int WSAEnumProtocolsW ( Addressable lpiProtocols,  Addressable lpProtocolBuffer,  Addressable lpdwBufferLength) {
        var mh$ = WSAEnumProtocolsW$MH();
        try {
            return (int)mh$.invokeExact(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEventSelect$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.WSAEventSelect$MH,"WSAEventSelect");
    }
    public static int WSAEventSelect ( long s,  Addressable hEventObject,  int lNetworkEvents) {
        var mh$ = WSAEventSelect$MH();
        try {
            return (int)mh$.invokeExact(s, hEventObject, lNetworkEvents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetOverlappedResult$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.WSAGetOverlappedResult$MH,"WSAGetOverlappedResult");
    }
    public static int WSAGetOverlappedResult ( long s,  Addressable lpOverlapped,  Addressable lpcbTransfer,  int fWait,  Addressable lpdwFlags) {
        var mh$ = WSAGetOverlappedResult$MH();
        try {
            return (int)mh$.invokeExact(s, lpOverlapped, lpcbTransfer, fWait, lpdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetQOSByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.WSAGetQOSByName$MH,"WSAGetQOSByName");
    }
    public static int WSAGetQOSByName ( long s,  Addressable lpQOSName,  Addressable lpQOS) {
        var mh$ = WSAGetQOSByName$MH();
        try {
            return (int)mh$.invokeExact(s, lpQOSName, lpQOS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAHtonl$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.WSAHtonl$MH,"WSAHtonl");
    }
    public static int WSAHtonl ( long s,  int hostlong,  Addressable lpnetlong) {
        var mh$ = WSAHtonl$MH();
        try {
            return (int)mh$.invokeExact(s, hostlong, lpnetlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAHtons$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.WSAHtons$MH,"WSAHtons");
    }
    public static int WSAHtons ( long s,  short hostshort,  Addressable lpnetshort) {
        var mh$ = WSAHtons$MH();
        try {
            return (int)mh$.invokeExact(s, hostshort, lpnetshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAIoctl$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.WSAIoctl$MH,"WSAIoctl");
    }
    public static int WSAIoctl ( long s,  int dwIoControlCode,  Addressable lpvInBuffer,  int cbInBuffer,  Addressable lpvOutBuffer,  int cbOutBuffer,  Addressable lpcbBytesReturned,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSAIoctl$MH();
        try {
            return (int)mh$.invokeExact(s, dwIoControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAJoinLeaf$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.WSAJoinLeaf$MH,"WSAJoinLeaf");
    }
    public static long WSAJoinLeaf ( long s,  Addressable name,  int namelen,  Addressable lpCallerData,  Addressable lpCalleeData,  Addressable lpSQOS,  Addressable lpGQOS,  int dwFlags) {
        var mh$ = WSAJoinLeaf$MH();
        try {
            return (long)mh$.invokeExact(s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSANtohl$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.WSANtohl$MH,"WSANtohl");
    }
    public static int WSANtohl ( long s,  int netlong,  Addressable lphostlong) {
        var mh$ = WSANtohl$MH();
        try {
            return (int)mh$.invokeExact(s, netlong, lphostlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSANtohs$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.WSANtohs$MH,"WSANtohs");
    }
    public static int WSANtohs ( long s,  short netshort,  Addressable lphostshort) {
        var mh$ = WSANtohs$MH();
        try {
            return (int)mh$.invokeExact(s, netshort, lphostshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARecv$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.WSARecv$MH,"WSARecv");
    }
    public static int WSARecv ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesRecvd,  Addressable lpFlags,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSARecv$MH();
        try {
            return (int)mh$.invokeExact(s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARecvDisconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.WSARecvDisconnect$MH,"WSARecvDisconnect");
    }
    public static int WSARecvDisconnect ( long s,  Addressable lpInboundDisconnectData) {
        var mh$ = WSARecvDisconnect$MH();
        try {
            return (int)mh$.invokeExact(s, lpInboundDisconnectData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARecvFrom$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.WSARecvFrom$MH,"WSARecvFrom");
    }
    public static int WSARecvFrom ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesRecvd,  Addressable lpFlags,  Addressable lpFrom,  Addressable lpFromlen,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSARecvFrom$MH();
        try {
            return (int)mh$.invokeExact(s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpFrom, lpFromlen, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAResetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.WSAResetEvent$MH,"WSAResetEvent");
    }
    public static int WSAResetEvent ( Addressable hEvent) {
        var mh$ = WSAResetEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASend$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.WSASend$MH,"WSASend");
    }
    public static int WSASend ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesSent,  int dwFlags,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSASend$MH();
        try {
            return (int)mh$.invokeExact(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASendMsg$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.WSASendMsg$MH,"WSASendMsg");
    }
    public static int WSASendMsg ( long Handle,  Addressable lpMsg,  int dwFlags,  Addressable lpNumberOfBytesSent,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSASendMsg$MH();
        try {
            return (int)mh$.invokeExact(Handle, lpMsg, dwFlags, lpNumberOfBytesSent, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASendDisconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.WSASendDisconnect$MH,"WSASendDisconnect");
    }
    public static int WSASendDisconnect ( long s,  Addressable lpOutboundDisconnectData) {
        var mh$ = WSASendDisconnect$MH();
        try {
            return (int)mh$.invokeExact(s, lpOutboundDisconnectData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASendTo$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.WSASendTo$MH,"WSASendTo");
    }
    public static int WSASendTo ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesSent,  int dwFlags,  Addressable lpTo,  int iTolen,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSASendTo$MH();
        try {
            return (int)mh$.invokeExact(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpTo, iTolen, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.WSASetEvent$MH,"WSASetEvent");
    }
    public static int WSASetEvent ( Addressable hEvent) {
        var mh$ = WSASetEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASocketA$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.WSASocketA$MH,"WSASocketA");
    }
    public static long WSASocketA ( int af,  int type,  int protocol,  Addressable lpProtocolInfo,  int g,  int dwFlags) {
        var mh$ = WSASocketA$MH();
        try {
            return (long)mh$.invokeExact(af, type, protocol, lpProtocolInfo, g, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASocketW$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.WSASocketW$MH,"WSASocketW");
    }
    public static long WSASocketW ( int af,  int type,  int protocol,  Addressable lpProtocolInfo,  int g,  int dwFlags) {
        var mh$ = WSASocketW$MH();
        try {
            return (long)mh$.invokeExact(af, type, protocol, lpProtocolInfo, g, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAWaitForMultipleEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.WSAWaitForMultipleEvents$MH,"WSAWaitForMultipleEvents");
    }
    public static int WSAWaitForMultipleEvents ( int cEvents,  Addressable lphEvents,  int fWaitAll,  int dwTimeout,  int fAlertable) {
        var mh$ = WSAWaitForMultipleEvents$MH();
        try {
            return (int)mh$.invokeExact(cEvents, lphEvents, fWaitAll, dwTimeout, fAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAddressToStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.WSAAddressToStringA$MH,"WSAAddressToStringA");
    }
    public static int WSAAddressToStringA ( Addressable lpsaAddress,  int dwAddressLength,  Addressable lpProtocolInfo,  Addressable lpszAddressString,  Addressable lpdwAddressStringLength) {
        var mh$ = WSAAddressToStringA$MH();
        try {
            return (int)mh$.invokeExact(lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAddressToStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.WSAAddressToStringW$MH,"WSAAddressToStringW");
    }
    public static int WSAAddressToStringW ( Addressable lpsaAddress,  int dwAddressLength,  Addressable lpProtocolInfo,  Addressable lpszAddressString,  Addressable lpdwAddressStringLength) {
        var mh$ = WSAAddressToStringW$MH();
        try {
            return (int)mh$.invokeExact(lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAStringToAddressA$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.WSAStringToAddressA$MH,"WSAStringToAddressA");
    }
    public static int WSAStringToAddressA ( Addressable AddressString,  int AddressFamily,  Addressable lpProtocolInfo,  Addressable lpAddress,  Addressable lpAddressLength) {
        var mh$ = WSAStringToAddressA$MH();
        try {
            return (int)mh$.invokeExact(AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAStringToAddressW$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.WSAStringToAddressW$MH,"WSAStringToAddressW");
    }
    public static int WSAStringToAddressW ( Addressable AddressString,  int AddressFamily,  Addressable lpProtocolInfo,  Addressable lpAddress,  Addressable lpAddressLength) {
        var mh$ = WSAStringToAddressW$MH();
        try {
            return (int)mh$.invokeExact(AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceBeginA$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.WSALookupServiceBeginA$MH,"WSALookupServiceBeginA");
    }
    public static int WSALookupServiceBeginA ( Addressable lpqsRestrictions,  int dwControlFlags,  Addressable lphLookup) {
        var mh$ = WSALookupServiceBeginA$MH();
        try {
            return (int)mh$.invokeExact(lpqsRestrictions, dwControlFlags, lphLookup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceBeginW$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.WSALookupServiceBeginW$MH,"WSALookupServiceBeginW");
    }
    public static int WSALookupServiceBeginW ( Addressable lpqsRestrictions,  int dwControlFlags,  Addressable lphLookup) {
        var mh$ = WSALookupServiceBeginW$MH();
        try {
            return (int)mh$.invokeExact(lpqsRestrictions, dwControlFlags, lphLookup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceNextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.WSALookupServiceNextA$MH,"WSALookupServiceNextA");
    }
    public static int WSALookupServiceNextA ( Addressable hLookup,  int dwControlFlags,  Addressable lpdwBufferLength,  Addressable lpqsResults) {
        var mh$ = WSALookupServiceNextA$MH();
        try {
            return (int)mh$.invokeExact(hLookup, dwControlFlags, lpdwBufferLength, lpqsResults);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceNextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.WSALookupServiceNextW$MH,"WSALookupServiceNextW");
    }
    public static int WSALookupServiceNextW ( Addressable hLookup,  int dwControlFlags,  Addressable lpdwBufferLength,  Addressable lpqsResults) {
        var mh$ = WSALookupServiceNextW$MH();
        try {
            return (int)mh$.invokeExact(hLookup, dwControlFlags, lpdwBufferLength, lpqsResults);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSANSPIoctl$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.WSANSPIoctl$MH,"WSANSPIoctl");
    }
    public static int WSANSPIoctl ( Addressable hLookup,  int dwControlCode,  Addressable lpvInBuffer,  int cbInBuffer,  Addressable lpvOutBuffer,  int cbOutBuffer,  Addressable lpcbBytesReturned,  Addressable lpCompletion) {
        var mh$ = WSANSPIoctl$MH();
        try {
            return (int)mh$.invokeExact(hLookup, dwControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpCompletion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.WSALookupServiceEnd$MH,"WSALookupServiceEnd");
    }
    public static int WSALookupServiceEnd ( Addressable hLookup) {
        var mh$ = WSALookupServiceEnd$MH();
        try {
            return (int)mh$.invokeExact(hLookup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAInstallServiceClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.WSAInstallServiceClassA$MH,"WSAInstallServiceClassA");
    }
    public static int WSAInstallServiceClassA ( Addressable lpServiceClassInfo) {
        var mh$ = WSAInstallServiceClassA$MH();
        try {
            return (int)mh$.invokeExact(lpServiceClassInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAInstallServiceClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.WSAInstallServiceClassW$MH,"WSAInstallServiceClassW");
    }
    public static int WSAInstallServiceClassW ( Addressable lpServiceClassInfo) {
        var mh$ = WSAInstallServiceClassW$MH();
        try {
            return (int)mh$.invokeExact(lpServiceClassInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARemoveServiceClass$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.WSARemoveServiceClass$MH,"WSARemoveServiceClass");
    }
    public static int WSARemoveServiceClass ( Addressable lpServiceClassId) {
        var mh$ = WSARemoveServiceClass$MH();
        try {
            return (int)mh$.invokeExact(lpServiceClassId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.WSAGetServiceClassInfoA$MH,"WSAGetServiceClassInfoA");
    }
    public static int WSAGetServiceClassInfoA ( Addressable lpProviderId,  Addressable lpServiceClassId,  Addressable lpdwBufSize,  Addressable lpServiceClassInfo) {
        var mh$ = WSAGetServiceClassInfoA$MH();
        try {
            return (int)mh$.invokeExact(lpProviderId, lpServiceClassId, lpdwBufSize, lpServiceClassInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.WSAGetServiceClassInfoW$MH,"WSAGetServiceClassInfoW");
    }
    public static int WSAGetServiceClassInfoW ( Addressable lpProviderId,  Addressable lpServiceClassId,  Addressable lpdwBufSize,  Addressable lpServiceClassInfo) {
        var mh$ = WSAGetServiceClassInfoW$MH();
        try {
            return (int)mh$.invokeExact(lpProviderId, lpServiceClassId, lpdwBufSize, lpServiceClassInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersA$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.WSAEnumNameSpaceProvidersA$MH,"WSAEnumNameSpaceProvidersA");
    }
    public static int WSAEnumNameSpaceProvidersA ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = WSAEnumNameSpaceProvidersA$MH();
        try {
            return (int)mh$.invokeExact(lpdwBufferLength, lpnspBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersW$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.WSAEnumNameSpaceProvidersW$MH,"WSAEnumNameSpaceProvidersW");
    }
    public static int WSAEnumNameSpaceProvidersW ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = WSAEnumNameSpaceProvidersW$MH();
        try {
            return (int)mh$.invokeExact(lpdwBufferLength, lpnspBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.WSAEnumNameSpaceProvidersExA$MH,"WSAEnumNameSpaceProvidersExA");
    }
    public static int WSAEnumNameSpaceProvidersExA ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = WSAEnumNameSpaceProvidersExA$MH();
        try {
            return (int)mh$.invokeExact(lpdwBufferLength, lpnspBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.WSAEnumNameSpaceProvidersExW$MH,"WSAEnumNameSpaceProvidersExW");
    }
    public static int WSAEnumNameSpaceProvidersExW ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = WSAEnumNameSpaceProvidersExW$MH();
        try {
            return (int)mh$.invokeExact(lpdwBufferLength, lpnspBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassNameByClassIdA$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.WSAGetServiceClassNameByClassIdA$MH,"WSAGetServiceClassNameByClassIdA");
    }
    public static int WSAGetServiceClassNameByClassIdA ( Addressable lpServiceClassId,  Addressable lpszServiceClassName,  Addressable lpdwBufferLength) {
        var mh$ = WSAGetServiceClassNameByClassIdA$MH();
        try {
            return (int)mh$.invokeExact(lpServiceClassId, lpszServiceClassName, lpdwBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassNameByClassIdW$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.WSAGetServiceClassNameByClassIdW$MH,"WSAGetServiceClassNameByClassIdW");
    }
    public static int WSAGetServiceClassNameByClassIdW ( Addressable lpServiceClassId,  Addressable lpszServiceClassName,  Addressable lpdwBufferLength) {
        var mh$ = WSAGetServiceClassNameByClassIdW$MH();
        try {
            return (int)mh$.invokeExact(lpServiceClassId, lpszServiceClassName, lpdwBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.WSASetServiceA$MH,"WSASetServiceA");
    }
    public static int WSASetServiceA ( Addressable lpqsRegInfo,  int essoperation,  int dwControlFlags) {
        var mh$ = WSASetServiceA$MH();
        try {
            return (int)mh$.invokeExact(lpqsRegInfo, essoperation, dwControlFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.WSASetServiceW$MH,"WSASetServiceW");
    }
    public static int WSASetServiceW ( Addressable lpqsRegInfo,  int essoperation,  int dwControlFlags) {
        var mh$ = WSASetServiceW$MH();
        try {
            return (int)mh$.invokeExact(lpqsRegInfo, essoperation, dwControlFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAProviderConfigChange$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.WSAProviderConfigChange$MH,"WSAProviderConfigChange");
    }
    public static int WSAProviderConfigChange ( Addressable lpNotificationHandle,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSAProviderConfigChange$MH();
        try {
            return (int)mh$.invokeExact(lpNotificationHandle, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAPoll$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.WSAPoll$MH,"WSAPoll");
    }
    public static int WSAPoll ( Addressable fdArray,  int fds,  int timeout) {
        var mh$ = WSAPoll$MH();
        try {
            return (int)mh$.invokeExact(fdArray, fds, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPSOCKADDR_IN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLINGER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLINGER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFD_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFD_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHOSTENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHOSTENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROTOENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROTOENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTIMEVAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTIMEVAL = Constants$root.C_POINTER$LAYOUT;
    public static int ENET_PROTOCOL_MINIMUM_MTU() {
        return (int)576L;
    }
    public static int ENET_PROTOCOL_MAXIMUM_MTU() {
        return (int)4096L;
    }
    public static int ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS() {
        return (int)32L;
    }
    public static int ENET_PROTOCOL_MINIMUM_WINDOW_SIZE() {
        return (int)4096L;
    }
    public static int ENET_PROTOCOL_MAXIMUM_WINDOW_SIZE() {
        return (int)65536L;
    }
    public static int ENET_PROTOCOL_MINIMUM_CHANNEL_COUNT() {
        return (int)1L;
    }
    public static int ENET_PROTOCOL_MAXIMUM_CHANNEL_COUNT() {
        return (int)255L;
    }
    public static int ENET_PROTOCOL_MAXIMUM_PEER_ID() {
        return (int)4095L;
    }
    public static int ENET_PROTOCOL_MAXIMUM_FRAGMENT_COUNT() {
        return (int)1048576L;
    }
    public static int ENET_PROTOCOL_COMMAND_NONE() {
        return (int)0L;
    }
    public static int ENET_PROTOCOL_COMMAND_ACKNOWLEDGE() {
        return (int)1L;
    }
    public static int ENET_PROTOCOL_COMMAND_CONNECT() {
        return (int)2L;
    }
    public static int ENET_PROTOCOL_COMMAND_VERIFY_CONNECT() {
        return (int)3L;
    }
    public static int ENET_PROTOCOL_COMMAND_DISCONNECT() {
        return (int)4L;
    }
    public static int ENET_PROTOCOL_COMMAND_PING() {
        return (int)5L;
    }
    public static int ENET_PROTOCOL_COMMAND_SEND_RELIABLE() {
        return (int)6L;
    }
    public static int ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE() {
        return (int)7L;
    }
    public static int ENET_PROTOCOL_COMMAND_SEND_FRAGMENT() {
        return (int)8L;
    }
    public static int ENET_PROTOCOL_COMMAND_SEND_UNSEQUENCED() {
        return (int)9L;
    }
    public static int ENET_PROTOCOL_COMMAND_BANDWIDTH_LIMIT() {
        return (int)10L;
    }
    public static int ENET_PROTOCOL_COMMAND_THROTTLE_CONFIGURE() {
        return (int)11L;
    }
    public static int ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE_FRAGMENT() {
        return (int)12L;
    }
    public static int ENET_PROTOCOL_COMMAND_COUNT() {
        return (int)13L;
    }
    public static int ENET_PROTOCOL_COMMAND_MASK() {
        return (int)15L;
    }
    public static int ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE() {
        return (int)128L;
    }
    public static int ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED() {
        return (int)64L;
    }
    public static int ENET_PROTOCOL_HEADER_FLAG_COMPRESSED() {
        return (int)16384L;
    }
    public static int ENET_PROTOCOL_HEADER_FLAG_SENT_TIME() {
        return (int)32768L;
    }
    public static int ENET_PROTOCOL_HEADER_FLAG_MASK() {
        return (int)49152L;
    }
    public static int ENET_PROTOCOL_HEADER_SESSION_MASK() {
        return (int)12288L;
    }
    public static int ENET_PROTOCOL_HEADER_SESSION_SHIFT() {
        return (int)12L;
    }
    public static OfAddress ENetListIterator = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle enet_list_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.enet_list_clear$MH,"enet_list_clear");
    }
    public static void enet_list_clear ( Addressable x0) {
        var mh$ = enet_list_clear$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_list_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.enet_list_insert$MH,"enet_list_insert");
    }
    public static MemoryAddress enet_list_insert ( Addressable x0,  Addressable x1) {
        var mh$ = enet_list_insert$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_list_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.enet_list_remove$MH,"enet_list_remove");
    }
    public static MemoryAddress enet_list_remove ( Addressable x0) {
        var mh$ = enet_list_remove$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_list_move$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.enet_list_move$MH,"enet_list_move");
    }
    public static MemoryAddress enet_list_move ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = enet_list_move$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_list_size$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.enet_list_size$MH,"enet_list_size");
    }
    public static long enet_list_size ( Addressable x0) {
        var mh$ = enet_list_size$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1304.enet_malloc$MH,"enet_malloc");
    }
    public static MemoryAddress enet_malloc ( long x0) {
        var mh$ = enet_malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1304.enet_free$MH,"enet_free");
    }
    public static void enet_free ( Addressable x0) {
        var mh$ = enet_free$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ENET_SOCKET_TYPE_STREAM() {
        return (int)1L;
    }
    public static int ENET_SOCKET_TYPE_DATAGRAM() {
        return (int)2L;
    }
    public static int ENET_SOCKET_WAIT_NONE() {
        return (int)0L;
    }
    public static int ENET_SOCKET_WAIT_SEND() {
        return (int)1L;
    }
    public static int ENET_SOCKET_WAIT_RECEIVE() {
        return (int)2L;
    }
    public static int ENET_SOCKET_WAIT_INTERRUPT() {
        return (int)4L;
    }
    public static int ENET_SOCKOPT_NONBLOCK() {
        return (int)1L;
    }
    public static int ENET_SOCKOPT_BROADCAST() {
        return (int)2L;
    }
    public static int ENET_SOCKOPT_RCVBUF() {
        return (int)3L;
    }
    public static int ENET_SOCKOPT_SNDBUF() {
        return (int)4L;
    }
    public static int ENET_SOCKOPT_REUSEADDR() {
        return (int)5L;
    }
    public static int ENET_SOCKOPT_RCVTIMEO() {
        return (int)6L;
    }
    public static int ENET_SOCKOPT_SNDTIMEO() {
        return (int)7L;
    }
    public static int ENET_SOCKOPT_ERROR() {
        return (int)8L;
    }
    public static int ENET_SOCKOPT_NODELAY() {
        return (int)9L;
    }
    public static int ENET_SOCKET_SHUTDOWN_READ() {
        return (int)0L;
    }
    public static int ENET_SOCKET_SHUTDOWN_WRITE() {
        return (int)1L;
    }
    public static int ENET_SOCKET_SHUTDOWN_READ_WRITE() {
        return (int)2L;
    }
    public static int ENET_PACKET_FLAG_RELIABLE() {
        return (int)1L;
    }
    public static int ENET_PACKET_FLAG_UNSEQUENCED() {
        return (int)2L;
    }
    public static int ENET_PACKET_FLAG_NO_ALLOCATE() {
        return (int)4L;
    }
    public static int ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT() {
        return (int)8L;
    }
    public static int ENET_PACKET_FLAG_SENT() {
        return (int)256L;
    }
    public static int ENET_PEER_STATE_DISCONNECTED() {
        return (int)0L;
    }
    public static int ENET_PEER_STATE_CONNECTING() {
        return (int)1L;
    }
    public static int ENET_PEER_STATE_ACKNOWLEDGING_CONNECT() {
        return (int)2L;
    }
    public static int ENET_PEER_STATE_CONNECTION_PENDING() {
        return (int)3L;
    }
    public static int ENET_PEER_STATE_CONNECTION_SUCCEEDED() {
        return (int)4L;
    }
    public static int ENET_PEER_STATE_CONNECTED() {
        return (int)5L;
    }
    public static int ENET_PEER_STATE_DISCONNECT_LATER() {
        return (int)6L;
    }
    public static int ENET_PEER_STATE_DISCONNECTING() {
        return (int)7L;
    }
    public static int ENET_PEER_STATE_ACKNOWLEDGING_DISCONNECT() {
        return (int)8L;
    }
    public static int ENET_PEER_STATE_ZOMBIE() {
        return (int)9L;
    }
    public static int ENET_HOST_RECEIVE_BUFFER_SIZE() {
        return (int)262144L;
    }
    public static int ENET_HOST_SEND_BUFFER_SIZE() {
        return (int)262144L;
    }
    public static int ENET_HOST_BANDWIDTH_THROTTLE_INTERVAL() {
        return (int)1000L;
    }
    public static int ENET_HOST_DEFAULT_MTU() {
        return (int)1400L;
    }
    public static int ENET_HOST_DEFAULT_MAXIMUM_PACKET_SIZE() {
        return (int)33554432L;
    }
    public static int ENET_HOST_DEFAULT_MAXIMUM_WAITING_DATA() {
        return (int)33554432L;
    }
    public static int ENET_PEER_DEFAULT_ROUND_TRIP_TIME() {
        return (int)500L;
    }
    public static int ENET_PEER_DEFAULT_PACKET_THROTTLE() {
        return (int)32L;
    }
    public static int ENET_PEER_PACKET_THROTTLE_SCALE() {
        return (int)32L;
    }
    public static int ENET_PEER_PACKET_THROTTLE_COUNTER() {
        return (int)7L;
    }
    public static int ENET_PEER_PACKET_THROTTLE_ACCELERATION() {
        return (int)2L;
    }
    public static int ENET_PEER_PACKET_THROTTLE_DECELERATION() {
        return (int)2L;
    }
    public static int ENET_PEER_PACKET_THROTTLE_INTERVAL() {
        return (int)5000L;
    }
    public static int ENET_PEER_PACKET_LOSS_SCALE() {
        return (int)65536L;
    }
    public static int ENET_PEER_PACKET_LOSS_INTERVAL() {
        return (int)10000L;
    }
    public static int ENET_PEER_WINDOW_SIZE_SCALE() {
        return (int)65536L;
    }
    public static int ENET_PEER_TIMEOUT_LIMIT() {
        return (int)32L;
    }
    public static int ENET_PEER_TIMEOUT_MINIMUM() {
        return (int)5000L;
    }
    public static int ENET_PEER_TIMEOUT_MAXIMUM() {
        return (int)30000L;
    }
    public static int ENET_PEER_PING_INTERVAL() {
        return (int)500L;
    }
    public static int ENET_PEER_UNSEQUENCED_WINDOWS() {
        return (int)64L;
    }
    public static int ENET_PEER_UNSEQUENCED_WINDOW_SIZE() {
        return (int)1024L;
    }
    public static int ENET_PEER_FREE_UNSEQUENCED_WINDOWS() {
        return (int)32L;
    }
    public static int ENET_PEER_RELIABLE_WINDOWS() {
        return (int)16L;
    }
    public static int ENET_PEER_RELIABLE_WINDOW_SIZE() {
        return (int)4096L;
    }
    public static int ENET_PEER_FREE_RELIABLE_WINDOWS() {
        return (int)8L;
    }
    public static int ENET_EVENT_TYPE_NONE() {
        return (int)0L;
    }
    public static int ENET_EVENT_TYPE_CONNECT() {
        return (int)1L;
    }
    public static int ENET_EVENT_TYPE_DISCONNECT() {
        return (int)2L;
    }
    public static int ENET_EVENT_TYPE_RECEIVE() {
        return (int)3L;
    }
    public static MethodHandle enet_initialize$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.enet_initialize$MH,"enet_initialize");
    }
    public static int enet_initialize () {
        var mh$ = enet_initialize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_initialize_with_callbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.enet_initialize_with_callbacks$MH,"enet_initialize_with_callbacks");
    }
    public static int enet_initialize_with_callbacks ( int version,  Addressable inits) {
        var mh$ = enet_initialize_with_callbacks$MH();
        try {
            return (int)mh$.invokeExact(version, inits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_deinitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.enet_deinitialize$MH,"enet_deinitialize");
    }
    public static void enet_deinitialize () {
        var mh$ = enet_deinitialize$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_linked_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.enet_linked_version$MH,"enet_linked_version");
    }
    public static int enet_linked_version () {
        var mh$ = enet_linked_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_time_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.enet_time_get$MH,"enet_time_get");
    }
    public static int enet_time_get () {
        var mh$ = enet_time_get$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_time_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.enet_time_set$MH,"enet_time_set");
    }
    public static void enet_time_set ( int x0) {
        var mh$ = enet_time_set$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_create$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.enet_socket_create$MH,"enet_socket_create");
    }
    public static long enet_socket_create ( int x0) {
        var mh$ = enet_socket_create$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_bind$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.enet_socket_bind$MH,"enet_socket_bind");
    }
    public static int enet_socket_bind ( long x0,  Addressable x1) {
        var mh$ = enet_socket_bind$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_get_address$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.enet_socket_get_address$MH,"enet_socket_get_address");
    }
    public static int enet_socket_get_address ( long x0,  Addressable x1) {
        var mh$ = enet_socket_get_address$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_listen$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.enet_socket_listen$MH,"enet_socket_listen");
    }
    public static int enet_socket_listen ( long x0,  int x1) {
        var mh$ = enet_socket_listen$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.enet_socket_accept$MH,"enet_socket_accept");
    }
    public static long enet_socket_accept ( long x0,  Addressable x1) {
        var mh$ = enet_socket_accept$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.enet_socket_connect$MH,"enet_socket_connect");
    }
    public static int enet_socket_connect ( long x0,  Addressable x1) {
        var mh$ = enet_socket_connect$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_send$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.enet_socket_send$MH,"enet_socket_send");
    }
    public static int enet_socket_send ( long x0,  Addressable x1,  Addressable x2,  long x3) {
        var mh$ = enet_socket_send$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_receive$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.enet_socket_receive$MH,"enet_socket_receive");
    }
    public static int enet_socket_receive ( long x0,  Addressable x1,  Addressable x2,  long x3) {
        var mh$ = enet_socket_receive$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.enet_socket_wait$MH,"enet_socket_wait");
    }
    public static int enet_socket_wait ( long x0,  Addressable x1,  int x2) {
        var mh$ = enet_socket_wait$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_set_option$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.enet_socket_set_option$MH,"enet_socket_set_option");
    }
    public static int enet_socket_set_option ( long x0,  int x1,  int x2) {
        var mh$ = enet_socket_set_option$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_get_option$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.enet_socket_get_option$MH,"enet_socket_get_option");
    }
    public static int enet_socket_get_option ( long x0,  int x1,  Addressable x2) {
        var mh$ = enet_socket_get_option$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.enet_socket_shutdown$MH,"enet_socket_shutdown");
    }
    public static int enet_socket_shutdown ( long x0,  int x1) {
        var mh$ = enet_socket_shutdown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socket_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.enet_socket_destroy$MH,"enet_socket_destroy");
    }
    public static void enet_socket_destroy ( long x0) {
        var mh$ = enet_socket_destroy$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_socketset_select$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.enet_socketset_select$MH,"enet_socketset_select");
    }
    public static int enet_socketset_select ( long x0,  Addressable x1,  Addressable x2,  int x3) {
        var mh$ = enet_socketset_select$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_address_set_host_ip$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.enet_address_set_host_ip$MH,"enet_address_set_host_ip");
    }
    public static int enet_address_set_host_ip ( Addressable address,  Addressable hostName) {
        var mh$ = enet_address_set_host_ip$MH();
        try {
            return (int)mh$.invokeExact(address, hostName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_address_set_host$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.enet_address_set_host$MH,"enet_address_set_host");
    }
    public static int enet_address_set_host ( Addressable address,  Addressable hostName) {
        var mh$ = enet_address_set_host$MH();
        try {
            return (int)mh$.invokeExact(address, hostName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_address_get_host_ip$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.enet_address_get_host_ip$MH,"enet_address_get_host_ip");
    }
    public static int enet_address_get_host_ip ( Addressable address,  Addressable hostName,  long nameLength) {
        var mh$ = enet_address_get_host_ip$MH();
        try {
            return (int)mh$.invokeExact(address, hostName, nameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_address_get_host$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.enet_address_get_host$MH,"enet_address_get_host");
    }
    public static int enet_address_get_host ( Addressable address,  Addressable hostName,  long nameLength) {
        var mh$ = enet_address_get_host$MH();
        try {
            return (int)mh$.invokeExact(address, hostName, nameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_packet_create$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.enet_packet_create$MH,"enet_packet_create");
    }
    public static MemoryAddress enet_packet_create ( Addressable x0,  long x1,  int x2) {
        var mh$ = enet_packet_create$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_packet_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.enet_packet_destroy$MH,"enet_packet_destroy");
    }
    public static void enet_packet_destroy ( Addressable x0) {
        var mh$ = enet_packet_destroy$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_packet_resize$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.enet_packet_resize$MH,"enet_packet_resize");
    }
    public static int enet_packet_resize ( Addressable x0,  long x1) {
        var mh$ = enet_packet_resize$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_crc32$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.enet_crc32$MH,"enet_crc32");
    }
    public static int enet_crc32 ( Addressable x0,  long x1) {
        var mh$ = enet_crc32$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_create$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.enet_host_create$MH,"enet_host_create");
    }
    public static MemoryAddress enet_host_create ( Addressable x0,  long x1,  long x2,  int x3,  int x4) {
        var mh$ = enet_host_create$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.enet_host_destroy$MH,"enet_host_destroy");
    }
    public static void enet_host_destroy ( Addressable x0) {
        var mh$ = enet_host_destroy$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.enet_host_connect$MH,"enet_host_connect");
    }
    public static MemoryAddress enet_host_connect ( Addressable x0,  Addressable x1,  long x2,  int x3) {
        var mh$ = enet_host_connect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_check_events$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.enet_host_check_events$MH,"enet_host_check_events");
    }
    public static int enet_host_check_events ( Addressable x0,  Addressable x1) {
        var mh$ = enet_host_check_events$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_service$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.enet_host_service$MH,"enet_host_service");
    }
    public static int enet_host_service ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = enet_host_service$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_flush$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.enet_host_flush$MH,"enet_host_flush");
    }
    public static void enet_host_flush ( Addressable x0) {
        var mh$ = enet_host_flush$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_broadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.enet_host_broadcast$MH,"enet_host_broadcast");
    }
    public static void enet_host_broadcast ( Addressable x0,  byte x1,  Addressable x2) {
        var mh$ = enet_host_broadcast$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_compress$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.enet_host_compress$MH,"enet_host_compress");
    }
    public static void enet_host_compress ( Addressable x0,  Addressable x1) {
        var mh$ = enet_host_compress$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_compress_with_range_coder$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.enet_host_compress_with_range_coder$MH,"enet_host_compress_with_range_coder");
    }
    public static int enet_host_compress_with_range_coder ( Addressable host) {
        var mh$ = enet_host_compress_with_range_coder$MH();
        try {
            return (int)mh$.invokeExact(host);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_channel_limit$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.enet_host_channel_limit$MH,"enet_host_channel_limit");
    }
    public static void enet_host_channel_limit ( Addressable x0,  long x1) {
        var mh$ = enet_host_channel_limit$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_bandwidth_limit$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.enet_host_bandwidth_limit$MH,"enet_host_bandwidth_limit");
    }
    public static void enet_host_bandwidth_limit ( Addressable x0,  int x1,  int x2) {
        var mh$ = enet_host_bandwidth_limit$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_bandwidth_throttle$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.enet_host_bandwidth_throttle$MH,"enet_host_bandwidth_throttle");
    }
    public static void enet_host_bandwidth_throttle ( Addressable x0) {
        var mh$ = enet_host_bandwidth_throttle$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_host_random_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.enet_host_random_seed$MH,"enet_host_random_seed");
    }
    public static int enet_host_random_seed () {
        var mh$ = enet_host_random_seed$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_send$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.enet_peer_send$MH,"enet_peer_send");
    }
    public static int enet_peer_send ( Addressable x0,  byte x1,  Addressable x2) {
        var mh$ = enet_peer_send$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_receive$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.enet_peer_receive$MH,"enet_peer_receive");
    }
    public static MemoryAddress enet_peer_receive ( Addressable x0,  Addressable channelID) {
        var mh$ = enet_peer_receive$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, channelID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_ping$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.enet_peer_ping$MH,"enet_peer_ping");
    }
    public static void enet_peer_ping ( Addressable x0) {
        var mh$ = enet_peer_ping$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_ping_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.enet_peer_ping_interval$MH,"enet_peer_ping_interval");
    }
    public static void enet_peer_ping_interval ( Addressable x0,  int x1) {
        var mh$ = enet_peer_ping_interval$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.enet_peer_timeout$MH,"enet_peer_timeout");
    }
    public static void enet_peer_timeout ( Addressable x0,  int x1,  int x2,  int x3) {
        var mh$ = enet_peer_timeout$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.enet_peer_reset$MH,"enet_peer_reset");
    }
    public static void enet_peer_reset ( Addressable x0) {
        var mh$ = enet_peer_reset$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_disconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.enet_peer_disconnect$MH,"enet_peer_disconnect");
    }
    public static void enet_peer_disconnect ( Addressable x0,  int x1) {
        var mh$ = enet_peer_disconnect$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_disconnect_now$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.enet_peer_disconnect_now$MH,"enet_peer_disconnect_now");
    }
    public static void enet_peer_disconnect_now ( Addressable x0,  int x1) {
        var mh$ = enet_peer_disconnect_now$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_disconnect_later$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.enet_peer_disconnect_later$MH,"enet_peer_disconnect_later");
    }
    public static void enet_peer_disconnect_later ( Addressable x0,  int x1) {
        var mh$ = enet_peer_disconnect_later$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_throttle_configure$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.enet_peer_throttle_configure$MH,"enet_peer_throttle_configure");
    }
    public static void enet_peer_throttle_configure ( Addressable x0,  int x1,  int x2,  int x3) {
        var mh$ = enet_peer_throttle_configure$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_throttle$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.enet_peer_throttle$MH,"enet_peer_throttle");
    }
    public static int enet_peer_throttle ( Addressable x0,  int x1) {
        var mh$ = enet_peer_throttle$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_reset_queues$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.enet_peer_reset_queues$MH,"enet_peer_reset_queues");
    }
    public static void enet_peer_reset_queues ( Addressable x0) {
        var mh$ = enet_peer_reset_queues$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_setup_outgoing_command$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.enet_peer_setup_outgoing_command$MH,"enet_peer_setup_outgoing_command");
    }
    public static void enet_peer_setup_outgoing_command ( Addressable x0,  Addressable x1) {
        var mh$ = enet_peer_setup_outgoing_command$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_queue_outgoing_command$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.enet_peer_queue_outgoing_command$MH,"enet_peer_queue_outgoing_command");
    }
    public static MemoryAddress enet_peer_queue_outgoing_command ( Addressable x0,  Addressable x1,  Addressable x2,  int x3,  short x4) {
        var mh$ = enet_peer_queue_outgoing_command$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_queue_incoming_command$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.enet_peer_queue_incoming_command$MH,"enet_peer_queue_incoming_command");
    }
    public static MemoryAddress enet_peer_queue_incoming_command ( Addressable x0,  Addressable x1,  Addressable x2,  long x3,  int x4,  int x5) {
        var mh$ = enet_peer_queue_incoming_command$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_queue_acknowledgement$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.enet_peer_queue_acknowledgement$MH,"enet_peer_queue_acknowledgement");
    }
    public static MemoryAddress enet_peer_queue_acknowledgement ( Addressable x0,  Addressable x1,  short x2) {
        var mh$ = enet_peer_queue_acknowledgement$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_dispatch_incoming_unreliable_commands$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.enet_peer_dispatch_incoming_unreliable_commands$MH,"enet_peer_dispatch_incoming_unreliable_commands");
    }
    public static void enet_peer_dispatch_incoming_unreliable_commands ( Addressable x0,  Addressable x1) {
        var mh$ = enet_peer_dispatch_incoming_unreliable_commands$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_dispatch_incoming_reliable_commands$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.enet_peer_dispatch_incoming_reliable_commands$MH,"enet_peer_dispatch_incoming_reliable_commands");
    }
    public static void enet_peer_dispatch_incoming_reliable_commands ( Addressable x0,  Addressable x1) {
        var mh$ = enet_peer_dispatch_incoming_reliable_commands$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_on_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.enet_peer_on_connect$MH,"enet_peer_on_connect");
    }
    public static void enet_peer_on_connect ( Addressable x0) {
        var mh$ = enet_peer_on_connect$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_peer_on_disconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.enet_peer_on_disconnect$MH,"enet_peer_on_disconnect");
    }
    public static void enet_peer_on_disconnect ( Addressable x0) {
        var mh$ = enet_peer_on_disconnect$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_range_coder_create$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.enet_range_coder_create$MH,"enet_range_coder_create");
    }
    public static MemoryAddress enet_range_coder_create () {
        var mh$ = enet_range_coder_create$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_range_coder_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.enet_range_coder_destroy$MH,"enet_range_coder_destroy");
    }
    public static void enet_range_coder_destroy ( Addressable x0) {
        var mh$ = enet_range_coder_destroy$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_range_coder_compress$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.enet_range_coder_compress$MH,"enet_range_coder_compress");
    }
    public static long enet_range_coder_compress ( Addressable x0,  Addressable x1,  long x2,  long x3,  Addressable x4,  long x5) {
        var mh$ = enet_range_coder_compress$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_range_coder_decompress$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.enet_range_coder_decompress$MH,"enet_range_coder_decompress");
    }
    public static long enet_range_coder_decompress ( Addressable x0,  Addressable x1,  long x2,  Addressable x3,  long x4) {
        var mh$ = enet_range_coder_decompress$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle enet_protocol_command_size$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.enet_protocol_command_size$MH,"enet_protocol_command_size");
    }
    public static long enet_protocol_command_size ( byte x0) {
        var mh$ = enet_protocol_command_size$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return (int)4514L;
    }
    public static MemoryAddress NULL() {
        return constants$1316.NULL$ADDR;
    }
    public static int _UCRT_DISABLED_WARNINGS() {
        return (int)4324L;
    }
    public static long _TRUNCATE() {
        return -1L;
    }
    public static long _CRT_SIZE_MAX() {
        return -1L;
    }
    public static MemorySegment __FILEW__() {
        return constants$1316.__FILEW__$SEGMENT;
    }
    public static int __STDC_SECURE_LIB__() {
        return (int)200411L;
    }
    public static int __GOT_SECURE_LIB__() {
        return (int)200411L;
    }
    public static int _MAX_ITOSTR_BASE16_COUNT() {
        return (int)9L;
    }
    public static int _MAX_ITOSTR_BASE10_COUNT() {
        return (int)12L;
    }
    public static int _MAX_ITOSTR_BASE8_COUNT() {
        return (int)12L;
    }
    public static int _MAX_ITOSTR_BASE2_COUNT() {
        return (int)33L;
    }
    public static int _MAX_LTOSTR_BASE16_COUNT() {
        return (int)9L;
    }
    public static int _MAX_LTOSTR_BASE10_COUNT() {
        return (int)12L;
    }
    public static int _MAX_LTOSTR_BASE8_COUNT() {
        return (int)12L;
    }
    public static int _MAX_LTOSTR_BASE2_COUNT() {
        return (int)33L;
    }
    public static int _MAX_ULTOSTR_BASE16_COUNT() {
        return (int)9L;
    }
    public static int _MAX_ULTOSTR_BASE10_COUNT() {
        return (int)11L;
    }
    public static int _MAX_ULTOSTR_BASE8_COUNT() {
        return (int)12L;
    }
    public static int _MAX_ULTOSTR_BASE2_COUNT() {
        return (int)33L;
    }
    public static int _MAX_I64TOSTR_BASE16_COUNT() {
        return (int)17L;
    }
    public static int _MAX_I64TOSTR_BASE10_COUNT() {
        return (int)21L;
    }
    public static int _MAX_I64TOSTR_BASE8_COUNT() {
        return (int)23L;
    }
    public static int _MAX_I64TOSTR_BASE2_COUNT() {
        return (int)65L;
    }
    public static int _MAX_U64TOSTR_BASE16_COUNT() {
        return (int)17L;
    }
    public static int _MAX_U64TOSTR_BASE10_COUNT() {
        return (int)21L;
    }
    public static int _MAX_U64TOSTR_BASE8_COUNT() {
        return (int)23L;
    }
    public static int _MAX_U64TOSTR_BASE2_COUNT() {
        return (int)65L;
    }
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    public static int CHAR_MAX() {
        return (int)127L;
    }
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    public static int LONG_MIN() {
        return (int)-2147483648L;
    }
    public static int LONG_MAX() {
        return (int)2147483647L;
    }
    public static int ULONG_MAX() {
        return (int)4294967295L;
    }
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    public static long ULLONG_MAX() {
        return -1L;
    }
    public static int _I8_MIN() {
        return (int)-128L;
    }
    public static byte _I8_MAX() {
        return (byte)127L;
    }
    public static byte _UI8_MAX() {
        return (byte)255L;
    }
}


