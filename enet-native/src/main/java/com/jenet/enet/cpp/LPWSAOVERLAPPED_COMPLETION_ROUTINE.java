// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface LPWSAOVERLAPPED_COMPLETION_ROUTINE {

    void apply(int dwError, int cbTransferred, java.lang.foreign.MemoryAddress lpOverlapped, int dwFlags);
    static MemorySegment allocate(LPWSAOVERLAPPED_COMPLETION_ROUTINE fi, MemorySession session) {
        return RuntimeHelper.upcallStub(LPWSAOVERLAPPED_COMPLETION_ROUTINE.class, fi, constants$1284.LPWSAOVERLAPPED_COMPLETION_ROUTINE$FUNC, session);
    }
    static LPWSAOVERLAPPED_COMPLETION_ROUTINE ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _dwError, int _cbTransferred, java.lang.foreign.MemoryAddress _lpOverlapped, int _dwFlags) -> {
            try {
                constants$1284.LPWSAOVERLAPPED_COMPLETION_ROUTINE$MH.invokeExact((Addressable)symbol, _dwError, _cbTransferred, (java.lang.foreign.Addressable)_lpOverlapped, _dwFlags);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


