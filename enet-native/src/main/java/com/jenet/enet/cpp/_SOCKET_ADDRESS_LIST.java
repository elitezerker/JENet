// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _SOCKET_ADDRESS_LIST {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("iAddressCount"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("lpSockaddr"),
            Constants$root.C_LONG$LAYOUT.withName("iSockaddrLength"),
            MemoryLayout.paddingLayout(32)
        ).withName("_SOCKET_ADDRESS")).withName("Address")
    ).withName("_SOCKET_ADDRESS_LIST");
    public static MemoryLayout $LAYOUT() {
        return _SOCKET_ADDRESS_LIST.$struct$LAYOUT;
    }
    static final VarHandle iAddressCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iAddressCount"));
    public static VarHandle iAddressCount$VH() {
        return _SOCKET_ADDRESS_LIST.iAddressCount$VH;
    }
    public static int iAddressCount$get(MemorySegment seg) {
        return (int)_SOCKET_ADDRESS_LIST.iAddressCount$VH.get(seg);
    }
    public static void iAddressCount$set( MemorySegment seg, int x) {
        _SOCKET_ADDRESS_LIST.iAddressCount$VH.set(seg, x);
    }
    public static int iAddressCount$get(MemorySegment seg, long index) {
        return (int)_SOCKET_ADDRESS_LIST.iAddressCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iAddressCount$set(MemorySegment seg, long index, int x) {
        _SOCKET_ADDRESS_LIST.iAddressCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Address$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


