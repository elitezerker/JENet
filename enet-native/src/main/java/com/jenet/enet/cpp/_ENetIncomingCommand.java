// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetIncomingCommand {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("next"),
            Constants$root.C_POINTER$LAYOUT.withName("previous")
        ).withName("incomingCommandList"),
        Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber"),
        Constants$root.C_SHORT$LAYOUT.withName("unreliableSequenceNumber"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("receivedReliableSequenceNumber"),
                Constants$root.C_SHORT$LAYOUT.withName("receivedSentTime")
            ).withName("acknowledge"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("outgoingPeerID"),
                Constants$root.C_CHAR$LAYOUT.withName("incomingSessionID"),
                Constants$root.C_CHAR$LAYOUT.withName("outgoingSessionID"),
                Constants$root.C_LONG$LAYOUT.withName("mtu"),
                Constants$root.C_LONG$LAYOUT.withName("windowSize"),
                Constants$root.C_LONG$LAYOUT.withName("channelCount"),
                Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration"),
                Constants$root.C_LONG$LAYOUT.withName("connectID"),
                Constants$root.C_LONG$LAYOUT.withName("data")
            ).withName("connect"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("outgoingPeerID"),
                Constants$root.C_CHAR$LAYOUT.withName("incomingSessionID"),
                Constants$root.C_CHAR$LAYOUT.withName("outgoingSessionID"),
                Constants$root.C_LONG$LAYOUT.withName("mtu"),
                Constants$root.C_LONG$LAYOUT.withName("windowSize"),
                Constants$root.C_LONG$LAYOUT.withName("channelCount"),
                Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration"),
                Constants$root.C_LONG$LAYOUT.withName("connectID")
            ).withName("verifyConnect"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_LONG$LAYOUT.withName("data")
            ).withName("disconnect"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header")
            ).withName("ping"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength")
            ).withName("sendReliable"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("unreliableSequenceNumber"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength")
            ).withName("sendUnreliable"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("unsequencedGroup"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength")
            ).withName("sendUnsequenced"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("startSequenceNumber"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength"),
                Constants$root.C_LONG$LAYOUT.withName("fragmentCount"),
                Constants$root.C_LONG$LAYOUT.withName("fragmentNumber"),
                Constants$root.C_LONG$LAYOUT.withName("totalLength"),
                Constants$root.C_LONG$LAYOUT.withName("fragmentOffset")
            ).withName("sendFragment"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth")
            ).withName("bandwidthLimit"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration")
            ).withName("throttleConfigure")
        ).withName("command"),
        Constants$root.C_LONG$LAYOUT.withName("fragmentCount"),
        Constants$root.C_LONG$LAYOUT.withName("fragmentsRemaining"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("fragments"),
        Constants$root.C_POINTER$LAYOUT.withName("packet")
    ).withName("_ENetIncomingCommand");
    public static MemoryLayout $LAYOUT() {
        return _ENetIncomingCommand.$struct$LAYOUT;
    }
    public static MemorySegment incomingCommandList$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final VarHandle reliableSequenceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reliableSequenceNumber"));
    public static VarHandle reliableSequenceNumber$VH() {
        return _ENetIncomingCommand.reliableSequenceNumber$VH;
    }
    public static short reliableSequenceNumber$get(MemorySegment seg) {
        return (short)_ENetIncomingCommand.reliableSequenceNumber$VH.get(seg);
    }
    public static void reliableSequenceNumber$set( MemorySegment seg, short x) {
        _ENetIncomingCommand.reliableSequenceNumber$VH.set(seg, x);
    }
    public static short reliableSequenceNumber$get(MemorySegment seg, long index) {
        return (short)_ENetIncomingCommand.reliableSequenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reliableSequenceNumber$set(MemorySegment seg, long index, short x) {
        _ENetIncomingCommand.reliableSequenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle unreliableSequenceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unreliableSequenceNumber"));
    public static VarHandle unreliableSequenceNumber$VH() {
        return _ENetIncomingCommand.unreliableSequenceNumber$VH;
    }
    public static short unreliableSequenceNumber$get(MemorySegment seg) {
        return (short)_ENetIncomingCommand.unreliableSequenceNumber$VH.get(seg);
    }
    public static void unreliableSequenceNumber$set( MemorySegment seg, short x) {
        _ENetIncomingCommand.unreliableSequenceNumber$VH.set(seg, x);
    }
    public static short unreliableSequenceNumber$get(MemorySegment seg, long index) {
        return (short)_ENetIncomingCommand.unreliableSequenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unreliableSequenceNumber$set(MemorySegment seg, long index, short x) {
        _ENetIncomingCommand.unreliableSequenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment command$slice(MemorySegment seg) {
        return seg.asSlice(20, 48);
    }
    static final VarHandle fragmentCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fragmentCount"));
    public static VarHandle fragmentCount$VH() {
        return _ENetIncomingCommand.fragmentCount$VH;
    }
    public static int fragmentCount$get(MemorySegment seg) {
        return (int)_ENetIncomingCommand.fragmentCount$VH.get(seg);
    }
    public static void fragmentCount$set( MemorySegment seg, int x) {
        _ENetIncomingCommand.fragmentCount$VH.set(seg, x);
    }
    public static int fragmentCount$get(MemorySegment seg, long index) {
        return (int)_ENetIncomingCommand.fragmentCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentCount$set(MemorySegment seg, long index, int x) {
        _ENetIncomingCommand.fragmentCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fragmentsRemaining$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fragmentsRemaining"));
    public static VarHandle fragmentsRemaining$VH() {
        return _ENetIncomingCommand.fragmentsRemaining$VH;
    }
    public static int fragmentsRemaining$get(MemorySegment seg) {
        return (int)_ENetIncomingCommand.fragmentsRemaining$VH.get(seg);
    }
    public static void fragmentsRemaining$set( MemorySegment seg, int x) {
        _ENetIncomingCommand.fragmentsRemaining$VH.set(seg, x);
    }
    public static int fragmentsRemaining$get(MemorySegment seg, long index) {
        return (int)_ENetIncomingCommand.fragmentsRemaining$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentsRemaining$set(MemorySegment seg, long index, int x) {
        _ENetIncomingCommand.fragmentsRemaining$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fragments$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fragments"));
    public static VarHandle fragments$VH() {
        return _ENetIncomingCommand.fragments$VH;
    }
    public static MemoryAddress fragments$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetIncomingCommand.fragments$VH.get(seg);
    }
    public static void fragments$set( MemorySegment seg, MemoryAddress x) {
        _ENetIncomingCommand.fragments$VH.set(seg, x);
    }
    public static MemoryAddress fragments$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetIncomingCommand.fragments$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fragments$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetIncomingCommand.fragments$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packet$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packet"));
    public static VarHandle packet$VH() {
        return _ENetIncomingCommand.packet$VH;
    }
    public static MemoryAddress packet$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetIncomingCommand.packet$VH.get(seg);
    }
    public static void packet$set( MemorySegment seg, MemoryAddress x) {
        _ENetIncomingCommand.packet$VH.set(seg, x);
    }
    public static MemoryAddress packet$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetIncomingCommand.packet$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packet$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetIncomingCommand.packet$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


