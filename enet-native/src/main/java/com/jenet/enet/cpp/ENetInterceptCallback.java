// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface ENetInterceptCallback {

    int apply(java.lang.foreign.MemoryAddress host, java.lang.foreign.MemoryAddress event);
    static MemorySegment allocate(ENetInterceptCallback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(ENetInterceptCallback.class, fi, constants$1305.ENetInterceptCallback$FUNC, session);
    }
    static ENetInterceptCallback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _host, java.lang.foreign.MemoryAddress _event) -> {
            try {
                return (int)constants$1305.ENetInterceptCallback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_host, (java.lang.foreign.Addressable)_event);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


