// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class enet_h_19 extends enet_h_18 {

    public static MethodHandle RpcServerUseProtseqIfExA$MH() {
        return RuntimeHelper.requireNonNull(constants$697.RpcServerUseProtseqIfExA$MH,"RpcServerUseProtseqIfExA");
    }
    public static int RpcServerUseProtseqIfExA ( Addressable Protseq,  int MaxCalls,  Addressable IfSpec,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = RpcServerUseProtseqIfExA$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseProtseqIfW$MH() {
        return RuntimeHelper.requireNonNull(constants$697.RpcServerUseProtseqIfW$MH,"RpcServerUseProtseqIfW");
    }
    public static int RpcServerUseProtseqIfW ( Addressable Protseq,  int MaxCalls,  Addressable IfSpec,  Addressable SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqIfW$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseProtseqIfExW$MH() {
        return RuntimeHelper.requireNonNull(constants$697.RpcServerUseProtseqIfExW$MH,"RpcServerUseProtseqIfExW");
    }
    public static int RpcServerUseProtseqIfExW ( Addressable Protseq,  int MaxCalls,  Addressable IfSpec,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = RpcServerUseProtseqIfExW$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerYield$MH() {
        return RuntimeHelper.requireNonNull(constants$697.RpcServerYield$MH,"RpcServerYield");
    }
    public static void RpcServerYield () {
        var mh$ = RpcServerYield$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtStatsVectorFree$MH() {
        return RuntimeHelper.requireNonNull(constants$697.RpcMgmtStatsVectorFree$MH,"RpcMgmtStatsVectorFree");
    }
    public static int RpcMgmtStatsVectorFree ( Addressable StatsVector) {
        var mh$ = RpcMgmtStatsVectorFree$MH();
        try {
            return (int)mh$.invokeExact(StatsVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtInqStats$MH() {
        return RuntimeHelper.requireNonNull(constants$698.RpcMgmtInqStats$MH,"RpcMgmtInqStats");
    }
    public static int RpcMgmtInqStats ( Addressable Binding,  Addressable Statistics) {
        var mh$ = RpcMgmtInqStats$MH();
        try {
            return (int)mh$.invokeExact(Binding, Statistics);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtIsServerListening$MH() {
        return RuntimeHelper.requireNonNull(constants$698.RpcMgmtIsServerListening$MH,"RpcMgmtIsServerListening");
    }
    public static int RpcMgmtIsServerListening ( Addressable Binding) {
        var mh$ = RpcMgmtIsServerListening$MH();
        try {
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtStopServerListening$MH() {
        return RuntimeHelper.requireNonNull(constants$698.RpcMgmtStopServerListening$MH,"RpcMgmtStopServerListening");
    }
    public static int RpcMgmtStopServerListening ( Addressable Binding) {
        var mh$ = RpcMgmtStopServerListening$MH();
        try {
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtWaitServerListen$MH() {
        return RuntimeHelper.requireNonNull(constants$698.RpcMgmtWaitServerListen$MH,"RpcMgmtWaitServerListen");
    }
    public static int RpcMgmtWaitServerListen () {
        var mh$ = RpcMgmtWaitServerListen$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtSetServerStackSize$MH() {
        return RuntimeHelper.requireNonNull(constants$698.RpcMgmtSetServerStackSize$MH,"RpcMgmtSetServerStackSize");
    }
    public static int RpcMgmtSetServerStackSize ( int ThreadStackSize) {
        var mh$ = RpcMgmtSetServerStackSize$MH();
        try {
            return (int)mh$.invokeExact(ThreadStackSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsDontSerializeContext$MH() {
        return RuntimeHelper.requireNonNull(constants$698.RpcSsDontSerializeContext$MH,"RpcSsDontSerializeContext");
    }
    public static void RpcSsDontSerializeContext () {
        var mh$ = RpcSsDontSerializeContext$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtEnableIdleCleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$699.RpcMgmtEnableIdleCleanup$MH,"RpcMgmtEnableIdleCleanup");
    }
    public static int RpcMgmtEnableIdleCleanup () {
        var mh$ = RpcMgmtEnableIdleCleanup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtInqIfIds$MH() {
        return RuntimeHelper.requireNonNull(constants$699.RpcMgmtInqIfIds$MH,"RpcMgmtInqIfIds");
    }
    public static int RpcMgmtInqIfIds ( Addressable Binding,  Addressable IfIdVector) {
        var mh$ = RpcMgmtInqIfIds$MH();
        try {
            return (int)mh$.invokeExact(Binding, IfIdVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcIfIdVectorFree$MH() {
        return RuntimeHelper.requireNonNull(constants$699.RpcIfIdVectorFree$MH,"RpcIfIdVectorFree");
    }
    public static int RpcIfIdVectorFree ( Addressable IfIdVector) {
        var mh$ = RpcIfIdVectorFree$MH();
        try {
            return (int)mh$.invokeExact(IfIdVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtInqServerPrincNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$699.RpcMgmtInqServerPrincNameA$MH,"RpcMgmtInqServerPrincNameA");
    }
    public static int RpcMgmtInqServerPrincNameA ( Addressable Binding,  int AuthnSvc,  Addressable ServerPrincName) {
        var mh$ = RpcMgmtInqServerPrincNameA$MH();
        try {
            return (int)mh$.invokeExact(Binding, AuthnSvc, ServerPrincName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtInqServerPrincNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$699.RpcMgmtInqServerPrincNameW$MH,"RpcMgmtInqServerPrincNameW");
    }
    public static int RpcMgmtInqServerPrincNameW ( Addressable Binding,  int AuthnSvc,  Addressable ServerPrincName) {
        var mh$ = RpcMgmtInqServerPrincNameW$MH();
        try {
            return (int)mh$.invokeExact(Binding, AuthnSvc, ServerPrincName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInqDefaultPrincNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$699.RpcServerInqDefaultPrincNameA$MH,"RpcServerInqDefaultPrincNameA");
    }
    public static int RpcServerInqDefaultPrincNameA ( int AuthnSvc,  Addressable PrincName) {
        var mh$ = RpcServerInqDefaultPrincNameA$MH();
        try {
            return (int)mh$.invokeExact(AuthnSvc, PrincName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInqDefaultPrincNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$700.RpcServerInqDefaultPrincNameW$MH,"RpcServerInqDefaultPrincNameW");
    }
    public static int RpcServerInqDefaultPrincNameW ( int AuthnSvc,  Addressable PrincName) {
        var mh$ = RpcServerInqDefaultPrincNameW$MH();
        try {
            return (int)mh$.invokeExact(AuthnSvc, PrincName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcEpResolveBinding$MH() {
        return RuntimeHelper.requireNonNull(constants$700.RpcEpResolveBinding$MH,"RpcEpResolveBinding");
    }
    public static int RpcEpResolveBinding ( Addressable Binding,  Addressable IfSpec) {
        var mh$ = RpcEpResolveBinding$MH();
        try {
            return (int)mh$.invokeExact(Binding, IfSpec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingInqEntryNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$700.RpcNsBindingInqEntryNameA$MH,"RpcNsBindingInqEntryNameA");
    }
    public static int RpcNsBindingInqEntryNameA ( Addressable Binding,  int EntryNameSyntax,  Addressable EntryName) {
        var mh$ = RpcNsBindingInqEntryNameA$MH();
        try {
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingInqEntryNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$700.RpcNsBindingInqEntryNameW$MH,"RpcNsBindingInqEntryNameW");
    }
    public static int RpcNsBindingInqEntryNameW ( Addressable Binding,  int EntryNameSyntax,  Addressable EntryName) {
        var mh$ = RpcNsBindingInqEntryNameW$MH();
        try {
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress RPC_AUTH_IDENTITY_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress RPC_AUTHZ_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_SECURITY_QOS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSEC_WINNT_AUTH_IDENTITY_W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSEC_WINNT_AUTH_IDENTITY_A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_HTTP_TRANSPORT_CREDENTIALS_W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_HTTP_TRANSPORT_CREDENTIALS_A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_SECURITY_QOS_V2_W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_SECURITY_QOS_V2_A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_SECURITY_QOS_V3_W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_SECURITY_QOS_V3_A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_SECURITY_QOS_V4_W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_SECURITY_QOS_V4_A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_SECURITY_QOS_V5_W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_SECURITY_QOS_V5_A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_BINDING_HANDLE_TEMPLATE_V1_W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_BINDING_HANDLE_TEMPLATE_V1_A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_BINDING_HANDLE_SECURITY_V1_W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_BINDING_HANDLE_SECURITY_V1_A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_BINDING_HANDLE_OPTIONS_V1 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RpcBindingCreateA$MH() {
        return RuntimeHelper.requireNonNull(constants$700.RpcBindingCreateA$MH,"RpcBindingCreateA");
    }
    public static int RpcBindingCreateA ( Addressable Template,  Addressable Security,  Addressable Options,  Addressable Binding) {
        var mh$ = RpcBindingCreateA$MH();
        try {
            return (int)mh$.invokeExact(Template, Security, Options, Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingCreateW$MH() {
        return RuntimeHelper.requireNonNull(constants$700.RpcBindingCreateW$MH,"RpcBindingCreateW");
    }
    public static int RpcBindingCreateW ( Addressable Template,  Addressable Security,  Addressable Options,  Addressable Binding) {
        var mh$ = RpcBindingCreateW$MH();
        try {
            return (int)mh$.invokeExact(Template, Security, Options, Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingGetTrainingContextHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$701.RpcBindingGetTrainingContextHandle$MH,"RpcBindingGetTrainingContextHandle");
    }
    public static int RpcBindingGetTrainingContextHandle ( Addressable Binding,  Addressable ContextHandle) {
        var mh$ = RpcBindingGetTrainingContextHandle$MH();
        try {
            return (int)mh$.invokeExact(Binding, ContextHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInqBindingHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$701.RpcServerInqBindingHandle$MH,"RpcServerInqBindingHandle");
    }
    public static int RpcServerInqBindingHandle ( Addressable Binding) {
        var mh$ = RpcServerInqBindingHandle$MH();
        try {
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int RPCHTTP_RS_REDIRECT() {
        return (int)1L;
    }
    public static int RPCHTTP_RS_ACCESS_1() {
        return (int)2L;
    }
    public static int RPCHTTP_RS_SESSION() {
        return (int)3L;
    }
    public static int RPCHTTP_RS_ACCESS_2() {
        return (int)4L;
    }
    public static int RPCHTTP_RS_INTERFACE() {
        return (int)5L;
    }
    public static MethodHandle RpcImpersonateClient$MH() {
        return RuntimeHelper.requireNonNull(constants$702.RpcImpersonateClient$MH,"RpcImpersonateClient");
    }
    public static int RpcImpersonateClient ( Addressable BindingHandle) {
        var mh$ = RpcImpersonateClient$MH();
        try {
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcImpersonateClient2$MH() {
        return RuntimeHelper.requireNonNull(constants$702.RpcImpersonateClient2$MH,"RpcImpersonateClient2");
    }
    public static int RpcImpersonateClient2 ( Addressable BindingHandle) {
        var mh$ = RpcImpersonateClient2$MH();
        try {
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcRevertToSelfEx$MH() {
        return RuntimeHelper.requireNonNull(constants$702.RpcRevertToSelfEx$MH,"RpcRevertToSelfEx");
    }
    public static int RpcRevertToSelfEx ( Addressable BindingHandle) {
        var mh$ = RpcRevertToSelfEx$MH();
        try {
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcRevertToSelf$MH() {
        return RuntimeHelper.requireNonNull(constants$702.RpcRevertToSelf$MH,"RpcRevertToSelf");
    }
    public static int RpcRevertToSelf () {
        var mh$ = RpcRevertToSelf$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcImpersonateClientContainer$MH() {
        return RuntimeHelper.requireNonNull(constants$702.RpcImpersonateClientContainer$MH,"RpcImpersonateClientContainer");
    }
    public static int RpcImpersonateClientContainer ( Addressable BindingHandle) {
        var mh$ = RpcImpersonateClientContainer$MH();
        try {
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcRevertContainerImpersonation$MH() {
        return RuntimeHelper.requireNonNull(constants$702.RpcRevertContainerImpersonation$MH,"RpcRevertContainerImpersonation");
    }
    public static int RpcRevertContainerImpersonation () {
        var mh$ = RpcRevertContainerImpersonation$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingInqAuthClientA$MH() {
        return RuntimeHelper.requireNonNull(constants$703.RpcBindingInqAuthClientA$MH,"RpcBindingInqAuthClientA");
    }
    public static int RpcBindingInqAuthClientA ( Addressable ClientBinding,  Addressable Privs,  Addressable ServerPrincName,  Addressable AuthnLevel,  Addressable AuthnSvc,  Addressable AuthzSvc) {
        var mh$ = RpcBindingInqAuthClientA$MH();
        try {
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingInqAuthClientW$MH() {
        return RuntimeHelper.requireNonNull(constants$703.RpcBindingInqAuthClientW$MH,"RpcBindingInqAuthClientW");
    }
    public static int RpcBindingInqAuthClientW ( Addressable ClientBinding,  Addressable Privs,  Addressable ServerPrincName,  Addressable AuthnLevel,  Addressable AuthnSvc,  Addressable AuthzSvc) {
        var mh$ = RpcBindingInqAuthClientW$MH();
        try {
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingInqAuthClientExA$MH() {
        return RuntimeHelper.requireNonNull(constants$703.RpcBindingInqAuthClientExA$MH,"RpcBindingInqAuthClientExA");
    }
    public static int RpcBindingInqAuthClientExA ( Addressable ClientBinding,  Addressable Privs,  Addressable ServerPrincName,  Addressable AuthnLevel,  Addressable AuthnSvc,  Addressable AuthzSvc,  int Flags) {
        var mh$ = RpcBindingInqAuthClientExA$MH();
        try {
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingInqAuthClientExW$MH() {
        return RuntimeHelper.requireNonNull(constants$703.RpcBindingInqAuthClientExW$MH,"RpcBindingInqAuthClientExW");
    }
    public static int RpcBindingInqAuthClientExW ( Addressable ClientBinding,  Addressable Privs,  Addressable ServerPrincName,  Addressable AuthnLevel,  Addressable AuthnSvc,  Addressable AuthzSvc,  int Flags) {
        var mh$ = RpcBindingInqAuthClientExW$MH();
        try {
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingInqAuthInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$703.RpcBindingInqAuthInfoA$MH,"RpcBindingInqAuthInfoA");
    }
    public static int RpcBindingInqAuthInfoA ( Addressable Binding,  Addressable ServerPrincName,  Addressable AuthnLevel,  Addressable AuthnSvc,  Addressable AuthIdentity,  Addressable AuthzSvc) {
        var mh$ = RpcBindingInqAuthInfoA$MH();
        try {
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingInqAuthInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$703.RpcBindingInqAuthInfoW$MH,"RpcBindingInqAuthInfoW");
    }
    public static int RpcBindingInqAuthInfoW ( Addressable Binding,  Addressable ServerPrincName,  Addressable AuthnLevel,  Addressable AuthnSvc,  Addressable AuthIdentity,  Addressable AuthzSvc) {
        var mh$ = RpcBindingInqAuthInfoW$MH();
        try {
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingSetAuthInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$704.RpcBindingSetAuthInfoA$MH,"RpcBindingSetAuthInfoA");
    }
    public static int RpcBindingSetAuthInfoA ( Addressable Binding,  Addressable ServerPrincName,  int AuthnLevel,  int AuthnSvc,  Addressable AuthIdentity,  int AuthzSvc) {
        var mh$ = RpcBindingSetAuthInfoA$MH();
        try {
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingSetAuthInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$704.RpcBindingSetAuthInfoExA$MH,"RpcBindingSetAuthInfoExA");
    }
    public static int RpcBindingSetAuthInfoExA ( Addressable Binding,  Addressable ServerPrincName,  int AuthnLevel,  int AuthnSvc,  Addressable AuthIdentity,  int AuthzSvc,  Addressable SecurityQos) {
        var mh$ = RpcBindingSetAuthInfoExA$MH();
        try {
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingSetAuthInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$704.RpcBindingSetAuthInfoW$MH,"RpcBindingSetAuthInfoW");
    }
    public static int RpcBindingSetAuthInfoW ( Addressable Binding,  Addressable ServerPrincName,  int AuthnLevel,  int AuthnSvc,  Addressable AuthIdentity,  int AuthzSvc) {
        var mh$ = RpcBindingSetAuthInfoW$MH();
        try {
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingSetAuthInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$704.RpcBindingSetAuthInfoExW$MH,"RpcBindingSetAuthInfoExW");
    }
    public static int RpcBindingSetAuthInfoExW ( Addressable Binding,  Addressable ServerPrincName,  int AuthnLevel,  int AuthnSvc,  Addressable AuthIdentity,  int AuthzSvc,  Addressable SecurityQOS) {
        var mh$ = RpcBindingSetAuthInfoExW$MH();
        try {
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQOS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingInqAuthInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$704.RpcBindingInqAuthInfoExA$MH,"RpcBindingInqAuthInfoExA");
    }
    public static int RpcBindingInqAuthInfoExA ( Addressable Binding,  Addressable ServerPrincName,  Addressable AuthnLevel,  Addressable AuthnSvc,  Addressable AuthIdentity,  Addressable AuthzSvc,  int RpcQosVersion,  Addressable SecurityQOS) {
        var mh$ = RpcBindingInqAuthInfoExA$MH();
        try {
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingInqAuthInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$704.RpcBindingInqAuthInfoExW$MH,"RpcBindingInqAuthInfoExW");
    }
    public static int RpcBindingInqAuthInfoExW ( Addressable Binding,  Addressable ServerPrincName,  Addressable AuthnLevel,  Addressable AuthnSvc,  Addressable AuthIdentity,  Addressable AuthzSvc,  int RpcQosVersion,  Addressable SecurityQOS) {
        var mh$ = RpcBindingInqAuthInfoExW$MH();
        try {
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerCompleteSecurityCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$705.RpcServerCompleteSecurityCallback$MH,"RpcServerCompleteSecurityCallback");
    }
    public static int RpcServerCompleteSecurityCallback ( Addressable BindingHandle,  int Status) {
        var mh$ = RpcServerCompleteSecurityCallback$MH();
        try {
            return (int)mh$.invokeExact(BindingHandle, Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerRegisterAuthInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$705.RpcServerRegisterAuthInfoA$MH,"RpcServerRegisterAuthInfoA");
    }
    public static int RpcServerRegisterAuthInfoA ( Addressable ServerPrincName,  int AuthnSvc,  Addressable GetKeyFn,  Addressable Arg) {
        var mh$ = RpcServerRegisterAuthInfoA$MH();
        try {
            return (int)mh$.invokeExact(ServerPrincName, AuthnSvc, GetKeyFn, Arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerRegisterAuthInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$705.RpcServerRegisterAuthInfoW$MH,"RpcServerRegisterAuthInfoW");
    }
    public static int RpcServerRegisterAuthInfoW ( Addressable ServerPrincName,  int AuthnSvc,  Addressable GetKeyFn,  Addressable Arg) {
        var mh$ = RpcServerRegisterAuthInfoW$MH();
        try {
            return (int)mh$.invokeExact(ServerPrincName, AuthnSvc, GetKeyFn, Arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRPC_CLIENT_INFORMATION1 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RpcBindingServerFromClient$MH() {
        return RuntimeHelper.requireNonNull(constants$705.RpcBindingServerFromClient$MH,"RpcBindingServerFromClient");
    }
    public static int RpcBindingServerFromClient ( Addressable ClientBinding,  Addressable ServerBinding) {
        var mh$ = RpcBindingServerFromClient$MH();
        try {
            return (int)mh$.invokeExact(ClientBinding, ServerBinding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcRaiseException$MH() {
        return RuntimeHelper.requireNonNull(constants$706.RpcRaiseException$MH,"RpcRaiseException");
    }
    public static void RpcRaiseException ( int exception) {
        var mh$ = RpcRaiseException$MH();
        try {
            mh$.invokeExact(exception);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcTestCancel$MH() {
        return RuntimeHelper.requireNonNull(constants$706.RpcTestCancel$MH,"RpcTestCancel");
    }
    public static int RpcTestCancel () {
        var mh$ = RpcTestCancel$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerTestCancel$MH() {
        return RuntimeHelper.requireNonNull(constants$706.RpcServerTestCancel$MH,"RpcServerTestCancel");
    }
    public static int RpcServerTestCancel ( Addressable BindingHandle) {
        var mh$ = RpcServerTestCancel$MH();
        try {
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcCancelThread$MH() {
        return RuntimeHelper.requireNonNull(constants$706.RpcCancelThread$MH,"RpcCancelThread");
    }
    public static int RpcCancelThread ( Addressable Thread) {
        var mh$ = RpcCancelThread$MH();
        try {
            return (int)mh$.invokeExact(Thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcCancelThreadEx$MH() {
        return RuntimeHelper.requireNonNull(constants$706.RpcCancelThreadEx$MH,"RpcCancelThreadEx");
    }
    public static int RpcCancelThreadEx ( Addressable Thread,  int Timeout) {
        var mh$ = RpcCancelThreadEx$MH();
        try {
            return (int)mh$.invokeExact(Thread, Timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UuidCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$706.UuidCreate$MH,"UuidCreate");
    }
    public static int UuidCreate ( Addressable Uuid) {
        var mh$ = UuidCreate$MH();
        try {
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UuidCreateSequential$MH() {
        return RuntimeHelper.requireNonNull(constants$707.UuidCreateSequential$MH,"UuidCreateSequential");
    }
    public static int UuidCreateSequential ( Addressable Uuid) {
        var mh$ = UuidCreateSequential$MH();
        try {
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UuidToStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$707.UuidToStringA$MH,"UuidToStringA");
    }
    public static int UuidToStringA ( Addressable Uuid,  Addressable StringUuid) {
        var mh$ = UuidToStringA$MH();
        try {
            return (int)mh$.invokeExact(Uuid, StringUuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UuidFromStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$707.UuidFromStringA$MH,"UuidFromStringA");
    }
    public static int UuidFromStringA ( Addressable StringUuid,  Addressable Uuid) {
        var mh$ = UuidFromStringA$MH();
        try {
            return (int)mh$.invokeExact(StringUuid, Uuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UuidToStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$707.UuidToStringW$MH,"UuidToStringW");
    }
    public static int UuidToStringW ( Addressable Uuid,  Addressable StringUuid) {
        var mh$ = UuidToStringW$MH();
        try {
            return (int)mh$.invokeExact(Uuid, StringUuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UuidFromStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$707.UuidFromStringW$MH,"UuidFromStringW");
    }
    public static int UuidFromStringW ( Addressable StringUuid,  Addressable Uuid) {
        var mh$ = UuidFromStringW$MH();
        try {
            return (int)mh$.invokeExact(StringUuid, Uuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UuidCompare$MH() {
        return RuntimeHelper.requireNonNull(constants$707.UuidCompare$MH,"UuidCompare");
    }
    public static int UuidCompare ( Addressable Uuid1,  Addressable Uuid2,  Addressable Status) {
        var mh$ = UuidCompare$MH();
        try {
            return (int)mh$.invokeExact(Uuid1, Uuid2, Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UuidCreateNil$MH() {
        return RuntimeHelper.requireNonNull(constants$708.UuidCreateNil$MH,"UuidCreateNil");
    }
    public static int UuidCreateNil ( Addressable NilUuid) {
        var mh$ = UuidCreateNil$MH();
        try {
            return (int)mh$.invokeExact(NilUuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UuidEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$708.UuidEqual$MH,"UuidEqual");
    }
    public static int UuidEqual ( Addressable Uuid1,  Addressable Uuid2,  Addressable Status) {
        var mh$ = UuidEqual$MH();
        try {
            return (int)mh$.invokeExact(Uuid1, Uuid2, Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UuidHash$MH() {
        return RuntimeHelper.requireNonNull(constants$708.UuidHash$MH,"UuidHash");
    }
    public static short UuidHash ( Addressable Uuid,  Addressable Status) {
        var mh$ = UuidHash$MH();
        try {
            return (short)mh$.invokeExact(Uuid, Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UuidIsNil$MH() {
        return RuntimeHelper.requireNonNull(constants$708.UuidIsNil$MH,"UuidIsNil");
    }
    public static int UuidIsNil ( Addressable Uuid,  Addressable Status) {
        var mh$ = UuidIsNil$MH();
        try {
            return (int)mh$.invokeExact(Uuid, Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcEpRegisterNoReplaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$708.RpcEpRegisterNoReplaceA$MH,"RpcEpRegisterNoReplaceA");
    }
    public static int RpcEpRegisterNoReplaceA ( Addressable IfSpec,  Addressable BindingVector,  Addressable UuidVector,  Addressable Annotation) {
        var mh$ = RpcEpRegisterNoReplaceA$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcEpRegisterNoReplaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$708.RpcEpRegisterNoReplaceW$MH,"RpcEpRegisterNoReplaceW");
    }
    public static int RpcEpRegisterNoReplaceW ( Addressable IfSpec,  Addressable BindingVector,  Addressable UuidVector,  Addressable Annotation) {
        var mh$ = RpcEpRegisterNoReplaceW$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcEpRegisterA$MH() {
        return RuntimeHelper.requireNonNull(constants$709.RpcEpRegisterA$MH,"RpcEpRegisterA");
    }
    public static int RpcEpRegisterA ( Addressable IfSpec,  Addressable BindingVector,  Addressable UuidVector,  Addressable Annotation) {
        var mh$ = RpcEpRegisterA$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcEpRegisterW$MH() {
        return RuntimeHelper.requireNonNull(constants$709.RpcEpRegisterW$MH,"RpcEpRegisterW");
    }
    public static int RpcEpRegisterW ( Addressable IfSpec,  Addressable BindingVector,  Addressable UuidVector,  Addressable Annotation) {
        var mh$ = RpcEpRegisterW$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcEpUnregister$MH() {
        return RuntimeHelper.requireNonNull(constants$709.RpcEpUnregister$MH,"RpcEpUnregister");
    }
    public static int RpcEpUnregister ( Addressable IfSpec,  Addressable BindingVector,  Addressable UuidVector) {
        var mh$ = RpcEpUnregister$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DceErrorInqTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$709.DceErrorInqTextA$MH,"DceErrorInqTextA");
    }
    public static int DceErrorInqTextA ( int RpcStatus,  Addressable ErrorText) {
        var mh$ = DceErrorInqTextA$MH();
        try {
            return (int)mh$.invokeExact(RpcStatus, ErrorText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DceErrorInqTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$709.DceErrorInqTextW$MH,"DceErrorInqTextW");
    }
    public static int DceErrorInqTextW ( int RpcStatus,  Addressable ErrorText) {
        var mh$ = DceErrorInqTextW$MH();
        try {
            return (int)mh$.invokeExact(RpcStatus, ErrorText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress RPC_EP_INQ_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RpcMgmtEpEltInqBegin$MH() {
        return RuntimeHelper.requireNonNull(constants$709.RpcMgmtEpEltInqBegin$MH,"RpcMgmtEpEltInqBegin");
    }
    public static int RpcMgmtEpEltInqBegin ( Addressable EpBinding,  int InquiryType,  Addressable IfId,  int VersOption,  Addressable ObjectUuid,  Addressable InquiryContext) {
        var mh$ = RpcMgmtEpEltInqBegin$MH();
        try {
            return (int)mh$.invokeExact(EpBinding, InquiryType, IfId, VersOption, ObjectUuid, InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtEpEltInqDone$MH() {
        return RuntimeHelper.requireNonNull(constants$710.RpcMgmtEpEltInqDone$MH,"RpcMgmtEpEltInqDone");
    }
    public static int RpcMgmtEpEltInqDone ( Addressable InquiryContext) {
        var mh$ = RpcMgmtEpEltInqDone$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtEpEltInqNextA$MH() {
        return RuntimeHelper.requireNonNull(constants$710.RpcMgmtEpEltInqNextA$MH,"RpcMgmtEpEltInqNextA");
    }
    public static int RpcMgmtEpEltInqNextA ( Addressable InquiryContext,  Addressable IfId,  Addressable Binding,  Addressable ObjectUuid,  Addressable Annotation) {
        var mh$ = RpcMgmtEpEltInqNextA$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext, IfId, Binding, ObjectUuid, Annotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtEpEltInqNextW$MH() {
        return RuntimeHelper.requireNonNull(constants$710.RpcMgmtEpEltInqNextW$MH,"RpcMgmtEpEltInqNextW");
    }
    public static int RpcMgmtEpEltInqNextW ( Addressable InquiryContext,  Addressable IfId,  Addressable Binding,  Addressable ObjectUuid,  Addressable Annotation) {
        var mh$ = RpcMgmtEpEltInqNextW$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext, IfId, Binding, ObjectUuid, Annotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtEpUnregister$MH() {
        return RuntimeHelper.requireNonNull(constants$710.RpcMgmtEpUnregister$MH,"RpcMgmtEpUnregister");
    }
    public static int RpcMgmtEpUnregister ( Addressable EpBinding,  Addressable IfId,  Addressable Binding,  Addressable ObjectUuid) {
        var mh$ = RpcMgmtEpUnregister$MH();
        try {
            return (int)mh$.invokeExact(EpBinding, IfId, Binding, ObjectUuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtSetAuthorizationFn$MH() {
        return RuntimeHelper.requireNonNull(constants$711.RpcMgmtSetAuthorizationFn$MH,"RpcMgmtSetAuthorizationFn");
    }
    public static int RpcMgmtSetAuthorizationFn ( Addressable AuthorizationFn) {
        var mh$ = RpcMgmtSetAuthorizationFn$MH();
        try {
            return (int)mh$.invokeExact(AuthorizationFn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$711.RpcExceptionFilter$MH,"RpcExceptionFilter");
    }
    public static int RpcExceptionFilter ( int ExceptionCode) {
        var mh$ = RpcExceptionFilter$MH();
        try {
            return (int)mh$.invokeExact(ExceptionCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress RPC_INTERFACE_GROUP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_INTERFACE_GROUP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_ENDPOINT_TEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_ENDPOINT_TEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_INTERFACE_TEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_INTERFACE_TEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RpcServerInterfaceGroupCreateW$MH() {
        return RuntimeHelper.requireNonNull(constants$712.RpcServerInterfaceGroupCreateW$MH,"RpcServerInterfaceGroupCreateW");
    }
    public static int RpcServerInterfaceGroupCreateW ( Addressable Interfaces,  int NumIfs,  Addressable Endpoints,  int NumEndpoints,  int IdlePeriod,  Addressable IdleCallbackFn,  Addressable IdleCallbackContext,  Addressable IfGroup) {
        var mh$ = RpcServerInterfaceGroupCreateW$MH();
        try {
            return (int)mh$.invokeExact(Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInterfaceGroupCreateA$MH() {
        return RuntimeHelper.requireNonNull(constants$712.RpcServerInterfaceGroupCreateA$MH,"RpcServerInterfaceGroupCreateA");
    }
    public static int RpcServerInterfaceGroupCreateA ( Addressable Interfaces,  int NumIfs,  Addressable Endpoints,  int NumEndpoints,  int IdlePeriod,  Addressable IdleCallbackFn,  Addressable IdleCallbackContext,  Addressable IfGroup) {
        var mh$ = RpcServerInterfaceGroupCreateA$MH();
        try {
            return (int)mh$.invokeExact(Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInterfaceGroupClose$MH() {
        return RuntimeHelper.requireNonNull(constants$712.RpcServerInterfaceGroupClose$MH,"RpcServerInterfaceGroupClose");
    }
    public static int RpcServerInterfaceGroupClose ( Addressable IfGroup) {
        var mh$ = RpcServerInterfaceGroupClose$MH();
        try {
            return (int)mh$.invokeExact(IfGroup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInterfaceGroupActivate$MH() {
        return RuntimeHelper.requireNonNull(constants$712.RpcServerInterfaceGroupActivate$MH,"RpcServerInterfaceGroupActivate");
    }
    public static int RpcServerInterfaceGroupActivate ( Addressable IfGroup) {
        var mh$ = RpcServerInterfaceGroupActivate$MH();
        try {
            return (int)mh$.invokeExact(IfGroup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInterfaceGroupDeactivate$MH() {
        return RuntimeHelper.requireNonNull(constants$713.RpcServerInterfaceGroupDeactivate$MH,"RpcServerInterfaceGroupDeactivate");
    }
    public static int RpcServerInterfaceGroupDeactivate ( Addressable IfGroup,  int ForceDeactivation) {
        var mh$ = RpcServerInterfaceGroupDeactivate$MH();
        try {
            return (int)mh$.invokeExact(IfGroup, ForceDeactivation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInterfaceGroupInqBindings$MH() {
        return RuntimeHelper.requireNonNull(constants$713.RpcServerInterfaceGroupInqBindings$MH,"RpcServerInterfaceGroupInqBindings");
    }
    public static int RpcServerInterfaceGroupInqBindings ( Addressable IfGroup,  Addressable BindingVector) {
        var mh$ = RpcServerInterfaceGroupInqBindings$MH();
        try {
            return (int)mh$.invokeExact(IfGroup, BindingVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRPC_SYNTAX_IDENTIFIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_MESSAGE = Constants$root.C_POINTER$LAYOUT;
    public static int PROTOCOL_NOT_LOADED() {
        return (int)1L;
    }
    public static int PROTOCOL_LOADED() {
        return (int)2L;
    }
    public static int PROTOCOL_ADDRESS_CHANGE() {
        return (int)3L;
    }
    public static OfAddress PRPC_DISPATCH_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_PROTSEQ_ENDPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_SERVER_INTERFACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_CLIENT_INTERFACE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle I_RpcNegotiateTransferSyntax$MH() {
        return RuntimeHelper.requireNonNull(constants$714.I_RpcNegotiateTransferSyntax$MH,"I_RpcNegotiateTransferSyntax");
    }
    public static int I_RpcNegotiateTransferSyntax ( Addressable Message) {
        var mh$ = I_RpcNegotiateTransferSyntax$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$714.I_RpcGetBuffer$MH,"I_RpcGetBuffer");
    }
    public static int I_RpcGetBuffer ( Addressable Message) {
        var mh$ = I_RpcGetBuffer$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcGetBufferWithObject$MH() {
        return RuntimeHelper.requireNonNull(constants$714.I_RpcGetBufferWithObject$MH,"I_RpcGetBufferWithObject");
    }
    public static int I_RpcGetBufferWithObject ( Addressable Message,  Addressable ObjectUuid) {
        var mh$ = I_RpcGetBufferWithObject$MH();
        try {
            return (int)mh$.invokeExact(Message, ObjectUuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$714.I_RpcSendReceive$MH,"I_RpcSendReceive");
    }
    public static int I_RpcSendReceive ( Addressable Message) {
        var mh$ = I_RpcSendReceive$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$715.I_RpcFreeBuffer$MH,"I_RpcFreeBuffer");
    }
    public static int I_RpcFreeBuffer ( Addressable Message) {
        var mh$ = I_RpcFreeBuffer$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcSend$MH() {
        return RuntimeHelper.requireNonNull(constants$715.I_RpcSend$MH,"I_RpcSend");
    }
    public static int I_RpcSend ( Addressable Message) {
        var mh$ = I_RpcSend$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$715.I_RpcReceive$MH,"I_RpcReceive");
    }
    public static int I_RpcReceive ( Addressable Message,  int Size) {
        var mh$ = I_RpcReceive$MH();
        try {
            return (int)mh$.invokeExact(Message, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcFreePipeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$715.I_RpcFreePipeBuffer$MH,"I_RpcFreePipeBuffer");
    }
    public static int I_RpcFreePipeBuffer ( Addressable Message) {
        var mh$ = I_RpcFreePipeBuffer$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcReallocPipeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$715.I_RpcReallocPipeBuffer$MH,"I_RpcReallocPipeBuffer");
    }
    public static int I_RpcReallocPipeBuffer ( Addressable Message,  int NewSize) {
        var mh$ = I_RpcReallocPipeBuffer$MH();
        try {
            return (int)mh$.invokeExact(Message, NewSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress I_RPC_MUTEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle I_RpcRequestMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$715.I_RpcRequestMutex$MH,"I_RpcRequestMutex");
    }
    public static void I_RpcRequestMutex ( Addressable Mutex) {
        var mh$ = I_RpcRequestMutex$MH();
        try {
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcClearMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$716.I_RpcClearMutex$MH,"I_RpcClearMutex");
    }
    public static void I_RpcClearMutex ( Addressable Mutex) {
        var mh$ = I_RpcClearMutex$MH();
        try {
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcDeleteMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$716.I_RpcDeleteMutex$MH,"I_RpcDeleteMutex");
    }
    public static void I_RpcDeleteMutex ( Addressable Mutex) {
        var mh$ = I_RpcDeleteMutex$MH();
        try {
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$716.I_RpcAllocate$MH,"I_RpcAllocate");
    }
    public static MemoryAddress I_RpcAllocate ( int Size) {
        var mh$ = I_RpcAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcFree$MH() {
        return RuntimeHelper.requireNonNull(constants$716.I_RpcFree$MH,"I_RpcFree");
    }
    public static void I_RpcFree ( Addressable Object) {
        var mh$ = I_RpcFree$MH();
        try {
            mh$.invokeExact(Object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcFreeSystemHandleCollection$MH() {
        return RuntimeHelper.requireNonNull(constants$716.I_RpcFreeSystemHandleCollection$MH,"I_RpcFreeSystemHandleCollection");
    }
    public static int I_RpcFreeSystemHandleCollection ( Addressable CallObj,  int FreeFlags) {
        var mh$ = I_RpcFreeSystemHandleCollection$MH();
        try {
            return (int)mh$.invokeExact(CallObj, FreeFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcSetSystemHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$716.I_RpcSetSystemHandle$MH,"I_RpcSetSystemHandle");
    }
    public static int I_RpcSetSystemHandle ( Addressable Handle,  byte Type,  int AccessMask,  Addressable CallObj,  Addressable HandleIndex) {
        var mh$ = I_RpcSetSystemHandle$MH();
        try {
            return (int)mh$.invokeExact(Handle, Type, AccessMask, CallObj, HandleIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcGetSystemHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$717.I_RpcGetSystemHandle$MH,"I_RpcGetSystemHandle");
    }
    public static int I_RpcGetSystemHandle ( Addressable pMemory,  byte Type,  int AccessMask,  int HandleIndex,  Addressable CallObj) {
        var mh$ = I_RpcGetSystemHandle$MH();
        try {
            return (int)mh$.invokeExact(pMemory, Type, AccessMask, HandleIndex, CallObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcFreeSystemHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$717.I_RpcFreeSystemHandle$MH,"I_RpcFreeSystemHandle");
    }
    public static void I_RpcFreeSystemHandle ( byte Type,  Addressable Handle) {
        var mh$ = I_RpcFreeSystemHandle$MH();
        try {
            mh$.invokeExact(Type, Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcPauseExecution$MH() {
        return RuntimeHelper.requireNonNull(constants$717.I_RpcPauseExecution$MH,"I_RpcPauseExecution");
    }
    public static void I_RpcPauseExecution ( int Milliseconds) {
        var mh$ = I_RpcPauseExecution$MH();
        try {
            mh$.invokeExact(Milliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcGetExtendedError$MH() {
        return RuntimeHelper.requireNonNull(constants$717.I_RpcGetExtendedError$MH,"I_RpcGetExtendedError");
    }
    public static int I_RpcGetExtendedError () {
        var mh$ = I_RpcGetExtendedError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int MarshalDirectionMarshal() {
        return (int)0L;
    }
    public static int MarshalDirectionUnmarshal() {
        return (int)1L;
    }
    public static MethodHandle I_RpcSystemHandleTypeSpecificWork$MH() {
        return RuntimeHelper.requireNonNull(constants$717.I_RpcSystemHandleTypeSpecificWork$MH,"I_RpcSystemHandleTypeSpecificWork");
    }
    public static int I_RpcSystemHandleTypeSpecificWork ( Addressable Handle,  byte ActualType,  byte IdlType,  int MarshalDirection) {
        var mh$ = I_RpcSystemHandleTypeSpecificWork$MH();
        try {
            return (int)mh$.invokeExact(Handle, ActualType, IdlType, MarshalDirection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcMonitorAssociation$MH() {
        return RuntimeHelper.requireNonNull(constants$718.I_RpcMonitorAssociation$MH,"I_RpcMonitorAssociation");
    }
    public static int I_RpcMonitorAssociation ( Addressable Handle,  Addressable RundownRoutine,  Addressable Context) {
        var mh$ = I_RpcMonitorAssociation$MH();
        try {
            return (int)mh$.invokeExact(Handle, RundownRoutine, Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcStopMonitorAssociation$MH() {
        return RuntimeHelper.requireNonNull(constants$718.I_RpcStopMonitorAssociation$MH,"I_RpcStopMonitorAssociation");
    }
    public static int I_RpcStopMonitorAssociation ( Addressable Handle) {
        var mh$ = I_RpcStopMonitorAssociation$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcGetCurrentCallHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$718.I_RpcGetCurrentCallHandle$MH,"I_RpcGetCurrentCallHandle");
    }
    public static MemoryAddress I_RpcGetCurrentCallHandle () {
        var mh$ = I_RpcGetCurrentCallHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcGetAssociationContext$MH() {
        return RuntimeHelper.requireNonNull(constants$718.I_RpcGetAssociationContext$MH,"I_RpcGetAssociationContext");
    }
    public static int I_RpcGetAssociationContext ( Addressable BindingHandle,  Addressable AssociationContext) {
        var mh$ = I_RpcGetAssociationContext$MH();
        try {
            return (int)mh$.invokeExact(BindingHandle, AssociationContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcGetServerContextList$MH() {
        return RuntimeHelper.requireNonNull(constants$718.I_RpcGetServerContextList$MH,"I_RpcGetServerContextList");
    }
    public static MemoryAddress I_RpcGetServerContextList ( Addressable BindingHandle) {
        var mh$ = I_RpcGetServerContextList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcSetServerContextList$MH() {
        return RuntimeHelper.requireNonNull(constants$719.I_RpcSetServerContextList$MH,"I_RpcSetServerContextList");
    }
    public static void I_RpcSetServerContextList ( Addressable BindingHandle,  Addressable ServerContextList) {
        var mh$ = I_RpcSetServerContextList$MH();
        try {
            mh$.invokeExact(BindingHandle, ServerContextList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsInterfaceExported$MH() {
        return RuntimeHelper.requireNonNull(constants$719.I_RpcNsInterfaceExported$MH,"I_RpcNsInterfaceExported");
    }
    public static int I_RpcNsInterfaceExported ( int EntryNameSyntax,  Addressable EntryName,  Addressable RpcInterfaceInformation) {
        var mh$ = I_RpcNsInterfaceExported$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, RpcInterfaceInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsInterfaceUnexported$MH() {
        return RuntimeHelper.requireNonNull(constants$719.I_RpcNsInterfaceUnexported$MH,"I_RpcNsInterfaceUnexported");
    }
    public static int I_RpcNsInterfaceUnexported ( int EntryNameSyntax,  Addressable EntryName,  Addressable RpcInterfaceInformation) {
        var mh$ = I_RpcNsInterfaceUnexported$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, RpcInterfaceInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingToStaticStringBindingW$MH() {
        return RuntimeHelper.requireNonNull(constants$719.I_RpcBindingToStaticStringBindingW$MH,"I_RpcBindingToStaticStringBindingW");
    }
    public static int I_RpcBindingToStaticStringBindingW ( Addressable Binding,  Addressable StringBinding) {
        var mh$ = I_RpcBindingToStaticStringBindingW$MH();
        try {
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingInqSecurityContext$MH() {
        return RuntimeHelper.requireNonNull(constants$719.I_RpcBindingInqSecurityContext$MH,"I_RpcBindingInqSecurityContext");
    }
    public static int I_RpcBindingInqSecurityContext ( Addressable Binding,  Addressable SecurityContextHandle) {
        var mh$ = I_RpcBindingInqSecurityContext$MH();
        try {
            return (int)mh$.invokeExact(Binding, SecurityContextHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRPC_SEC_CONTEXT_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle I_RpcBindingInqSecurityContextKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$719.I_RpcBindingInqSecurityContextKeyInfo$MH,"I_RpcBindingInqSecurityContextKeyInfo");
    }
    public static int I_RpcBindingInqSecurityContextKeyInfo ( Addressable Binding,  Addressable KeyInfo) {
        var mh$ = I_RpcBindingInqSecurityContextKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(Binding, KeyInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingInqWireIdForSnego$MH() {
        return RuntimeHelper.requireNonNull(constants$720.I_RpcBindingInqWireIdForSnego$MH,"I_RpcBindingInqWireIdForSnego");
    }
    public static int I_RpcBindingInqWireIdForSnego ( Addressable Binding,  Addressable WireId) {
        var mh$ = I_RpcBindingInqWireIdForSnego$MH();
        try {
            return (int)mh$.invokeExact(Binding, WireId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingInqMarshalledTargetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$720.I_RpcBindingInqMarshalledTargetInfo$MH,"I_RpcBindingInqMarshalledTargetInfo");
    }
    public static int I_RpcBindingInqMarshalledTargetInfo ( Addressable Binding,  Addressable MarshalledTargetInfoSize,  Addressable MarshalledTargetInfo) {
        var mh$ = I_RpcBindingInqMarshalledTargetInfo$MH();
        try {
            return (int)mh$.invokeExact(Binding, MarshalledTargetInfoSize, MarshalledTargetInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingInqLocalClientPID$MH() {
        return RuntimeHelper.requireNonNull(constants$720.I_RpcBindingInqLocalClientPID$MH,"I_RpcBindingInqLocalClientPID");
    }
    public static int I_RpcBindingInqLocalClientPID ( Addressable Binding,  Addressable Pid) {
        var mh$ = I_RpcBindingInqLocalClientPID$MH();
        try {
            return (int)mh$.invokeExact(Binding, Pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingHandleToAsyncHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$720.I_RpcBindingHandleToAsyncHandle$MH,"I_RpcBindingHandleToAsyncHandle");
    }
    public static int I_RpcBindingHandleToAsyncHandle ( Addressable Binding,  Addressable AsyncHandle) {
        var mh$ = I_RpcBindingHandleToAsyncHandle$MH();
        try {
            return (int)mh$.invokeExact(Binding, AsyncHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsBindingSetEntryNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$720.I_RpcNsBindingSetEntryNameW$MH,"I_RpcNsBindingSetEntryNameW");
    }
    public static int I_RpcNsBindingSetEntryNameW ( Addressable Binding,  int EntryNameSyntax,  Addressable EntryName) {
        var mh$ = I_RpcNsBindingSetEntryNameW$MH();
        try {
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsBindingSetEntryNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$720.I_RpcNsBindingSetEntryNameA$MH,"I_RpcNsBindingSetEntryNameA");
    }
    public static int I_RpcNsBindingSetEntryNameA ( Addressable Binding,  int EntryNameSyntax,  Addressable EntryName) {
        var mh$ = I_RpcNsBindingSetEntryNameA$MH();
        try {
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerUseProtseqEp2A$MH() {
        return RuntimeHelper.requireNonNull(constants$721.I_RpcServerUseProtseqEp2A$MH,"I_RpcServerUseProtseqEp2A");
    }
    public static int I_RpcServerUseProtseqEp2A ( Addressable NetworkAddress,  Addressable Protseq,  int MaxCalls,  Addressable Endpoint,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = I_RpcServerUseProtseqEp2A$MH();
        try {
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerUseProtseqEp2W$MH() {
        return RuntimeHelper.requireNonNull(constants$721.I_RpcServerUseProtseqEp2W$MH,"I_RpcServerUseProtseqEp2W");
    }
    public static int I_RpcServerUseProtseqEp2W ( Addressable NetworkAddress,  Addressable Protseq,  int MaxCalls,  Addressable Endpoint,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = I_RpcServerUseProtseqEp2W$MH();
        try {
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerUseProtseq2W$MH() {
        return RuntimeHelper.requireNonNull(constants$721.I_RpcServerUseProtseq2W$MH,"I_RpcServerUseProtseq2W");
    }
    public static int I_RpcServerUseProtseq2W ( Addressable NetworkAddress,  Addressable Protseq,  int MaxCalls,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = I_RpcServerUseProtseq2W$MH();
        try {
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerUseProtseq2A$MH() {
        return RuntimeHelper.requireNonNull(constants$721.I_RpcServerUseProtseq2A$MH,"I_RpcServerUseProtseq2A");
    }
    public static int I_RpcServerUseProtseq2A ( Addressable NetworkAddress,  Addressable Protseq,  int MaxCalls,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = I_RpcServerUseProtseq2A$MH();
        try {
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerStartService$MH() {
        return RuntimeHelper.requireNonNull(constants$721.I_RpcServerStartService$MH,"I_RpcServerStartService");
    }
    public static int I_RpcServerStartService ( Addressable Protseq,  Addressable Endpoint,  Addressable IfSpec) {
        var mh$ = I_RpcServerStartService$MH();
        try {
            return (int)mh$.invokeExact(Protseq, Endpoint, IfSpec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingInqDynamicEndpointW$MH() {
        return RuntimeHelper.requireNonNull(constants$721.I_RpcBindingInqDynamicEndpointW$MH,"I_RpcBindingInqDynamicEndpointW");
    }
    public static int I_RpcBindingInqDynamicEndpointW ( Addressable Binding,  Addressable DynamicEndpoint) {
        var mh$ = I_RpcBindingInqDynamicEndpointW$MH();
        try {
            return (int)mh$.invokeExact(Binding, DynamicEndpoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingInqDynamicEndpointA$MH() {
        return RuntimeHelper.requireNonNull(constants$722.I_RpcBindingInqDynamicEndpointA$MH,"I_RpcBindingInqDynamicEndpointA");
    }
    public static int I_RpcBindingInqDynamicEndpointA ( Addressable Binding,  Addressable DynamicEndpoint) {
        var mh$ = I_RpcBindingInqDynamicEndpointA$MH();
        try {
            return (int)mh$.invokeExact(Binding, DynamicEndpoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerCheckClientRestriction$MH() {
        return RuntimeHelper.requireNonNull(constants$722.I_RpcServerCheckClientRestriction$MH,"I_RpcServerCheckClientRestriction");
    }
    public static int I_RpcServerCheckClientRestriction ( Addressable Context) {
        var mh$ = I_RpcServerCheckClientRestriction$MH();
        try {
            return (int)mh$.invokeExact(Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingInqTransportType$MH() {
        return RuntimeHelper.requireNonNull(constants$722.I_RpcBindingInqTransportType$MH,"I_RpcBindingInqTransportType");
    }
    public static int I_RpcBindingInqTransportType ( Addressable Binding,  Addressable Type) {
        var mh$ = I_RpcBindingInqTransportType$MH();
        try {
            return (int)mh$.invokeExact(Binding, Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcIfInqTransferSyntaxes$MH() {
        return RuntimeHelper.requireNonNull(constants$722.I_RpcIfInqTransferSyntaxes$MH,"I_RpcIfInqTransferSyntaxes");
    }
    public static int I_RpcIfInqTransferSyntaxes ( Addressable RpcIfHandle,  Addressable TransferSyntaxes,  int TransferSyntaxSize,  Addressable TransferSyntaxCount) {
        var mh$ = I_RpcIfInqTransferSyntaxes$MH();
        try {
            return (int)mh$.invokeExact(RpcIfHandle, TransferSyntaxes, TransferSyntaxSize, TransferSyntaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_UuidCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$722.I_UuidCreate$MH,"I_UuidCreate");
    }
    public static int I_UuidCreate ( Addressable Uuid) {
        var mh$ = I_UuidCreate$MH();
        try {
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcUninitializeNdrOle$MH() {
        return RuntimeHelper.requireNonNull(constants$722.I_RpcUninitializeNdrOle$MH,"I_RpcUninitializeNdrOle");
    }
    public static void I_RpcUninitializeNdrOle () {
        var mh$ = I_RpcUninitializeNdrOle$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$723.I_RpcBindingCopy$MH,"I_RpcBindingCopy");
    }
    public static int I_RpcBindingCopy ( Addressable SourceBinding,  Addressable DestinationBinding) {
        var mh$ = I_RpcBindingCopy$MH();
        try {
            return (int)mh$.invokeExact(SourceBinding, DestinationBinding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingIsClientLocal$MH() {
        return RuntimeHelper.requireNonNull(constants$723.I_RpcBindingIsClientLocal$MH,"I_RpcBindingIsClientLocal");
    }
    public static int I_RpcBindingIsClientLocal ( Addressable BindingHandle,  Addressable ClientLocalFlag) {
        var mh$ = I_RpcBindingIsClientLocal$MH();
        try {
            return (int)mh$.invokeExact(BindingHandle, ClientLocalFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingInqConnId$MH() {
        return RuntimeHelper.requireNonNull(constants$723.I_RpcBindingInqConnId$MH,"I_RpcBindingInqConnId");
    }
    public static int I_RpcBindingInqConnId ( Addressable Binding,  Addressable ConnId,  Addressable pfFirstCall) {
        var mh$ = I_RpcBindingInqConnId$MH();
        try {
            return (int)mh$.invokeExact(Binding, ConnId, pfFirstCall);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingCreateNP$MH() {
        return RuntimeHelper.requireNonNull(constants$723.I_RpcBindingCreateNP$MH,"I_RpcBindingCreateNP");
    }
    public static int I_RpcBindingCreateNP ( Addressable ServerName,  Addressable ServiceName,  Addressable NetworkOptions,  Addressable Binding) {
        var mh$ = I_RpcBindingCreateNP$MH();
        try {
            return (int)mh$.invokeExact(ServerName, ServiceName, NetworkOptions, Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcSsDontSerializeContext$MH() {
        return RuntimeHelper.requireNonNull(constants$723.I_RpcSsDontSerializeContext$MH,"I_RpcSsDontSerializeContext");
    }
    public static void I_RpcSsDontSerializeContext () {
        var mh$ = I_RpcSsDontSerializeContext$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcLaunchDatagramReceiveThread$MH() {
        return RuntimeHelper.requireNonNull(constants$723.I_RpcLaunchDatagramReceiveThread$MH,"I_RpcLaunchDatagramReceiveThread");
    }
    public static int I_RpcLaunchDatagramReceiveThread ( Addressable pAddress) {
        var mh$ = I_RpcLaunchDatagramReceiveThread$MH();
        try {
            return (int)mh$.invokeExact(pAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerRegisterForwardFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$724.I_RpcServerRegisterForwardFunction$MH,"I_RpcServerRegisterForwardFunction");
    }
    public static int I_RpcServerRegisterForwardFunction ( Addressable pForwardFunction) {
        var mh$ = I_RpcServerRegisterForwardFunction$MH();
        try {
            return (int)mh$.invokeExact(pForwardFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerInqAddressChangeFn$MH() {
        return RuntimeHelper.requireNonNull(constants$724.I_RpcServerInqAddressChangeFn$MH,"I_RpcServerInqAddressChangeFn");
    }
    public static MemoryAddress I_RpcServerInqAddressChangeFn () {
        var mh$ = I_RpcServerInqAddressChangeFn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerSetAddressChangeFn$MH() {
        return RuntimeHelper.requireNonNull(constants$725.I_RpcServerSetAddressChangeFn$MH,"I_RpcServerSetAddressChangeFn");
    }
    public static int I_RpcServerSetAddressChangeFn ( Addressable pAddressChangeFn) {
        var mh$ = I_RpcServerSetAddressChangeFn$MH();
        try {
            return (int)mh$.invokeExact(pAddressChangeFn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerInqLocalConnAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$725.I_RpcServerInqLocalConnAddress$MH,"I_RpcServerInqLocalConnAddress");
    }
    public static int I_RpcServerInqLocalConnAddress ( Addressable Binding,  Addressable Buffer,  Addressable BufferSize,  Addressable AddressFormat) {
        var mh$ = I_RpcServerInqLocalConnAddress$MH();
        try {
            return (int)mh$.invokeExact(Binding, Buffer, BufferSize, AddressFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerInqRemoteConnAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$725.I_RpcServerInqRemoteConnAddress$MH,"I_RpcServerInqRemoteConnAddress");
    }
    public static int I_RpcServerInqRemoteConnAddress ( Addressable Binding,  Addressable Buffer,  Addressable BufferSize,  Addressable AddressFormat) {
        var mh$ = I_RpcServerInqRemoteConnAddress$MH();
        try {
            return (int)mh$.invokeExact(Binding, Buffer, BufferSize, AddressFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcSessionStrictContextHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$725.I_RpcSessionStrictContextHandle$MH,"I_RpcSessionStrictContextHandle");
    }
    public static void I_RpcSessionStrictContextHandle () {
        var mh$ = I_RpcSessionStrictContextHandle$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcTurnOnEEInfoPropagation$MH() {
        return RuntimeHelper.requireNonNull(constants$725.I_RpcTurnOnEEInfoPropagation$MH,"I_RpcTurnOnEEInfoPropagation");
    }
    public static int I_RpcTurnOnEEInfoPropagation () {
        var mh$ = I_RpcTurnOnEEInfoPropagation$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcConnectionInqSockBuffSize$MH() {
        return RuntimeHelper.requireNonNull(constants$725.I_RpcConnectionInqSockBuffSize$MH,"I_RpcConnectionInqSockBuffSize");
    }
    public static int I_RpcConnectionInqSockBuffSize ( Addressable RecvBuffSize,  Addressable SendBuffSize) {
        var mh$ = I_RpcConnectionInqSockBuffSize$MH();
        try {
            return (int)mh$.invokeExact(RecvBuffSize, SendBuffSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcConnectionSetSockBuffSize$MH() {
        return RuntimeHelper.requireNonNull(constants$726.I_RpcConnectionSetSockBuffSize$MH,"I_RpcConnectionSetSockBuffSize");
    }
    public static int I_RpcConnectionSetSockBuffSize ( int RecvBuffSize,  int SendBuffSize) {
        var mh$ = I_RpcConnectionSetSockBuffSize$MH();
        try {
            return (int)mh$.invokeExact(RecvBuffSize, SendBuffSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerStartListening$MH() {
        return RuntimeHelper.requireNonNull(constants$726.I_RpcServerStartListening$MH,"I_RpcServerStartListening");
    }
    public static int I_RpcServerStartListening ( Addressable hWnd) {
        var mh$ = I_RpcServerStartListening$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerStopListening$MH() {
        return RuntimeHelper.requireNonNull(constants$727.I_RpcServerStopListening$MH,"I_RpcServerStopListening");
    }
    public static int I_RpcServerStopListening () {
        var mh$ = I_RpcServerStopListening$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingSetAsync$MH() {
        return RuntimeHelper.requireNonNull(constants$727.I_RpcBindingSetAsync$MH,"I_RpcBindingSetAsync");
    }
    public static int I_RpcBindingSetAsync ( Addressable Binding,  Addressable BlockingFn,  int ServerTid) {
        var mh$ = I_RpcBindingSetAsync$MH();
        try {
            return (int)mh$.invokeExact(Binding, BlockingFn, ServerTid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcSetThreadParams$MH() {
        return RuntimeHelper.requireNonNull(constants$727.I_RpcSetThreadParams$MH,"I_RpcSetThreadParams");
    }
    public static int I_RpcSetThreadParams ( int fClientFree,  Addressable Context,  Addressable hWndClient) {
        var mh$ = I_RpcSetThreadParams$MH();
        try {
            return (int)mh$.invokeExact(fClientFree, Context, hWndClient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcWindowProc$MH() {
        return RuntimeHelper.requireNonNull(constants$727.I_RpcWindowProc$MH,"I_RpcWindowProc");
    }
    public static int I_RpcWindowProc ( Addressable hWnd,  int Message,  int wParam,  int lParam) {
        var mh$ = I_RpcWindowProc$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Message, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerUnregisterEndpointA$MH() {
        return RuntimeHelper.requireNonNull(constants$728.I_RpcServerUnregisterEndpointA$MH,"I_RpcServerUnregisterEndpointA");
    }
    public static int I_RpcServerUnregisterEndpointA ( Addressable Protseq,  Addressable Endpoint) {
        var mh$ = I_RpcServerUnregisterEndpointA$MH();
        try {
            return (int)mh$.invokeExact(Protseq, Endpoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerUnregisterEndpointW$MH() {
        return RuntimeHelper.requireNonNull(constants$728.I_RpcServerUnregisterEndpointW$MH,"I_RpcServerUnregisterEndpointW");
    }
    public static int I_RpcServerUnregisterEndpointW ( Addressable Protseq,  Addressable Endpoint) {
        var mh$ = I_RpcServerUnregisterEndpointW$MH();
        try {
            return (int)mh$.invokeExact(Protseq, Endpoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerInqTransportType$MH() {
        return RuntimeHelper.requireNonNull(constants$728.I_RpcServerInqTransportType$MH,"I_RpcServerInqTransportType");
    }
    public static int I_RpcServerInqTransportType ( Addressable Type) {
        var mh$ = I_RpcServerInqTransportType$MH();
        try {
            return (int)mh$.invokeExact(Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcMapWin32Status$MH() {
        return RuntimeHelper.requireNonNull(constants$728.I_RpcMapWin32Status$MH,"I_RpcMapWin32Status");
    }
    public static int I_RpcMapWin32Status ( int Status) {
        var mh$ = I_RpcMapWin32Status$MH();
        try {
            return (int)mh$.invokeExact(Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int RpcCurrentUniqueUser() {
        return (int)1L;
    }
    public static int RpcBackEndConnectionAttempts() {
        return (int)2L;
    }
    public static int RpcBackEndConnectionFailed() {
        return (int)3L;
    }
    public static int RpcRequestsPerSecond() {
        return (int)4L;
    }
    public static int RpcIncomingConnections() {
        return (int)5L;
    }
    public static int RpcIncomingBandwidth() {
        return (int)6L;
    }
    public static int RpcOutgoingBandwidth() {
        return (int)7L;
    }
    public static int RpcAttemptedLbsDecisions() {
        return (int)8L;
    }
    public static int RpcFailedLbsDecisions() {
        return (int)9L;
    }
    public static int RpcAttemptedLbsMessages() {
        return (int)10L;
    }
    public static int RpcFailedLbsMessages() {
        return (int)11L;
    }
    public static int RpcLastCounter() {
        return (int)12L;
    }
    public static MethodHandle I_RpcProxyNewConnection$MH() {
        return RuntimeHelper.requireNonNull(constants$731.I_RpcProxyNewConnection$MH,"I_RpcProxyNewConnection");
    }
    public static int I_RpcProxyNewConnection ( int ConnectionType,  Addressable ServerAddress,  Addressable ServerPort,  Addressable MinConnTimeout,  Addressable ConnectionParameter,  Addressable CallOutState,  Addressable ProxyCallbackInterface) {
        var mh$ = I_RpcProxyNewConnection$MH();
        try {
            return (int)mh$.invokeExact(ConnectionType, ServerAddress, ServerPort, MinConnTimeout, ConnectionParameter, CallOutState, ProxyCallbackInterface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcReplyToClientWithStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$731.I_RpcReplyToClientWithStatus$MH,"I_RpcReplyToClientWithStatus");
    }
    public static int I_RpcReplyToClientWithStatus ( Addressable ConnectionParameter,  int RpcStatus) {
        var mh$ = I_RpcReplyToClientWithStatus$MH();
        try {
            return (int)mh$.invokeExact(ConnectionParameter, RpcStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcRecordCalloutFailure$MH() {
        return RuntimeHelper.requireNonNull(constants$732.I_RpcRecordCalloutFailure$MH,"I_RpcRecordCalloutFailure");
    }
    public static void I_RpcRecordCalloutFailure ( int RpcStatus,  Addressable CallOutState,  Addressable DllName) {
        var mh$ = I_RpcRecordCalloutFailure$MH();
        try {
            mh$.invokeExact(RpcStatus, CallOutState, DllName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcMgmtEnableDedicatedThreadPool$MH() {
        return RuntimeHelper.requireNonNull(constants$732.I_RpcMgmtEnableDedicatedThreadPool$MH,"I_RpcMgmtEnableDedicatedThreadPool");
    }
    public static int I_RpcMgmtEnableDedicatedThreadPool () {
        var mh$ = I_RpcMgmtEnableDedicatedThreadPool$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcGetDefaultSD$MH() {
        return RuntimeHelper.requireNonNull(constants$732.I_RpcGetDefaultSD$MH,"I_RpcGetDefaultSD");
    }
    public static int I_RpcGetDefaultSD ( Addressable ppSecurityDescriptor) {
        var mh$ = I_RpcGetDefaultSD$MH();
        try {
            return (int)mh$.invokeExact(ppSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcOpenClientProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$732.I_RpcOpenClientProcess$MH,"I_RpcOpenClientProcess");
    }
    public static int I_RpcOpenClientProcess ( Addressable Binding,  int DesiredAccess,  Addressable ClientProcess) {
        var mh$ = I_RpcOpenClientProcess$MH();
        try {
            return (int)mh$.invokeExact(Binding, DesiredAccess, ClientProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingIsServerLocal$MH() {
        return RuntimeHelper.requireNonNull(constants$732.I_RpcBindingIsServerLocal$MH,"I_RpcBindingIsServerLocal");
    }
    public static int I_RpcBindingIsServerLocal ( Addressable Binding,  Addressable ServerLocalFlag) {
        var mh$ = I_RpcBindingIsServerLocal$MH();
        try {
            return (int)mh$.invokeExact(Binding, ServerLocalFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingSetPrivateOption$MH() {
        return RuntimeHelper.requireNonNull(constants$732.I_RpcBindingSetPrivateOption$MH,"I_RpcBindingSetPrivateOption");
    }
    public static int I_RpcBindingSetPrivateOption ( Addressable hBinding,  int option,  long optionValue) {
        var mh$ = I_RpcBindingSetPrivateOption$MH();
        try {
            return (int)mh$.invokeExact(hBinding, option, optionValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerSubscribeForDisconnectNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$733.I_RpcServerSubscribeForDisconnectNotification$MH,"I_RpcServerSubscribeForDisconnectNotification");
    }
    public static int I_RpcServerSubscribeForDisconnectNotification ( Addressable Binding,  Addressable hEvent) {
        var mh$ = I_RpcServerSubscribeForDisconnectNotification$MH();
        try {
            return (int)mh$.invokeExact(Binding, hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerGetAssociationID$MH() {
        return RuntimeHelper.requireNonNull(constants$733.I_RpcServerGetAssociationID$MH,"I_RpcServerGetAssociationID");
    }
    public static int I_RpcServerGetAssociationID ( Addressable Binding,  Addressable AssociationID) {
        var mh$ = I_RpcServerGetAssociationID$MH();
        try {
            return (int)mh$.invokeExact(Binding, AssociationID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerDisableExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$733.I_RpcServerDisableExceptionFilter$MH,"I_RpcServerDisableExceptionFilter");
    }
    public static int I_RpcServerDisableExceptionFilter () {
        var mh$ = I_RpcServerDisableExceptionFilter$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerSubscribeForDisconnectNotification2$MH() {
        return RuntimeHelper.requireNonNull(constants$733.I_RpcServerSubscribeForDisconnectNotification2$MH,"I_RpcServerSubscribeForDisconnectNotification2");
    }
    public static int I_RpcServerSubscribeForDisconnectNotification2 ( Addressable Binding,  Addressable hEvent,  Addressable SubscriptionId) {
        var mh$ = I_RpcServerSubscribeForDisconnectNotification2$MH();
        try {
            return (int)mh$.invokeExact(Binding, hEvent, SubscriptionId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcServerUnsubscribeForDisconnectNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$733.I_RpcServerUnsubscribeForDisconnectNotification$MH,"I_RpcServerUnsubscribeForDisconnectNotification");
    }
    public static int I_RpcServerUnsubscribeForDisconnectNotification ( Addressable Binding,  MemorySegment SubscriptionId) {
        var mh$ = I_RpcServerUnsubscribeForDisconnectNotification$MH();
        try {
            return (int)mh$.invokeExact(Binding, SubscriptionId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress RPC_NS_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RpcNsBindingExportA$MH() {
        return RuntimeHelper.requireNonNull(constants$733.RpcNsBindingExportA$MH,"RpcNsBindingExportA");
    }
    public static int RpcNsBindingExportA ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable BindingVec,  Addressable ObjectUuidVec) {
        var mh$ = RpcNsBindingExportA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingUnexportA$MH() {
        return RuntimeHelper.requireNonNull(constants$734.RpcNsBindingUnexportA$MH,"RpcNsBindingUnexportA");
    }
    public static int RpcNsBindingUnexportA ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable ObjectUuidVec) {
        var mh$ = RpcNsBindingUnexportA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingExportW$MH() {
        return RuntimeHelper.requireNonNull(constants$734.RpcNsBindingExportW$MH,"RpcNsBindingExportW");
    }
    public static int RpcNsBindingExportW ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable BindingVec,  Addressable ObjectUuidVec) {
        var mh$ = RpcNsBindingExportW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingUnexportW$MH() {
        return RuntimeHelper.requireNonNull(constants$734.RpcNsBindingUnexportW$MH,"RpcNsBindingUnexportW");
    }
    public static int RpcNsBindingUnexportW ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable ObjectUuidVec) {
        var mh$ = RpcNsBindingUnexportW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingExportPnPA$MH() {
        return RuntimeHelper.requireNonNull(constants$734.RpcNsBindingExportPnPA$MH,"RpcNsBindingExportPnPA");
    }
    public static int RpcNsBindingExportPnPA ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable ObjectVector) {
        var mh$ = RpcNsBindingExportPnPA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingUnexportPnPA$MH() {
        return RuntimeHelper.requireNonNull(constants$734.RpcNsBindingUnexportPnPA$MH,"RpcNsBindingUnexportPnPA");
    }
    public static int RpcNsBindingUnexportPnPA ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable ObjectVector) {
        var mh$ = RpcNsBindingUnexportPnPA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingExportPnPW$MH() {
        return RuntimeHelper.requireNonNull(constants$734.RpcNsBindingExportPnPW$MH,"RpcNsBindingExportPnPW");
    }
    public static int RpcNsBindingExportPnPW ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable ObjectVector) {
        var mh$ = RpcNsBindingExportPnPW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingUnexportPnPW$MH() {
        return RuntimeHelper.requireNonNull(constants$735.RpcNsBindingUnexportPnPW$MH,"RpcNsBindingUnexportPnPW");
    }
    public static int RpcNsBindingUnexportPnPW ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable ObjectVector) {
        var mh$ = RpcNsBindingUnexportPnPW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingLookupBeginA$MH() {
        return RuntimeHelper.requireNonNull(constants$735.RpcNsBindingLookupBeginA$MH,"RpcNsBindingLookupBeginA");
    }
    public static int RpcNsBindingLookupBeginA ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable ObjUuid,  int BindingMaxCount,  Addressable LookupContext) {
        var mh$ = RpcNsBindingLookupBeginA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingLookupBeginW$MH() {
        return RuntimeHelper.requireNonNull(constants$735.RpcNsBindingLookupBeginW$MH,"RpcNsBindingLookupBeginW");
    }
    public static int RpcNsBindingLookupBeginW ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable ObjUuid,  int BindingMaxCount,  Addressable LookupContext) {
        var mh$ = RpcNsBindingLookupBeginW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingLookupNext$MH() {
        return RuntimeHelper.requireNonNull(constants$735.RpcNsBindingLookupNext$MH,"RpcNsBindingLookupNext");
    }
    public static int RpcNsBindingLookupNext ( Addressable LookupContext,  Addressable BindingVec) {
        var mh$ = RpcNsBindingLookupNext$MH();
        try {
            return (int)mh$.invokeExact(LookupContext, BindingVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingLookupDone$MH() {
        return RuntimeHelper.requireNonNull(constants$735.RpcNsBindingLookupDone$MH,"RpcNsBindingLookupDone");
    }
    public static int RpcNsBindingLookupDone ( Addressable LookupContext) {
        var mh$ = RpcNsBindingLookupDone$MH();
        try {
            return (int)mh$.invokeExact(LookupContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsGroupDeleteA$MH() {
        return RuntimeHelper.requireNonNull(constants$735.RpcNsGroupDeleteA$MH,"RpcNsGroupDeleteA");
    }
    public static int RpcNsGroupDeleteA ( int GroupNameSyntax,  Addressable GroupName) {
        var mh$ = RpcNsGroupDeleteA$MH();
        try {
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsGroupMbrAddA$MH() {
        return RuntimeHelper.requireNonNull(constants$736.RpcNsGroupMbrAddA$MH,"RpcNsGroupMbrAddA");
    }
    public static int RpcNsGroupMbrAddA ( int GroupNameSyntax,  Addressable GroupName,  int MemberNameSyntax,  Addressable MemberName) {
        var mh$ = RpcNsGroupMbrAddA$MH();
        try {
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsGroupMbrRemoveA$MH() {
        return RuntimeHelper.requireNonNull(constants$736.RpcNsGroupMbrRemoveA$MH,"RpcNsGroupMbrRemoveA");
    }
    public static int RpcNsGroupMbrRemoveA ( int GroupNameSyntax,  Addressable GroupName,  int MemberNameSyntax,  Addressable MemberName) {
        var mh$ = RpcNsGroupMbrRemoveA$MH();
        try {
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsGroupMbrInqBeginA$MH() {
        return RuntimeHelper.requireNonNull(constants$736.RpcNsGroupMbrInqBeginA$MH,"RpcNsGroupMbrInqBeginA");
    }
    public static int RpcNsGroupMbrInqBeginA ( int GroupNameSyntax,  Addressable GroupName,  int MemberNameSyntax,  Addressable InquiryContext) {
        var mh$ = RpcNsGroupMbrInqBeginA$MH();
        try {
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsGroupMbrInqNextA$MH() {
        return RuntimeHelper.requireNonNull(constants$736.RpcNsGroupMbrInqNextA$MH,"RpcNsGroupMbrInqNextA");
    }
    public static int RpcNsGroupMbrInqNextA ( Addressable InquiryContext,  Addressable MemberName) {
        var mh$ = RpcNsGroupMbrInqNextA$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext, MemberName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsGroupDeleteW$MH() {
        return RuntimeHelper.requireNonNull(constants$736.RpcNsGroupDeleteW$MH,"RpcNsGroupDeleteW");
    }
    public static int RpcNsGroupDeleteW ( int GroupNameSyntax,  Addressable GroupName) {
        var mh$ = RpcNsGroupDeleteW$MH();
        try {
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsGroupMbrAddW$MH() {
        return RuntimeHelper.requireNonNull(constants$736.RpcNsGroupMbrAddW$MH,"RpcNsGroupMbrAddW");
    }
    public static int RpcNsGroupMbrAddW ( int GroupNameSyntax,  Addressable GroupName,  int MemberNameSyntax,  Addressable MemberName) {
        var mh$ = RpcNsGroupMbrAddW$MH();
        try {
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsGroupMbrRemoveW$MH() {
        return RuntimeHelper.requireNonNull(constants$737.RpcNsGroupMbrRemoveW$MH,"RpcNsGroupMbrRemoveW");
    }
    public static int RpcNsGroupMbrRemoveW ( int GroupNameSyntax,  Addressable GroupName,  int MemberNameSyntax,  Addressable MemberName) {
        var mh$ = RpcNsGroupMbrRemoveW$MH();
        try {
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsGroupMbrInqBeginW$MH() {
        return RuntimeHelper.requireNonNull(constants$737.RpcNsGroupMbrInqBeginW$MH,"RpcNsGroupMbrInqBeginW");
    }
    public static int RpcNsGroupMbrInqBeginW ( int GroupNameSyntax,  Addressable GroupName,  int MemberNameSyntax,  Addressable InquiryContext) {
        var mh$ = RpcNsGroupMbrInqBeginW$MH();
        try {
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsGroupMbrInqNextW$MH() {
        return RuntimeHelper.requireNonNull(constants$737.RpcNsGroupMbrInqNextW$MH,"RpcNsGroupMbrInqNextW");
    }
    public static int RpcNsGroupMbrInqNextW ( Addressable InquiryContext,  Addressable MemberName) {
        var mh$ = RpcNsGroupMbrInqNextW$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext, MemberName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsGroupMbrInqDone$MH() {
        return RuntimeHelper.requireNonNull(constants$737.RpcNsGroupMbrInqDone$MH,"RpcNsGroupMbrInqDone");
    }
    public static int RpcNsGroupMbrInqDone ( Addressable InquiryContext) {
        var mh$ = RpcNsGroupMbrInqDone$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileDeleteA$MH() {
        return RuntimeHelper.requireNonNull(constants$737.RpcNsProfileDeleteA$MH,"RpcNsProfileDeleteA");
    }
    public static int RpcNsProfileDeleteA ( int ProfileNameSyntax,  Addressable ProfileName) {
        var mh$ = RpcNsProfileDeleteA$MH();
        try {
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileEltAddA$MH() {
        return RuntimeHelper.requireNonNull(constants$737.RpcNsProfileEltAddA$MH,"RpcNsProfileEltAddA");
    }
    public static int RpcNsProfileEltAddA ( int ProfileNameSyntax,  Addressable ProfileName,  Addressable IfId,  int MemberNameSyntax,  Addressable MemberName,  int Priority,  Addressable Annotation) {
        var mh$ = RpcNsProfileEltAddA$MH();
        try {
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileEltRemoveA$MH() {
        return RuntimeHelper.requireNonNull(constants$738.RpcNsProfileEltRemoveA$MH,"RpcNsProfileEltRemoveA");
    }
    public static int RpcNsProfileEltRemoveA ( int ProfileNameSyntax,  Addressable ProfileName,  Addressable IfId,  int MemberNameSyntax,  Addressable MemberName) {
        var mh$ = RpcNsProfileEltRemoveA$MH();
        try {
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileEltInqBeginA$MH() {
        return RuntimeHelper.requireNonNull(constants$738.RpcNsProfileEltInqBeginA$MH,"RpcNsProfileEltInqBeginA");
    }
    public static int RpcNsProfileEltInqBeginA ( int ProfileNameSyntax,  Addressable ProfileName,  int InquiryType,  Addressable IfId,  int VersOption,  int MemberNameSyntax,  Addressable MemberName,  Addressable InquiryContext) {
        var mh$ = RpcNsProfileEltInqBeginA$MH();
        try {
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileEltInqNextA$MH() {
        return RuntimeHelper.requireNonNull(constants$738.RpcNsProfileEltInqNextA$MH,"RpcNsProfileEltInqNextA");
    }
    public static int RpcNsProfileEltInqNextA ( Addressable InquiryContext,  Addressable IfId,  Addressable MemberName,  Addressable Priority,  Addressable Annotation) {
        var mh$ = RpcNsProfileEltInqNextA$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext, IfId, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileDeleteW$MH() {
        return RuntimeHelper.requireNonNull(constants$738.RpcNsProfileDeleteW$MH,"RpcNsProfileDeleteW");
    }
    public static int RpcNsProfileDeleteW ( int ProfileNameSyntax,  Addressable ProfileName) {
        var mh$ = RpcNsProfileDeleteW$MH();
        try {
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileEltAddW$MH() {
        return RuntimeHelper.requireNonNull(constants$738.RpcNsProfileEltAddW$MH,"RpcNsProfileEltAddW");
    }
    public static int RpcNsProfileEltAddW ( int ProfileNameSyntax,  Addressable ProfileName,  Addressable IfId,  int MemberNameSyntax,  Addressable MemberName,  int Priority,  Addressable Annotation) {
        var mh$ = RpcNsProfileEltAddW$MH();
        try {
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileEltRemoveW$MH() {
        return RuntimeHelper.requireNonNull(constants$738.RpcNsProfileEltRemoveW$MH,"RpcNsProfileEltRemoveW");
    }
    public static int RpcNsProfileEltRemoveW ( int ProfileNameSyntax,  Addressable ProfileName,  Addressable IfId,  int MemberNameSyntax,  Addressable MemberName) {
        var mh$ = RpcNsProfileEltRemoveW$MH();
        try {
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileEltInqBeginW$MH() {
        return RuntimeHelper.requireNonNull(constants$739.RpcNsProfileEltInqBeginW$MH,"RpcNsProfileEltInqBeginW");
    }
    public static int RpcNsProfileEltInqBeginW ( int ProfileNameSyntax,  Addressable ProfileName,  int InquiryType,  Addressable IfId,  int VersOption,  int MemberNameSyntax,  Addressable MemberName,  Addressable InquiryContext) {
        var mh$ = RpcNsProfileEltInqBeginW$MH();
        try {
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileEltInqNextW$MH() {
        return RuntimeHelper.requireNonNull(constants$739.RpcNsProfileEltInqNextW$MH,"RpcNsProfileEltInqNextW");
    }
    public static int RpcNsProfileEltInqNextW ( Addressable InquiryContext,  Addressable IfId,  Addressable MemberName,  Addressable Priority,  Addressable Annotation) {
        var mh$ = RpcNsProfileEltInqNextW$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext, IfId, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsProfileEltInqDone$MH() {
        return RuntimeHelper.requireNonNull(constants$739.RpcNsProfileEltInqDone$MH,"RpcNsProfileEltInqDone");
    }
    public static int RpcNsProfileEltInqDone ( Addressable InquiryContext) {
        var mh$ = RpcNsProfileEltInqDone$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryObjectInqBeginA$MH() {
        return RuntimeHelper.requireNonNull(constants$739.RpcNsEntryObjectInqBeginA$MH,"RpcNsEntryObjectInqBeginA");
    }
    public static int RpcNsEntryObjectInqBeginA ( int EntryNameSyntax,  Addressable EntryName,  Addressable InquiryContext) {
        var mh$ = RpcNsEntryObjectInqBeginA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryObjectInqBeginW$MH() {
        return RuntimeHelper.requireNonNull(constants$739.RpcNsEntryObjectInqBeginW$MH,"RpcNsEntryObjectInqBeginW");
    }
    public static int RpcNsEntryObjectInqBeginW ( int EntryNameSyntax,  Addressable EntryName,  Addressable InquiryContext) {
        var mh$ = RpcNsEntryObjectInqBeginW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryObjectInqNext$MH() {
        return RuntimeHelper.requireNonNull(constants$739.RpcNsEntryObjectInqNext$MH,"RpcNsEntryObjectInqNext");
    }
    public static int RpcNsEntryObjectInqNext ( Addressable InquiryContext,  Addressable ObjUuid) {
        var mh$ = RpcNsEntryObjectInqNext$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext, ObjUuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryObjectInqDone$MH() {
        return RuntimeHelper.requireNonNull(constants$740.RpcNsEntryObjectInqDone$MH,"RpcNsEntryObjectInqDone");
    }
    public static int RpcNsEntryObjectInqDone ( Addressable InquiryContext) {
        var mh$ = RpcNsEntryObjectInqDone$MH();
        try {
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryExpandNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$740.RpcNsEntryExpandNameA$MH,"RpcNsEntryExpandNameA");
    }
    public static int RpcNsEntryExpandNameA ( int EntryNameSyntax,  Addressable EntryName,  Addressable ExpandedName) {
        var mh$ = RpcNsEntryExpandNameA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, ExpandedName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtBindingUnexportA$MH() {
        return RuntimeHelper.requireNonNull(constants$740.RpcNsMgmtBindingUnexportA$MH,"RpcNsMgmtBindingUnexportA");
    }
    public static int RpcNsMgmtBindingUnexportA ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfId,  int VersOption,  Addressable ObjectUuidVec) {
        var mh$ = RpcNsMgmtBindingUnexportA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryCreateA$MH() {
        return RuntimeHelper.requireNonNull(constants$740.RpcNsMgmtEntryCreateA$MH,"RpcNsMgmtEntryCreateA");
    }
    public static int RpcNsMgmtEntryCreateA ( int EntryNameSyntax,  Addressable EntryName) {
        var mh$ = RpcNsMgmtEntryCreateA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryDeleteA$MH() {
        return RuntimeHelper.requireNonNull(constants$740.RpcNsMgmtEntryDeleteA$MH,"RpcNsMgmtEntryDeleteA");
    }
    public static int RpcNsMgmtEntryDeleteA ( int EntryNameSyntax,  Addressable EntryName) {
        var mh$ = RpcNsMgmtEntryDeleteA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryInqIfIdsA$MH() {
        return RuntimeHelper.requireNonNull(constants$740.RpcNsMgmtEntryInqIfIdsA$MH,"RpcNsMgmtEntryInqIfIdsA");
    }
    public static int RpcNsMgmtEntryInqIfIdsA ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfIdVec) {
        var mh$ = RpcNsMgmtEntryInqIfIdsA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfIdVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtHandleSetExpAge$MH() {
        return RuntimeHelper.requireNonNull(constants$741.RpcNsMgmtHandleSetExpAge$MH,"RpcNsMgmtHandleSetExpAge");
    }
    public static int RpcNsMgmtHandleSetExpAge ( Addressable NsHandle,  int ExpirationAge) {
        var mh$ = RpcNsMgmtHandleSetExpAge$MH();
        try {
            return (int)mh$.invokeExact(NsHandle, ExpirationAge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtInqExpAge$MH() {
        return RuntimeHelper.requireNonNull(constants$741.RpcNsMgmtInqExpAge$MH,"RpcNsMgmtInqExpAge");
    }
    public static int RpcNsMgmtInqExpAge ( Addressable ExpirationAge) {
        var mh$ = RpcNsMgmtInqExpAge$MH();
        try {
            return (int)mh$.invokeExact(ExpirationAge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtSetExpAge$MH() {
        return RuntimeHelper.requireNonNull(constants$741.RpcNsMgmtSetExpAge$MH,"RpcNsMgmtSetExpAge");
    }
    public static int RpcNsMgmtSetExpAge ( int ExpirationAge) {
        var mh$ = RpcNsMgmtSetExpAge$MH();
        try {
            return (int)mh$.invokeExact(ExpirationAge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsEntryExpandNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$741.RpcNsEntryExpandNameW$MH,"RpcNsEntryExpandNameW");
    }
    public static int RpcNsEntryExpandNameW ( int EntryNameSyntax,  Addressable EntryName,  Addressable ExpandedName) {
        var mh$ = RpcNsEntryExpandNameW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, ExpandedName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtBindingUnexportW$MH() {
        return RuntimeHelper.requireNonNull(constants$741.RpcNsMgmtBindingUnexportW$MH,"RpcNsMgmtBindingUnexportW");
    }
    public static int RpcNsMgmtBindingUnexportW ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfId,  int VersOption,  Addressable ObjectUuidVec) {
        var mh$ = RpcNsMgmtBindingUnexportW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryCreateW$MH() {
        return RuntimeHelper.requireNonNull(constants$741.RpcNsMgmtEntryCreateW$MH,"RpcNsMgmtEntryCreateW");
    }
    public static int RpcNsMgmtEntryCreateW ( int EntryNameSyntax,  Addressable EntryName) {
        var mh$ = RpcNsMgmtEntryCreateW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryDeleteW$MH() {
        return RuntimeHelper.requireNonNull(constants$742.RpcNsMgmtEntryDeleteW$MH,"RpcNsMgmtEntryDeleteW");
    }
    public static int RpcNsMgmtEntryDeleteW ( int EntryNameSyntax,  Addressable EntryName) {
        var mh$ = RpcNsMgmtEntryDeleteW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsMgmtEntryInqIfIdsW$MH() {
        return RuntimeHelper.requireNonNull(constants$742.RpcNsMgmtEntryInqIfIdsW$MH,"RpcNsMgmtEntryInqIfIdsW");
    }
    public static int RpcNsMgmtEntryInqIfIdsW ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfIdVec) {
        var mh$ = RpcNsMgmtEntryInqIfIdsW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfIdVec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingImportBeginA$MH() {
        return RuntimeHelper.requireNonNull(constants$742.RpcNsBindingImportBeginA$MH,"RpcNsBindingImportBeginA");
    }
    public static int RpcNsBindingImportBeginA ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable ObjUuid,  Addressable ImportContext) {
        var mh$ = RpcNsBindingImportBeginA$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingImportBeginW$MH() {
        return RuntimeHelper.requireNonNull(constants$742.RpcNsBindingImportBeginW$MH,"RpcNsBindingImportBeginW");
    }
    public static int RpcNsBindingImportBeginW ( int EntryNameSyntax,  Addressable EntryName,  Addressable IfSpec,  Addressable ObjUuid,  Addressable ImportContext) {
        var mh$ = RpcNsBindingImportBeginW$MH();
        try {
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingImportNext$MH() {
        return RuntimeHelper.requireNonNull(constants$742.RpcNsBindingImportNext$MH,"RpcNsBindingImportNext");
    }
    public static int RpcNsBindingImportNext ( Addressable ImportContext,  Addressable Binding) {
        var mh$ = RpcNsBindingImportNext$MH();
        try {
            return (int)mh$.invokeExact(ImportContext, Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingImportDone$MH() {
        return RuntimeHelper.requireNonNull(constants$742.RpcNsBindingImportDone$MH,"RpcNsBindingImportDone");
    }
    public static int RpcNsBindingImportDone ( Addressable ImportContext) {
        var mh$ = RpcNsBindingImportDone$MH();
        try {
            return (int)mh$.invokeExact(ImportContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNsBindingSelect$MH() {
        return RuntimeHelper.requireNonNull(constants$743.RpcNsBindingSelect$MH,"RpcNsBindingSelect");
    }
    public static int RpcNsBindingSelect ( Addressable BindingVec,  Addressable Binding) {
        var mh$ = RpcNsBindingSelect$MH();
        try {
            return (int)mh$.invokeExact(BindingVec, Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int RpcNotificationTypeNone() {
        return (int)0L;
    }
    public static int RpcNotificationTypeEvent() {
        return (int)1L;
    }
    public static int RpcNotificationTypeApc() {
        return (int)2L;
    }
    public static int RpcNotificationTypeIoc() {
        return (int)3L;
    }
    public static int RpcNotificationTypeHwnd() {
        return (int)4L;
    }
    public static int RpcNotificationTypeCallback() {
        return (int)5L;
    }
    public static int RpcCallComplete() {
        return (int)0L;
    }
    public static int RpcSendComplete() {
        return (int)1L;
    }
    public static int RpcReceiveComplete() {
        return (int)2L;
    }
    public static int RpcClientDisconnect() {
        return (int)3L;
    }
    public static int RpcClientCancel() {
        return (int)4L;
    }
    public static OfAddress PRPC_ASYNC_NOTIFICATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_ASYNC_STATE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RpcAsyncRegisterInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$743.RpcAsyncRegisterInfo$MH,"RpcAsyncRegisterInfo");
    }
    public static int RpcAsyncRegisterInfo ( Addressable pAsync) {
        var mh$ = RpcAsyncRegisterInfo$MH();
        try {
            return (int)mh$.invokeExact(pAsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncInitializeHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$744.RpcAsyncInitializeHandle$MH,"RpcAsyncInitializeHandle");
    }
    public static int RpcAsyncInitializeHandle ( Addressable pAsync,  int Size) {
        var mh$ = RpcAsyncInitializeHandle$MH();
        try {
            return (int)mh$.invokeExact(pAsync, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncGetCallStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$744.RpcAsyncGetCallStatus$MH,"RpcAsyncGetCallStatus");
    }
    public static int RpcAsyncGetCallStatus ( Addressable pAsync) {
        var mh$ = RpcAsyncGetCallStatus$MH();
        try {
            return (int)mh$.invokeExact(pAsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncCompleteCall$MH() {
        return RuntimeHelper.requireNonNull(constants$744.RpcAsyncCompleteCall$MH,"RpcAsyncCompleteCall");
    }
    public static int RpcAsyncCompleteCall ( Addressable pAsync,  Addressable Reply) {
        var mh$ = RpcAsyncCompleteCall$MH();
        try {
            return (int)mh$.invokeExact(pAsync, Reply);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncAbortCall$MH() {
        return RuntimeHelper.requireNonNull(constants$744.RpcAsyncAbortCall$MH,"RpcAsyncAbortCall");
    }
    public static int RpcAsyncAbortCall ( Addressable pAsync,  int ExceptionCode) {
        var mh$ = RpcAsyncAbortCall$MH();
        try {
            return (int)mh$.invokeExact(pAsync, ExceptionCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncCancelCall$MH() {
        return RuntimeHelper.requireNonNull(constants$744.RpcAsyncCancelCall$MH,"RpcAsyncCancelCall");
    }
    public static int RpcAsyncCancelCall ( Addressable pAsync,  int fAbort) {
        var mh$ = RpcAsyncCancelCall$MH();
        try {
            return (int)mh$.invokeExact(pAsync, fAbort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int eeptAnsiString() {
        return (int)1L;
    }
    public static int eeptUnicodeString() {
        return (int)2L;
    }
    public static int eeptLongVal() {
        return (int)3L;
    }
    public static int eeptShortVal() {
        return (int)4L;
    }
    public static int eeptPointerVal() {
        return (int)5L;
    }
    public static int eeptNone() {
        return (int)6L;
    }
    public static int eeptBinary() {
        return (int)7L;
    }
    public static MethodHandle RpcErrorStartEnumeration$MH() {
        return RuntimeHelper.requireNonNull(constants$744.RpcErrorStartEnumeration$MH,"RpcErrorStartEnumeration");
    }
    public static int RpcErrorStartEnumeration ( Addressable EnumHandle) {
        var mh$ = RpcErrorStartEnumeration$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorGetNextRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$745.RpcErrorGetNextRecord$MH,"RpcErrorGetNextRecord");
    }
    public static int RpcErrorGetNextRecord ( Addressable EnumHandle,  int CopyStrings,  Addressable ErrorInfo) {
        var mh$ = RpcErrorGetNextRecord$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle, CopyStrings, ErrorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorEndEnumeration$MH() {
        return RuntimeHelper.requireNonNull(constants$745.RpcErrorEndEnumeration$MH,"RpcErrorEndEnumeration");
    }
    public static int RpcErrorEndEnumeration ( Addressable EnumHandle) {
        var mh$ = RpcErrorEndEnumeration$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorResetEnumeration$MH() {
        return RuntimeHelper.requireNonNull(constants$745.RpcErrorResetEnumeration$MH,"RpcErrorResetEnumeration");
    }
    public static int RpcErrorResetEnumeration ( Addressable EnumHandle) {
        var mh$ = RpcErrorResetEnumeration$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorGetNumberOfRecords$MH() {
        return RuntimeHelper.requireNonNull(constants$745.RpcErrorGetNumberOfRecords$MH,"RpcErrorGetNumberOfRecords");
    }
    public static int RpcErrorGetNumberOfRecords ( Addressable EnumHandle,  Addressable Records) {
        var mh$ = RpcErrorGetNumberOfRecords$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle, Records);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorSaveErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$745.RpcErrorSaveErrorInfo$MH,"RpcErrorSaveErrorInfo");
    }
    public static int RpcErrorSaveErrorInfo ( Addressable EnumHandle,  Addressable ErrorBlob,  Addressable BlobSize) {
        var mh$ = RpcErrorSaveErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(EnumHandle, ErrorBlob, BlobSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorLoadErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$745.RpcErrorLoadErrorInfo$MH,"RpcErrorLoadErrorInfo");
    }
    public static int RpcErrorLoadErrorInfo ( Addressable ErrorBlob,  long BlobSize,  Addressable EnumHandle) {
        var mh$ = RpcErrorLoadErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(ErrorBlob, BlobSize, EnumHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorAddRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$746.RpcErrorAddRecord$MH,"RpcErrorAddRecord");
    }
    public static int RpcErrorAddRecord ( Addressable ErrorInfo) {
        var mh$ = RpcErrorAddRecord$MH();
        try {
            return (int)mh$.invokeExact(ErrorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcErrorClearInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$746.RpcErrorClearInformation$MH,"RpcErrorClearInformation");
    }
    public static void RpcErrorClearInformation () {
        var mh$ = RpcErrorClearInformation$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcAsyncCleanupThread$MH() {
        return RuntimeHelper.requireNonNull(constants$746.RpcAsyncCleanupThread$MH,"RpcAsyncCleanupThread");
    }
    public static int RpcAsyncCleanupThread ( int dwTimeout) {
        var mh$ = RpcAsyncCleanupThread$MH();
        try {
            return (int)mh$.invokeExact(dwTimeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcGetAuthorizationContextForClient$MH() {
        return RuntimeHelper.requireNonNull(constants$746.RpcGetAuthorizationContextForClient$MH,"RpcGetAuthorizationContextForClient");
    }
    public static int RpcGetAuthorizationContextForClient ( Addressable ClientBinding,  int ImpersonateOnReturn,  Addressable Reserved1,  Addressable pExpirationTime,  MemorySegment Reserved2,  int Reserved3,  Addressable Reserved4,  Addressable pAuthzClientContext) {
        var mh$ = RpcGetAuthorizationContextForClient$MH();
        try {
            return (int)mh$.invokeExact(ClientBinding, ImpersonateOnReturn, Reserved1, pExpirationTime, Reserved2, Reserved3, Reserved4, pAuthzClientContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcFreeAuthorizationContext$MH() {
        return RuntimeHelper.requireNonNull(constants$746.RpcFreeAuthorizationContext$MH,"RpcFreeAuthorizationContext");
    }
    public static int RpcFreeAuthorizationContext ( Addressable pAuthzClientContext) {
        var mh$ = RpcFreeAuthorizationContext$MH();
        try {
            return (int)mh$.invokeExact(pAuthzClientContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsContextLockExclusive$MH() {
        return RuntimeHelper.requireNonNull(constants$746.RpcSsContextLockExclusive$MH,"RpcSsContextLockExclusive");
    }
    public static int RpcSsContextLockExclusive ( Addressable ServerBindingHandle,  Addressable UserContext) {
        var mh$ = RpcSsContextLockExclusive$MH();
        try {
            return (int)mh$.invokeExact(ServerBindingHandle, UserContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsContextLockShared$MH() {
        return RuntimeHelper.requireNonNull(constants$747.RpcSsContextLockShared$MH,"RpcSsContextLockShared");
    }
    public static int RpcSsContextLockShared ( Addressable ServerBindingHandle,  Addressable UserContext) {
        var mh$ = RpcSsContextLockShared$MH();
        try {
            return (int)mh$.invokeExact(ServerBindingHandle, UserContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int rlafInvalid() {
        return (int)0L;
    }
    public static int rlafIPv4() {
        return (int)1L;
    }
    public static int rlafIPv6() {
        return (int)2L;
    }
    public static OfAddress PRPC_CALL_LOCAL_ADDRESS_V1 = Constants$root.C_POINTER$LAYOUT;
    public static int rctInvalid() {
        return (int)0L;
    }
    public static int rctNormal() {
        return (int)1L;
    }
    public static int rctTraining() {
        return (int)2L;
    }
    public static int rctGuaranteed() {
        return (int)3L;
    }
    public static int rcclInvalid() {
        return (int)0L;
    }
    public static int rcclLocal() {
        return (int)1L;
    }
    public static int rcclRemote() {
        return (int)2L;
    }
    public static int rcclClientUnknownLocality() {
        return (int)3L;
    }
    public static MethodHandle RpcServerInqCallAttributesW$MH() {
        return RuntimeHelper.requireNonNull(constants$747.RpcServerInqCallAttributesW$MH,"RpcServerInqCallAttributesW");
    }
    public static int RpcServerInqCallAttributesW ( Addressable ClientBinding,  Addressable RpcCallAttributes) {
        var mh$ = RpcServerInqCallAttributesW$MH();
        try {
            return (int)mh$.invokeExact(ClientBinding, RpcCallAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInqCallAttributesA$MH() {
        return RuntimeHelper.requireNonNull(constants$747.RpcServerInqCallAttributesA$MH,"RpcServerInqCallAttributesA");
    }
    public static int RpcServerInqCallAttributesA ( Addressable ClientBinding,  Addressable RpcCallAttributes) {
        var mh$ = RpcServerInqCallAttributesA$MH();
        try {
            return (int)mh$.invokeExact(ClientBinding, RpcCallAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int RpcNotificationCallNone() {
        return (int)0L;
    }
    public static int RpcNotificationClientDisconnect() {
        return (int)1L;
    }
    public static int RpcNotificationCallCancel() {
        return (int)2L;
    }
    public static MethodHandle RpcServerSubscribeForNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$747.RpcServerSubscribeForNotification$MH,"RpcServerSubscribeForNotification");
    }
    public static int RpcServerSubscribeForNotification ( Addressable Binding,  int Notification,  int NotificationType,  Addressable NotificationInfo) {
        var mh$ = RpcServerSubscribeForNotification$MH();
        try {
            return (int)mh$.invokeExact(Binding, Notification, NotificationType, NotificationInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUnsubscribeForNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$747.RpcServerUnsubscribeForNotification$MH,"RpcServerUnsubscribeForNotification");
    }
    public static int RpcServerUnsubscribeForNotification ( Addressable Binding,  int Notification,  Addressable NotificationsQueued) {
        var mh$ = RpcServerUnsubscribeForNotification$MH();
        try {
            return (int)mh$.invokeExact(Binding, Notification, NotificationsQueued);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingBind$MH() {
        return RuntimeHelper.requireNonNull(constants$747.RpcBindingBind$MH,"RpcBindingBind");
    }
    public static int RpcBindingBind ( Addressable pAsync,  Addressable Binding,  Addressable IfSpec) {
        var mh$ = RpcBindingBind$MH();
        try {
            return (int)mh$.invokeExact(pAsync, Binding, IfSpec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingUnbind$MH() {
        return RuntimeHelper.requireNonNull(constants$748.RpcBindingUnbind$MH,"RpcBindingUnbind");
    }
    public static int RpcBindingUnbind ( Addressable Binding) {
        var mh$ = RpcBindingUnbind$MH();
        try {
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcAsyncSetHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$748.I_RpcAsyncSetHandle$MH,"I_RpcAsyncSetHandle");
    }
    public static int I_RpcAsyncSetHandle ( Addressable Message,  Addressable pAsync) {
        var mh$ = I_RpcAsyncSetHandle$MH();
        try {
            return (int)mh$.invokeExact(Message, pAsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcAsyncAbortCall$MH() {
        return RuntimeHelper.requireNonNull(constants$748.I_RpcAsyncAbortCall$MH,"I_RpcAsyncAbortCall");
    }
    public static int I_RpcAsyncAbortCall ( Addressable pAsync,  int ExceptionCode) {
        var mh$ = I_RpcAsyncAbortCall$MH();
        try {
            return (int)mh$.invokeExact(pAsync, ExceptionCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$748.I_RpcExceptionFilter$MH,"I_RpcExceptionFilter");
    }
    public static int I_RpcExceptionFilter ( int ExceptionCode) {
        var mh$ = I_RpcExceptionFilter$MH();
        try {
            return (int)mh$.invokeExact(ExceptionCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcBindingInqClientTokenAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$748.I_RpcBindingInqClientTokenAttributes$MH,"I_RpcBindingInqClientTokenAttributes");
    }
    public static int I_RpcBindingInqClientTokenAttributes ( Addressable Binding,  Addressable TokenId,  Addressable AuthenticationId,  Addressable ModifiedId) {
        var mh$ = I_RpcBindingInqClientTokenAttributes$MH();
        try {
            return (int)mh$.invokeExact(Binding, TokenId, AuthenticationId, ModifiedId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CommandLineToArgvW$MH() {
        return RuntimeHelper.requireNonNull(constants$748.CommandLineToArgvW$MH,"CommandLineToArgvW");
    }
    public static MemoryAddress CommandLineToArgvW ( Addressable lpCmdLine,  Addressable pNumArgs) {
        var mh$ = CommandLineToArgvW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpCmdLine, pNumArgs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HDROP = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DragQueryFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$749.DragQueryFileA$MH,"DragQueryFileA");
    }
    public static int DragQueryFileA ( Addressable hDrop,  int iFile,  Addressable lpszFile,  int cch) {
        var mh$ = DragQueryFileA$MH();
        try {
            return (int)mh$.invokeExact(hDrop, iFile, lpszFile, cch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DragQueryFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$749.DragQueryFileW$MH,"DragQueryFileW");
    }
    public static int DragQueryFileW ( Addressable hDrop,  int iFile,  Addressable lpszFile,  int cch) {
        var mh$ = DragQueryFileW$MH();
        try {
            return (int)mh$.invokeExact(hDrop, iFile, lpszFile, cch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DragQueryPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$749.DragQueryPoint$MH,"DragQueryPoint");
    }
    public static int DragQueryPoint ( Addressable hDrop,  Addressable ppt) {
        var mh$ = DragQueryPoint$MH();
        try {
            return (int)mh$.invokeExact(hDrop, ppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DragFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$749.DragFinish$MH,"DragFinish");
    }
    public static void DragFinish ( Addressable hDrop) {
        var mh$ = DragFinish$MH();
        try {
            mh$.invokeExact(hDrop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DragAcceptFiles$MH() {
        return RuntimeHelper.requireNonNull(constants$749.DragAcceptFiles$MH,"DragAcceptFiles");
    }
    public static void DragAcceptFiles ( Addressable hWnd,  int fAccept) {
        var mh$ = DragAcceptFiles$MH();
        try {
            mh$.invokeExact(hWnd, fAccept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellExecuteA$MH() {
        return RuntimeHelper.requireNonNull(constants$749.ShellExecuteA$MH,"ShellExecuteA");
    }
    public static MemoryAddress ShellExecuteA ( Addressable hwnd,  Addressable lpOperation,  Addressable lpFile,  Addressable lpParameters,  Addressable lpDirectory,  int nShowCmd) {
        var mh$ = ShellExecuteA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellExecuteW$MH() {
        return RuntimeHelper.requireNonNull(constants$750.ShellExecuteW$MH,"ShellExecuteW");
    }
    public static MemoryAddress ShellExecuteW ( Addressable hwnd,  Addressable lpOperation,  Addressable lpFile,  Addressable lpParameters,  Addressable lpDirectory,  int nShowCmd) {
        var mh$ = ShellExecuteW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindExecutableA$MH() {
        return RuntimeHelper.requireNonNull(constants$750.FindExecutableA$MH,"FindExecutableA");
    }
    public static MemoryAddress FindExecutableA ( Addressable lpFile,  Addressable lpDirectory,  Addressable lpResult) {
        var mh$ = FindExecutableA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFile, lpDirectory, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindExecutableW$MH() {
        return RuntimeHelper.requireNonNull(constants$750.FindExecutableW$MH,"FindExecutableW");
    }
    public static MemoryAddress FindExecutableW ( Addressable lpFile,  Addressable lpDirectory,  Addressable lpResult) {
        var mh$ = FindExecutableW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFile, lpDirectory, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellAboutA$MH() {
        return RuntimeHelper.requireNonNull(constants$750.ShellAboutA$MH,"ShellAboutA");
    }
    public static int ShellAboutA ( Addressable hWnd,  Addressable szApp,  Addressable szOtherStuff,  Addressable hIcon) {
        var mh$ = ShellAboutA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, szApp, szOtherStuff, hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellAboutW$MH() {
        return RuntimeHelper.requireNonNull(constants$750.ShellAboutW$MH,"ShellAboutW");
    }
    public static int ShellAboutW ( Addressable hWnd,  Addressable szApp,  Addressable szOtherStuff,  Addressable hIcon) {
        var mh$ = ShellAboutW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, szApp, szOtherStuff, hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$750.DuplicateIcon$MH,"DuplicateIcon");
    }
    public static MemoryAddress DuplicateIcon ( Addressable hInst,  Addressable hIcon) {
        var mh$ = DuplicateIcon$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInst, hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractAssociatedIconA$MH() {
        return RuntimeHelper.requireNonNull(constants$751.ExtractAssociatedIconA$MH,"ExtractAssociatedIconA");
    }
    public static MemoryAddress ExtractAssociatedIconA ( Addressable hInst,  Addressable pszIconPath,  Addressable piIcon) {
        var mh$ = ExtractAssociatedIconA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInst, pszIconPath, piIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractAssociatedIconW$MH() {
        return RuntimeHelper.requireNonNull(constants$751.ExtractAssociatedIconW$MH,"ExtractAssociatedIconW");
    }
    public static MemoryAddress ExtractAssociatedIconW ( Addressable hInst,  Addressable pszIconPath,  Addressable piIcon) {
        var mh$ = ExtractAssociatedIconW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInst, pszIconPath, piIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractAssociatedIconExA$MH() {
        return RuntimeHelper.requireNonNull(constants$751.ExtractAssociatedIconExA$MH,"ExtractAssociatedIconExA");
    }
    public static MemoryAddress ExtractAssociatedIconExA ( Addressable hInst,  Addressable pszIconPath,  Addressable piIconIndex,  Addressable piIconId) {
        var mh$ = ExtractAssociatedIconExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInst, pszIconPath, piIconIndex, piIconId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractAssociatedIconExW$MH() {
        return RuntimeHelper.requireNonNull(constants$751.ExtractAssociatedIconExW$MH,"ExtractAssociatedIconExW");
    }
    public static MemoryAddress ExtractAssociatedIconExW ( Addressable hInst,  Addressable pszIconPath,  Addressable piIconIndex,  Addressable piIconId) {
        var mh$ = ExtractAssociatedIconExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInst, pszIconPath, piIconIndex, piIconId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractIconA$MH() {
        return RuntimeHelper.requireNonNull(constants$751.ExtractIconA$MH,"ExtractIconA");
    }
    public static MemoryAddress ExtractIconA ( Addressable hInst,  Addressable pszExeFileName,  int nIconIndex) {
        var mh$ = ExtractIconA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInst, pszExeFileName, nIconIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractIconW$MH() {
        return RuntimeHelper.requireNonNull(constants$751.ExtractIconW$MH,"ExtractIconW");
    }
    public static MemoryAddress ExtractIconW ( Addressable hInst,  Addressable pszExeFileName,  int nIconIndex) {
        var mh$ = ExtractIconW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInst, pszExeFileName, nIconIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDRAGINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRAGINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRAGINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAPPBARDATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SHAppBarMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$752.SHAppBarMessage$MH,"SHAppBarMessage");
    }
    public static long SHAppBarMessage ( int dwMessage,  Addressable pData) {
        var mh$ = SHAppBarMessage$MH();
        try {
            return (long)mh$.invokeExact(dwMessage, pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DoEnvironmentSubstA$MH() {
        return RuntimeHelper.requireNonNull(constants$752.DoEnvironmentSubstA$MH,"DoEnvironmentSubstA");
    }
    public static int DoEnvironmentSubstA ( Addressable pszSrc,  int cchSrc) {
        var mh$ = DoEnvironmentSubstA$MH();
        try {
            return (int)mh$.invokeExact(pszSrc, cchSrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DoEnvironmentSubstW$MH() {
        return RuntimeHelper.requireNonNull(constants$752.DoEnvironmentSubstW$MH,"DoEnvironmentSubstW");
    }
    public static int DoEnvironmentSubstW ( Addressable pszSrc,  int cchSrc) {
        var mh$ = DoEnvironmentSubstW$MH();
        try {
            return (int)mh$.invokeExact(pszSrc, cchSrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractIconExA$MH() {
        return RuntimeHelper.requireNonNull(constants$752.ExtractIconExA$MH,"ExtractIconExA");
    }
    public static int ExtractIconExA ( Addressable lpszFile,  int nIconIndex,  Addressable phiconLarge,  Addressable phiconSmall,  int nIcons) {
        var mh$ = ExtractIconExA$MH();
        try {
            return (int)mh$.invokeExact(lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtractIconExW$MH() {
        return RuntimeHelper.requireNonNull(constants$752.ExtractIconExW$MH,"ExtractIconExW");
    }
    public static int ExtractIconExW ( Addressable lpszFile,  int nIconIndex,  Addressable phiconLarge,  Addressable phiconSmall,  int nIcons) {
        var mh$ = ExtractIconExW$MH();
        try {
            return (int)mh$.invokeExact(lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPSHFILEOPSTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSHFILEOPSTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSHFILEOPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SHFileOperationA$MH() {
        return RuntimeHelper.requireNonNull(constants$752.SHFileOperationA$MH,"SHFileOperationA");
    }
    public static int SHFileOperationA ( Addressable lpFileOp) {
        var mh$ = SHFileOperationA$MH();
        try {
            return (int)mh$.invokeExact(lpFileOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHFileOperationW$MH() {
        return RuntimeHelper.requireNonNull(constants$753.SHFileOperationW$MH,"SHFileOperationW");
    }
    public static int SHFileOperationW ( Addressable lpFileOp) {
        var mh$ = SHFileOperationW$MH();
        try {
            return (int)mh$.invokeExact(lpFileOp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHFreeNameMappings$MH() {
        return RuntimeHelper.requireNonNull(constants$753.SHFreeNameMappings$MH,"SHFreeNameMappings");
    }
    public static void SHFreeNameMappings ( Addressable hNameMappings) {
        var mh$ = SHFreeNameMappings$MH();
        try {
            mh$.invokeExact(hNameMappings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPSHNAMEMAPPINGA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSHNAMEMAPPINGW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSHNAMEMAPPING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSHELLEXECUTEINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSHELLEXECUTEINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSHELLEXECUTEINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ShellExecuteExA$MH() {
        return RuntimeHelper.requireNonNull(constants$753.ShellExecuteExA$MH,"ShellExecuteExA");
    }
    public static int ShellExecuteExA ( Addressable pExecInfo) {
        var mh$ = ShellExecuteExA$MH();
        try {
            return (int)mh$.invokeExact(pExecInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellExecuteExW$MH() {
        return RuntimeHelper.requireNonNull(constants$753.ShellExecuteExW$MH,"ShellExecuteExW");
    }
    public static int ShellExecuteExW ( Addressable pExecInfo) {
        var mh$ = ShellExecuteExW$MH();
        try {
            return (int)mh$.invokeExact(pExecInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSHCREATEPROCESSINFOW = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SHCreateProcessAsUserW$MH() {
        return RuntimeHelper.requireNonNull(constants$753.SHCreateProcessAsUserW$MH,"SHCreateProcessAsUserW");
    }
    public static int SHCreateProcessAsUserW ( Addressable pscpi) {
        var mh$ = SHCreateProcessAsUserW$MH();
        try {
            return (int)mh$.invokeExact(pscpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEvaluateSystemCommandTemplate$MH() {
        return RuntimeHelper.requireNonNull(constants$753.SHEvaluateSystemCommandTemplate$MH,"SHEvaluateSystemCommandTemplate");
    }
    public static int SHEvaluateSystemCommandTemplate ( Addressable pszCmdTemplate,  Addressable ppszApplication,  Addressable ppszCommandLine,  Addressable ppszParameters) {
        var mh$ = SHEvaluateSystemCommandTemplate$MH();
        try {
            return (int)mh$.invokeExact(pszCmdTemplate, ppszApplication, ppszCommandLine, ppszParameters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ASSOCCLASS_SHELL_KEY() {
        return (int)0L;
    }
    public static int ASSOCCLASS_PROGID_KEY() {
        return (int)1L;
    }
    public static int ASSOCCLASS_PROGID_STR() {
        return (int)2L;
    }
    public static int ASSOCCLASS_CLSID_KEY() {
        return (int)3L;
    }
    public static int ASSOCCLASS_CLSID_STR() {
        return (int)4L;
    }
    public static int ASSOCCLASS_APP_KEY() {
        return (int)5L;
    }
    public static int ASSOCCLASS_APP_STR() {
        return (int)6L;
    }
    public static int ASSOCCLASS_SYSTEM_STR() {
        return (int)7L;
    }
    public static int ASSOCCLASS_FOLDER() {
        return (int)8L;
    }
    public static int ASSOCCLASS_STAR() {
        return (int)9L;
    }
    public static int ASSOCCLASS_FIXED_PROGID_STR() {
        return (int)10L;
    }
    public static int ASSOCCLASS_PROTOCOL_STR() {
        return (int)11L;
    }
    public static MethodHandle AssocCreateForClasses$MH() {
        return RuntimeHelper.requireNonNull(constants$754.AssocCreateForClasses$MH,"AssocCreateForClasses");
    }
    public static int AssocCreateForClasses ( Addressable rgClasses,  int cClasses,  Addressable riid,  Addressable ppv) {
        var mh$ = AssocCreateForClasses$MH();
        try {
            return (int)mh$.invokeExact(rgClasses, cClasses, riid, ppv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPSHQUERYRBINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SHQueryRecycleBinA$MH() {
        return RuntimeHelper.requireNonNull(constants$754.SHQueryRecycleBinA$MH,"SHQueryRecycleBinA");
    }
    public static int SHQueryRecycleBinA ( Addressable pszRootPath,  Addressable pSHQueryRBInfo) {
        var mh$ = SHQueryRecycleBinA$MH();
        try {
            return (int)mh$.invokeExact(pszRootPath, pSHQueryRBInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHQueryRecycleBinW$MH() {
        return RuntimeHelper.requireNonNull(constants$754.SHQueryRecycleBinW$MH,"SHQueryRecycleBinW");
    }
    public static int SHQueryRecycleBinW ( Addressable pszRootPath,  Addressable pSHQueryRBInfo) {
        var mh$ = SHQueryRecycleBinW$MH();
        try {
            return (int)mh$.invokeExact(pszRootPath, pSHQueryRBInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEmptyRecycleBinA$MH() {
        return RuntimeHelper.requireNonNull(constants$754.SHEmptyRecycleBinA$MH,"SHEmptyRecycleBinA");
    }
    public static int SHEmptyRecycleBinA ( Addressable hwnd,  Addressable pszRootPath,  int dwFlags) {
        var mh$ = SHEmptyRecycleBinA$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pszRootPath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEmptyRecycleBinW$MH() {
        return RuntimeHelper.requireNonNull(constants$754.SHEmptyRecycleBinW$MH,"SHEmptyRecycleBinW");
    }
    public static int SHEmptyRecycleBinW ( Addressable hwnd,  Addressable pszRootPath,  int dwFlags) {
        var mh$ = SHEmptyRecycleBinW$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pszRootPath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int QUNS_NOT_PRESENT() {
        return (int)1L;
    }
    public static int QUNS_BUSY() {
        return (int)2L;
    }
    public static int QUNS_RUNNING_D3D_FULL_SCREEN() {
        return (int)3L;
    }
    public static int QUNS_PRESENTATION_MODE() {
        return (int)4L;
    }
    public static int QUNS_ACCEPTS_NOTIFICATIONS() {
        return (int)5L;
    }
    public static int QUNS_QUIET_TIME() {
        return (int)6L;
    }
    public static int QUNS_APP() {
        return (int)7L;
    }
    public static MethodHandle SHQueryUserNotificationState$MH() {
        return RuntimeHelper.requireNonNull(constants$754.SHQueryUserNotificationState$MH,"SHQueryUserNotificationState");
    }
    public static int SHQueryUserNotificationState ( Addressable pquns) {
        var mh$ = SHQueryUserNotificationState$MH();
        try {
            return (int)mh$.invokeExact(pquns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetPropertyStoreForWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$755.SHGetPropertyStoreForWindow$MH,"SHGetPropertyStoreForWindow");
    }
    public static int SHGetPropertyStoreForWindow ( Addressable hwnd,  Addressable riid,  Addressable ppv) {
        var mh$ = SHGetPropertyStoreForWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, riid, ppv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PNOTIFYICONDATAA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNOTIFYICONDATAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNOTIFYICONDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNOTIFYICONIDENTIFIER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle Shell_NotifyIconA$MH() {
        return RuntimeHelper.requireNonNull(constants$755.Shell_NotifyIconA$MH,"Shell_NotifyIconA");
    }
    public static int Shell_NotifyIconA ( int dwMessage,  Addressable lpData) {
        var mh$ = Shell_NotifyIconA$MH();
        try {
            return (int)mh$.invokeExact(dwMessage, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Shell_NotifyIconW$MH() {
        return RuntimeHelper.requireNonNull(constants$755.Shell_NotifyIconW$MH,"Shell_NotifyIconW");
    }
    public static int Shell_NotifyIconW ( int dwMessage,  Addressable lpData) {
        var mh$ = Shell_NotifyIconW$MH();
        try {
            return (int)mh$.invokeExact(dwMessage, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Shell_NotifyIconGetRect$MH() {
        return RuntimeHelper.requireNonNull(constants$755.Shell_NotifyIconGetRect$MH,"Shell_NotifyIconGetRect");
    }
    public static int Shell_NotifyIconGetRect ( Addressable identifier,  Addressable iconLocation) {
        var mh$ = Shell_NotifyIconGetRect$MH();
        try {
            return (int)mh$.invokeExact(identifier, iconLocation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetFileInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$755.SHGetFileInfoA$MH,"SHGetFileInfoA");
    }
    public static long SHGetFileInfoA ( Addressable pszPath,  int dwFileAttributes,  Addressable psfi,  int cbFileInfo,  int uFlags) {
        var mh$ = SHGetFileInfoA$MH();
        try {
            return (long)mh$.invokeExact(pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetFileInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$755.SHGetFileInfoW$MH,"SHGetFileInfoW");
    }
    public static long SHGetFileInfoW ( Addressable pszPath,  int dwFileAttributes,  Addressable psfi,  int cbFileInfo,  int uFlags) {
        var mh$ = SHGetFileInfoW$MH();
        try {
            return (long)mh$.invokeExact(pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SIID_DOCNOASSOC() {
        return (int)0L;
    }
    public static int SIID_DOCASSOC() {
        return (int)1L;
    }
    public static int SIID_APPLICATION() {
        return (int)2L;
    }
    public static int SIID_FOLDER() {
        return (int)3L;
    }
    public static int SIID_FOLDEROPEN() {
        return (int)4L;
    }
    public static int SIID_DRIVE525() {
        return (int)5L;
    }
    public static int SIID_DRIVE35() {
        return (int)6L;
    }
    public static int SIID_DRIVEREMOVE() {
        return (int)7L;
    }
    public static int SIID_DRIVEFIXED() {
        return (int)8L;
    }
    public static int SIID_DRIVENET() {
        return (int)9L;
    }
    public static int SIID_DRIVENETDISABLED() {
        return (int)10L;
    }
    public static int SIID_DRIVECD() {
        return (int)11L;
    }
    public static int SIID_DRIVERAM() {
        return (int)12L;
    }
    public static int SIID_WORLD() {
        return (int)13L;
    }
    public static int SIID_SERVER() {
        return (int)15L;
    }
    public static int SIID_PRINTER() {
        return (int)16L;
    }
    public static int SIID_MYNETWORK() {
        return (int)17L;
    }
    public static int SIID_FIND() {
        return (int)22L;
    }
    public static int SIID_HELP() {
        return (int)23L;
    }
    public static int SIID_SHARE() {
        return (int)28L;
    }
    public static int SIID_LINK() {
        return (int)29L;
    }
    public static int SIID_SLOWFILE() {
        return (int)30L;
    }
    public static int SIID_RECYCLER() {
        return (int)31L;
    }
    public static int SIID_RECYCLERFULL() {
        return (int)32L;
    }
    public static int SIID_MEDIACDAUDIO() {
        return (int)40L;
    }
    public static int SIID_LOCK() {
        return (int)47L;
    }
    public static int SIID_AUTOLIST() {
        return (int)49L;
    }
    public static int SIID_PRINTERNET() {
        return (int)50L;
    }
    public static int SIID_SERVERSHARE() {
        return (int)51L;
    }
    public static int SIID_PRINTERFAX() {
        return (int)52L;
    }
    public static int SIID_PRINTERFAXNET() {
        return (int)53L;
    }
    public static int SIID_PRINTERFILE() {
        return (int)54L;
    }
    public static int SIID_STACK() {
        return (int)55L;
    }
    public static int SIID_MEDIASVCD() {
        return (int)56L;
    }
    public static int SIID_STUFFEDFOLDER() {
        return (int)57L;
    }
    public static int SIID_DRIVEUNKNOWN() {
        return (int)58L;
    }
    public static int SIID_DRIVEDVD() {
        return (int)59L;
    }
    public static int SIID_MEDIADVD() {
        return (int)60L;
    }
    public static int SIID_MEDIADVDRAM() {
        return (int)61L;
    }
    public static int SIID_MEDIADVDRW() {
        return (int)62L;
    }
    public static int SIID_MEDIADVDR() {
        return (int)63L;
    }
    public static int SIID_MEDIADVDROM() {
        return (int)64L;
    }
    public static int SIID_MEDIACDAUDIOPLUS() {
        return (int)65L;
    }
    public static int SIID_MEDIACDRW() {
        return (int)66L;
    }
    public static int SIID_MEDIACDR() {
        return (int)67L;
    }
    public static int SIID_MEDIACDBURN() {
        return (int)68L;
    }
    public static int SIID_MEDIABLANKCD() {
        return (int)69L;
    }
    public static int SIID_MEDIACDROM() {
        return (int)70L;
    }
    public static int SIID_AUDIOFILES() {
        return (int)71L;
    }
    public static int SIID_IMAGEFILES() {
        return (int)72L;
    }
    public static int SIID_VIDEOFILES() {
        return (int)73L;
    }
    public static int SIID_MIXEDFILES() {
        return (int)74L;
    }
    public static int SIID_FOLDERBACK() {
        return (int)75L;
    }
    public static int SIID_FOLDERFRONT() {
        return (int)76L;
    }
    public static int SIID_SHIELD() {
        return (int)77L;
    }
    public static int SIID_WARNING() {
        return (int)78L;
    }
    public static int SIID_INFO() {
        return (int)79L;
    }
    public static int SIID_ERROR() {
        return (int)80L;
    }
    public static int SIID_KEY() {
        return (int)81L;
    }
    public static int SIID_SOFTWARE() {
        return (int)82L;
    }
    public static int SIID_RENAME() {
        return (int)83L;
    }
    public static int SIID_DELETE() {
        return (int)84L;
    }
    public static int SIID_MEDIAAUDIODVD() {
        return (int)85L;
    }
    public static int SIID_MEDIAMOVIEDVD() {
        return (int)86L;
    }
    public static int SIID_MEDIAENHANCEDCD() {
        return (int)87L;
    }
    public static int SIID_MEDIAENHANCEDDVD() {
        return (int)88L;
    }
    public static int SIID_MEDIAHDDVD() {
        return (int)89L;
    }
    public static int SIID_MEDIABLURAY() {
        return (int)90L;
    }
    public static int SIID_MEDIAVCD() {
        return (int)91L;
    }
    public static int SIID_MEDIADVDPLUSR() {
        return (int)92L;
    }
    public static int SIID_MEDIADVDPLUSRW() {
        return (int)93L;
    }
    public static int SIID_DESKTOPPC() {
        return (int)94L;
    }
    public static int SIID_MOBILEPC() {
        return (int)95L;
    }
    public static int SIID_USERS() {
        return (int)96L;
    }
    public static int SIID_MEDIASMARTMEDIA() {
        return (int)97L;
    }
    public static int SIID_MEDIACOMPACTFLASH() {
        return (int)98L;
    }
    public static int SIID_DEVICECELLPHONE() {
        return (int)99L;
    }
    public static int SIID_DEVICECAMERA() {
        return (int)100L;
    }
    public static int SIID_DEVICEVIDEOCAMERA() {
        return (int)101L;
    }
    public static int SIID_DEVICEAUDIOPLAYER() {
        return (int)102L;
    }
    public static int SIID_NETWORKCONNECT() {
        return (int)103L;
    }
    public static int SIID_INTERNET() {
        return (int)104L;
    }
    public static int SIID_ZIPFILE() {
        return (int)105L;
    }
    public static int SIID_SETTINGS() {
        return (int)106L;
    }
    public static int SIID_DRIVEHDDVD() {
        return (int)132L;
    }
    public static int SIID_DRIVEBD() {
        return (int)133L;
    }
    public static int SIID_MEDIAHDDVDROM() {
        return (int)134L;
    }
    public static int SIID_MEDIAHDDVDR() {
        return (int)135L;
    }
    public static int SIID_MEDIAHDDVDRAM() {
        return (int)136L;
    }
    public static int SIID_MEDIABDROM() {
        return (int)137L;
    }
    public static int SIID_MEDIABDR() {
        return (int)138L;
    }
    public static int SIID_MEDIABDRE() {
        return (int)139L;
    }
    public static int SIID_CLUSTEREDDRIVE() {
        return (int)140L;
    }
    public static int SIID_MAX_ICONS() {
        return (int)181L;
    }
    public static MethodHandle SHGetStockIconInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$756.SHGetStockIconInfo$MH,"SHGetStockIconInfo");
    }
    public static int SHGetStockIconInfo ( int siid,  int uFlags,  Addressable psii) {
        var mh$ = SHGetStockIconInfo$MH();
        try {
            return (int)mh$.invokeExact(siid, uFlags, psii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetDiskFreeSpaceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$756.SHGetDiskFreeSpaceExA$MH,"SHGetDiskFreeSpaceExA");
    }
    public static int SHGetDiskFreeSpaceExA ( Addressable pszDirectoryName,  Addressable pulFreeBytesAvailableToCaller,  Addressable pulTotalNumberOfBytes,  Addressable pulTotalNumberOfFreeBytes) {
        var mh$ = SHGetDiskFreeSpaceExA$MH();
        try {
            return (int)mh$.invokeExact(pszDirectoryName, pulFreeBytesAvailableToCaller, pulTotalNumberOfBytes, pulTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetDiskFreeSpaceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$756.SHGetDiskFreeSpaceExW$MH,"SHGetDiskFreeSpaceExW");
    }
    public static int SHGetDiskFreeSpaceExW ( Addressable pszDirectoryName,  Addressable pulFreeBytesAvailableToCaller,  Addressable pulTotalNumberOfBytes,  Addressable pulTotalNumberOfFreeBytes) {
        var mh$ = SHGetDiskFreeSpaceExW$MH();
        try {
            return (int)mh$.invokeExact(pszDirectoryName, pulFreeBytesAvailableToCaller, pulTotalNumberOfBytes, pulTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetNewLinkInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$756.SHGetNewLinkInfoA$MH,"SHGetNewLinkInfoA");
    }
    public static int SHGetNewLinkInfoA ( Addressable pszLinkTo,  Addressable pszDir,  Addressable pszName,  Addressable pfMustCopy,  int uFlags) {
        var mh$ = SHGetNewLinkInfoA$MH();
        try {
            return (int)mh$.invokeExact(pszLinkTo, pszDir, pszName, pfMustCopy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetNewLinkInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$756.SHGetNewLinkInfoW$MH,"SHGetNewLinkInfoW");
    }
    public static int SHGetNewLinkInfoW ( Addressable pszLinkTo,  Addressable pszDir,  Addressable pszName,  Addressable pfMustCopy,  int uFlags) {
        var mh$ = SHGetNewLinkInfoW$MH();
        try {
            return (int)mh$.invokeExact(pszLinkTo, pszDir, pszName, pfMustCopy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHInvokePrinterCommandA$MH() {
        return RuntimeHelper.requireNonNull(constants$756.SHInvokePrinterCommandA$MH,"SHInvokePrinterCommandA");
    }
    public static int SHInvokePrinterCommandA ( Addressable hwnd,  int uAction,  Addressable lpBuf1,  Addressable lpBuf2,  int fModal) {
        var mh$ = SHInvokePrinterCommandA$MH();
        try {
            return (int)mh$.invokeExact(hwnd, uAction, lpBuf1, lpBuf2, fModal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHInvokePrinterCommandW$MH() {
        return RuntimeHelper.requireNonNull(constants$757.SHInvokePrinterCommandW$MH,"SHInvokePrinterCommandW");
    }
    public static int SHInvokePrinterCommandW ( Addressable hwnd,  int uAction,  Addressable lpBuf1,  Addressable lpBuf2,  int fModal) {
        var mh$ = SHInvokePrinterCommandW$MH();
        try {
            return (int)mh$.invokeExact(hwnd, uAction, lpBuf1, lpBuf2, fModal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress POPEN_PRINTER_PROPS_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPEN_PRINTER_PROPS_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPEN_PRINTER_PROPS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SHLoadNonloadedIconOverlayIdentifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$757.SHLoadNonloadedIconOverlayIdentifiers$MH,"SHLoadNonloadedIconOverlayIdentifiers");
    }
    public static int SHLoadNonloadedIconOverlayIdentifiers () {
        var mh$ = SHLoadNonloadedIconOverlayIdentifiers$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHIsFileAvailableOffline$MH() {
        return RuntimeHelper.requireNonNull(constants$757.SHIsFileAvailableOffline$MH,"SHIsFileAvailableOffline");
    }
    public static int SHIsFileAvailableOffline ( Addressable pwszPath,  Addressable pdwStatus) {
        var mh$ = SHIsFileAvailableOffline$MH();
        try {
            return (int)mh$.invokeExact(pwszPath, pdwStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHSetLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$757.SHSetLocalizedName$MH,"SHSetLocalizedName");
    }
    public static int SHSetLocalizedName ( Addressable pszPath,  Addressable pszResModule,  int idsRes) {
        var mh$ = SHSetLocalizedName$MH();
        try {
            return (int)mh$.invokeExact(pszPath, pszResModule, idsRes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHRemoveLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$757.SHRemoveLocalizedName$MH,"SHRemoveLocalizedName");
    }
    public static int SHRemoveLocalizedName ( Addressable pszPath) {
        var mh$ = SHRemoveLocalizedName$MH();
        try {
            return (int)mh$.invokeExact(pszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$757.SHGetLocalizedName$MH,"SHGetLocalizedName");
    }
    public static int SHGetLocalizedName ( Addressable pszPath,  Addressable pszResModule,  int cch,  Addressable pidsRes) {
        var mh$ = SHGetLocalizedName$MH();
        try {
            return (int)mh$.invokeExact(pszPath, pszResModule, cch, pidsRes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellMessageBoxA$MH() {
        return RuntimeHelper.requireNonNull(constants$758.ShellMessageBoxA$MH,"ShellMessageBoxA");
    }
    public static int ShellMessageBoxA ( Addressable hAppInst,  Addressable hWnd,  Addressable lpcText,  Addressable lpcTitle,  int fuStyle, Object... x5) {
        var mh$ = ShellMessageBoxA$MH();
        try {
            return (int)mh$.invokeExact(hAppInst, hWnd, lpcText, lpcTitle, fuStyle, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellMessageBoxW$MH() {
        return RuntimeHelper.requireNonNull(constants$758.ShellMessageBoxW$MH,"ShellMessageBoxW");
    }
    public static int ShellMessageBoxW ( Addressable hAppInst,  Addressable hWnd,  Addressable lpcText,  Addressable lpcTitle,  int fuStyle, Object... x5) {
        var mh$ = ShellMessageBoxW$MH();
        try {
            return (int)mh$.invokeExact(hAppInst, hWnd, lpcText, lpcTitle, fuStyle, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsLFNDriveA$MH() {
        return RuntimeHelper.requireNonNull(constants$758.IsLFNDriveA$MH,"IsLFNDriveA");
    }
    public static int IsLFNDriveA ( Addressable pszPath) {
        var mh$ = IsLFNDriveA$MH();
        try {
            return (int)mh$.invokeExact(pszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsLFNDriveW$MH() {
        return RuntimeHelper.requireNonNull(constants$758.IsLFNDriveW$MH,"IsLFNDriveW");
    }
    public static int IsLFNDriveW ( Addressable pszPath) {
        var mh$ = IsLFNDriveW$MH();
        try {
            return (int)mh$.invokeExact(pszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEnumerateUnreadMailAccountsA$MH() {
        return RuntimeHelper.requireNonNull(constants$758.SHEnumerateUnreadMailAccountsA$MH,"SHEnumerateUnreadMailAccountsA");
    }
    public static int SHEnumerateUnreadMailAccountsA ( Addressable hKeyUser,  int dwIndex,  Addressable pszMailAddress,  int cchMailAddress) {
        var mh$ = SHEnumerateUnreadMailAccountsA$MH();
        try {
            return (int)mh$.invokeExact(hKeyUser, dwIndex, pszMailAddress, cchMailAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEnumerateUnreadMailAccountsW$MH() {
        return RuntimeHelper.requireNonNull(constants$758.SHEnumerateUnreadMailAccountsW$MH,"SHEnumerateUnreadMailAccountsW");
    }
    public static int SHEnumerateUnreadMailAccountsW ( Addressable hKeyUser,  int dwIndex,  Addressable pszMailAddress,  int cchMailAddress) {
        var mh$ = SHEnumerateUnreadMailAccountsW$MH();
        try {
            return (int)mh$.invokeExact(hKeyUser, dwIndex, pszMailAddress, cchMailAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetUnreadMailCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$759.SHGetUnreadMailCountA$MH,"SHGetUnreadMailCountA");
    }
    public static int SHGetUnreadMailCountA ( Addressable hKeyUser,  Addressable pszMailAddress,  Addressable pdwCount,  Addressable pFileTime,  Addressable pszShellExecuteCommand,  int cchShellExecuteCommand) {
        var mh$ = SHGetUnreadMailCountA$MH();
        try {
            return (int)mh$.invokeExact(hKeyUser, pszMailAddress, pdwCount, pFileTime, pszShellExecuteCommand, cchShellExecuteCommand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetUnreadMailCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$759.SHGetUnreadMailCountW$MH,"SHGetUnreadMailCountW");
    }
    public static int SHGetUnreadMailCountW ( Addressable hKeyUser,  Addressable pszMailAddress,  Addressable pdwCount,  Addressable pFileTime,  Addressable pszShellExecuteCommand,  int cchShellExecuteCommand) {
        var mh$ = SHGetUnreadMailCountW$MH();
        try {
            return (int)mh$.invokeExact(hKeyUser, pszMailAddress, pdwCount, pFileTime, pszShellExecuteCommand, cchShellExecuteCommand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHSetUnreadMailCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$759.SHSetUnreadMailCountA$MH,"SHSetUnreadMailCountA");
    }
    public static int SHSetUnreadMailCountA ( Addressable pszMailAddress,  int dwCount,  Addressable pszShellExecuteCommand) {
        var mh$ = SHSetUnreadMailCountA$MH();
        try {
            return (int)mh$.invokeExact(pszMailAddress, dwCount, pszShellExecuteCommand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHSetUnreadMailCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$759.SHSetUnreadMailCountW$MH,"SHSetUnreadMailCountW");
    }
    public static int SHSetUnreadMailCountW ( Addressable pszMailAddress,  int dwCount,  Addressable pszShellExecuteCommand) {
        var mh$ = SHSetUnreadMailCountW$MH();
        try {
            return (int)mh$.invokeExact(pszMailAddress, dwCount, pszShellExecuteCommand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHTestTokenMembership$MH() {
        return RuntimeHelper.requireNonNull(constants$759.SHTestTokenMembership$MH,"SHTestTokenMembership");
    }
    public static int SHTestTokenMembership ( Addressable hToken,  int ulRID) {
        var mh$ = SHTestTokenMembership$MH();
        try {
            return (int)mh$.invokeExact(hToken, ulRID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetImageList$MH() {
        return RuntimeHelper.requireNonNull(constants$759.SHGetImageList$MH,"SHGetImageList");
    }
    public static int SHGetImageList ( int iImageList,  Addressable riid,  Addressable ppvObj) {
        var mh$ = SHGetImageList$MH();
        try {
            return (int)mh$.invokeExact(iImageList, riid, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitNetworkAddressControl$MH() {
        return RuntimeHelper.requireNonNull(constants$760.InitNetworkAddressControl$MH,"InitNetworkAddressControl");
    }
    public static int InitNetworkAddressControl () {
        var mh$ = InitNetworkAddressControl$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PNC_ADDRESS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SHGetDriveMedia$MH() {
        return RuntimeHelper.requireNonNull(constants$760.SHGetDriveMedia$MH,"SHGetDriveMedia");
    }
    public static int SHGetDriveMedia ( Addressable pszDrive,  Addressable pdwMediaContent) {
        var mh$ = SHGetDriveMedia$MH();
        try {
            return (int)mh$.invokeExact(pszDrive, pdwMediaContent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPERF_DATA_BLOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERF_OBJECT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERF_COUNTER_DEFINITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERF_INSTANCE_DEFINITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERF_COUNTER_BLOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMS_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHMAC_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCHANNEL_ALG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKEY_TYPE_SUBTYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_RC4_KEY_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_DES_KEY_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_3DES_KEY_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_AES_128_KEY_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_AES_256_KEY_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_INTEGER_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_UINT_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_OBJID_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_NAME_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_RDN_VALUE_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDATA_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_DATA_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_HASH_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_DIGEST_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_DER_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ATTR_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMS_DH_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptAcquireContextA$MH() {
        return RuntimeHelper.requireNonNull(constants$762.CryptAcquireContextA$MH,"CryptAcquireContextA");
    }
    public static int CryptAcquireContextA ( Addressable phProv,  Addressable szContainer,  Addressable szProvider,  int dwProvType,  int dwFlags) {
        var mh$ = CryptAcquireContextA$MH();
        try {
            return (int)mh$.invokeExact(phProv, szContainer, szProvider, dwProvType, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptAcquireContextW$MH() {
        return RuntimeHelper.requireNonNull(constants$762.CryptAcquireContextW$MH,"CryptAcquireContextW");
    }
    public static int CryptAcquireContextW ( Addressable phProv,  Addressable szContainer,  Addressable szProvider,  int dwProvType,  int dwFlags) {
        var mh$ = CryptAcquireContextW$MH();
        try {
            return (int)mh$.invokeExact(phProv, szContainer, szProvider, dwProvType, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$762.CryptReleaseContext$MH,"CryptReleaseContext");
    }
    public static int CryptReleaseContext ( long hProv,  int dwFlags) {
        var mh$ = CryptReleaseContext$MH();
        try {
            return (int)mh$.invokeExact(hProv, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGenKey$MH() {
        return RuntimeHelper.requireNonNull(constants$762.CryptGenKey$MH,"CryptGenKey");
    }
    public static int CryptGenKey ( long hProv,  int Algid,  int dwFlags,  Addressable phKey) {
        var mh$ = CryptGenKey$MH();
        try {
            return (int)mh$.invokeExact(hProv, Algid, dwFlags, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDeriveKey$MH() {
        return RuntimeHelper.requireNonNull(constants$763.CryptDeriveKey$MH,"CryptDeriveKey");
    }
    public static int CryptDeriveKey ( long hProv,  int Algid,  long hBaseData,  int dwFlags,  Addressable phKey) {
        var mh$ = CryptDeriveKey$MH();
        try {
            return (int)mh$.invokeExact(hProv, Algid, hBaseData, dwFlags, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDestroyKey$MH() {
        return RuntimeHelper.requireNonNull(constants$763.CryptDestroyKey$MH,"CryptDestroyKey");
    }
    public static int CryptDestroyKey ( long hKey) {
        var mh$ = CryptDestroyKey$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetKeyParam$MH() {
        return RuntimeHelper.requireNonNull(constants$763.CryptSetKeyParam$MH,"CryptSetKeyParam");
    }
    public static int CryptSetKeyParam ( long hKey,  int dwParam,  Addressable pbData,  int dwFlags) {
        var mh$ = CryptSetKeyParam$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwParam, pbData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetKeyParam$MH() {
        return RuntimeHelper.requireNonNull(constants$763.CryptGetKeyParam$MH,"CryptGetKeyParam");
    }
    public static int CryptGetKeyParam ( long hKey,  int dwParam,  Addressable pbData,  Addressable pdwDataLen,  int dwFlags) {
        var mh$ = CryptGetKeyParam$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwParam, pbData, pdwDataLen, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetHashParam$MH() {
        return RuntimeHelper.requireNonNull(constants$763.CryptSetHashParam$MH,"CryptSetHashParam");
    }
    public static int CryptSetHashParam ( long hHash,  int dwParam,  Addressable pbData,  int dwFlags) {
        var mh$ = CryptSetHashParam$MH();
        try {
            return (int)mh$.invokeExact(hHash, dwParam, pbData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetHashParam$MH() {
        return RuntimeHelper.requireNonNull(constants$763.CryptGetHashParam$MH,"CryptGetHashParam");
    }
    public static int CryptGetHashParam ( long hHash,  int dwParam,  Addressable pbData,  Addressable pdwDataLen,  int dwFlags) {
        var mh$ = CryptGetHashParam$MH();
        try {
            return (int)mh$.invokeExact(hHash, dwParam, pbData, pdwDataLen, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProvParam$MH() {
        return RuntimeHelper.requireNonNull(constants$764.CryptSetProvParam$MH,"CryptSetProvParam");
    }
    public static int CryptSetProvParam ( long hProv,  int dwParam,  Addressable pbData,  int dwFlags) {
        var mh$ = CryptSetProvParam$MH();
        try {
            return (int)mh$.invokeExact(hProv, dwParam, pbData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetProvParam$MH() {
        return RuntimeHelper.requireNonNull(constants$764.CryptGetProvParam$MH,"CryptGetProvParam");
    }
    public static int CryptGetProvParam ( long hProv,  int dwParam,  Addressable pbData,  Addressable pdwDataLen,  int dwFlags) {
        var mh$ = CryptGetProvParam$MH();
        try {
            return (int)mh$.invokeExact(hProv, dwParam, pbData, pdwDataLen, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGenRandom$MH() {
        return RuntimeHelper.requireNonNull(constants$764.CryptGenRandom$MH,"CryptGenRandom");
    }
    public static int CryptGenRandom ( long hProv,  int dwLen,  Addressable pbBuffer) {
        var mh$ = CryptGenRandom$MH();
        try {
            return (int)mh$.invokeExact(hProv, dwLen, pbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetUserKey$MH() {
        return RuntimeHelper.requireNonNull(constants$764.CryptGetUserKey$MH,"CryptGetUserKey");
    }
    public static int CryptGetUserKey ( long hProv,  int dwKeySpec,  Addressable phUserKey) {
        var mh$ = CryptGetUserKey$MH();
        try {
            return (int)mh$.invokeExact(hProv, dwKeySpec, phUserKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$764.CryptExportKey$MH,"CryptExportKey");
    }
    public static int CryptExportKey ( long hKey,  long hExpKey,  int dwBlobType,  int dwFlags,  Addressable pbData,  Addressable pdwDataLen) {
        var mh$ = CryptExportKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, hExpKey, dwBlobType, dwFlags, pbData, pdwDataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$764.CryptImportKey$MH,"CryptImportKey");
    }
    public static int CryptImportKey ( long hProv,  Addressable pbData,  int dwDataLen,  long hPubKey,  int dwFlags,  Addressable phKey) {
        var mh$ = CryptImportKey$MH();
        try {
            return (int)mh$.invokeExact(hProv, pbData, dwDataLen, hPubKey, dwFlags, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$765.CryptEncrypt$MH,"CryptEncrypt");
    }
    public static int CryptEncrypt ( long hKey,  long hHash,  int Final,  int dwFlags,  Addressable pbData,  Addressable pdwDataLen,  int dwBufLen) {
        var mh$ = CryptEncrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, hHash, Final, dwFlags, pbData, pdwDataLen, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$765.CryptDecrypt$MH,"CryptDecrypt");
    }
    public static int CryptDecrypt ( long hKey,  long hHash,  int Final,  int dwFlags,  Addressable pbData,  Addressable pdwDataLen) {
        var mh$ = CryptDecrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, hHash, Final, dwFlags, pbData, pdwDataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCreateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$765.CryptCreateHash$MH,"CryptCreateHash");
    }
    public static int CryptCreateHash ( long hProv,  int Algid,  long hKey,  int dwFlags,  Addressable phHash) {
        var mh$ = CryptCreateHash$MH();
        try {
            return (int)mh$.invokeExact(hProv, Algid, hKey, dwFlags, phHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashData$MH() {
        return RuntimeHelper.requireNonNull(constants$765.CryptHashData$MH,"CryptHashData");
    }
    public static int CryptHashData ( long hHash,  Addressable pbData,  int dwDataLen,  int dwFlags) {
        var mh$ = CryptHashData$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbData, dwDataLen, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashSessionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$765.CryptHashSessionKey$MH,"CryptHashSessionKey");
    }
    public static int CryptHashSessionKey ( long hHash,  long hKey,  int dwFlags) {
        var mh$ = CryptHashSessionKey$MH();
        try {
            return (int)mh$.invokeExact(hHash, hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDestroyHash$MH() {
        return RuntimeHelper.requireNonNull(constants$765.CryptDestroyHash$MH,"CryptDestroyHash");
    }
    public static int CryptDestroyHash ( long hHash) {
        var mh$ = CryptDestroyHash$MH();
        try {
            return (int)mh$.invokeExact(hHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignHashA$MH() {
        return RuntimeHelper.requireNonNull(constants$766.CryptSignHashA$MH,"CryptSignHashA");
    }
    public static int CryptSignHashA ( long hHash,  int dwKeySpec,  Addressable szDescription,  int dwFlags,  Addressable pbSignature,  Addressable pdwSigLen) {
        var mh$ = CryptSignHashA$MH();
        try {
            return (int)mh$.invokeExact(hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignHashW$MH() {
        return RuntimeHelper.requireNonNull(constants$766.CryptSignHashW$MH,"CryptSignHashW");
    }
    public static int CryptSignHashW ( long hHash,  int dwKeySpec,  Addressable szDescription,  int dwFlags,  Addressable pbSignature,  Addressable pdwSigLen) {
        var mh$ = CryptSignHashW$MH();
        try {
            return (int)mh$.invokeExact(hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifySignatureA$MH() {
        return RuntimeHelper.requireNonNull(constants$766.CryptVerifySignatureA$MH,"CryptVerifySignatureA");
    }
    public static int CryptVerifySignatureA ( long hHash,  Addressable pbSignature,  int dwSigLen,  long hPubKey,  Addressable szDescription,  int dwFlags) {
        var mh$ = CryptVerifySignatureA$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifySignatureW$MH() {
        return RuntimeHelper.requireNonNull(constants$766.CryptVerifySignatureW$MH,"CryptVerifySignatureW");
    }
    public static int CryptVerifySignatureW ( long hHash,  Addressable pbSignature,  int dwSigLen,  long hPubKey,  Addressable szDescription,  int dwFlags) {
        var mh$ = CryptVerifySignatureW$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderA$MH() {
        return RuntimeHelper.requireNonNull(constants$766.CryptSetProviderA$MH,"CryptSetProviderA");
    }
    public static int CryptSetProviderA ( Addressable pszProvName,  int dwProvType) {
        var mh$ = CryptSetProviderA$MH();
        try {
            return (int)mh$.invokeExact(pszProvName, dwProvType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderW$MH() {
        return RuntimeHelper.requireNonNull(constants$766.CryptSetProviderW$MH,"CryptSetProviderW");
    }
    public static int CryptSetProviderW ( Addressable pszProvName,  int dwProvType) {
        var mh$ = CryptSetProviderW$MH();
        try {
            return (int)mh$.invokeExact(pszProvName, dwProvType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderExA$MH() {
        return RuntimeHelper.requireNonNull(constants$767.CryptSetProviderExA$MH,"CryptSetProviderExA");
    }
    public static int CryptSetProviderExA ( Addressable pszProvName,  int dwProvType,  Addressable pdwReserved,  int dwFlags) {
        var mh$ = CryptSetProviderExA$MH();
        try {
            return (int)mh$.invokeExact(pszProvName, dwProvType, pdwReserved, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderExW$MH() {
        return RuntimeHelper.requireNonNull(constants$767.CryptSetProviderExW$MH,"CryptSetProviderExW");
    }
    public static int CryptSetProviderExW ( Addressable pszProvName,  int dwProvType,  Addressable pdwReserved,  int dwFlags) {
        var mh$ = CryptSetProviderExW$MH();
        try {
            return (int)mh$.invokeExact(pszProvName, dwProvType, pdwReserved, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultProviderA$MH() {
        return RuntimeHelper.requireNonNull(constants$767.CryptGetDefaultProviderA$MH,"CryptGetDefaultProviderA");
    }
    public static int CryptGetDefaultProviderA ( int dwProvType,  Addressable pdwReserved,  int dwFlags,  Addressable pszProvName,  Addressable pcbProvName) {
        var mh$ = CryptGetDefaultProviderA$MH();
        try {
            return (int)mh$.invokeExact(dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultProviderW$MH() {
        return RuntimeHelper.requireNonNull(constants$767.CryptGetDefaultProviderW$MH,"CryptGetDefaultProviderW");
    }
    public static int CryptGetDefaultProviderW ( int dwProvType,  Addressable pdwReserved,  int dwFlags,  Addressable pszProvName,  Addressable pcbProvName) {
        var mh$ = CryptGetDefaultProviderW$MH();
        try {
            return (int)mh$.invokeExact(dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProviderTypesA$MH() {
        return RuntimeHelper.requireNonNull(constants$767.CryptEnumProviderTypesA$MH,"CryptEnumProviderTypesA");
    }
    public static int CryptEnumProviderTypesA ( int dwIndex,  Addressable pdwReserved,  int dwFlags,  Addressable pdwProvType,  Addressable szTypeName,  Addressable pcbTypeName) {
        var mh$ = CryptEnumProviderTypesA$MH();
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProviderTypesW$MH() {
        return RuntimeHelper.requireNonNull(constants$767.CryptEnumProviderTypesW$MH,"CryptEnumProviderTypesW");
    }
    public static int CryptEnumProviderTypesW ( int dwIndex,  Addressable pdwReserved,  int dwFlags,  Addressable pdwProvType,  Addressable szTypeName,  Addressable pcbTypeName) {
        var mh$ = CryptEnumProviderTypesW$MH();
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProvidersA$MH() {
        return RuntimeHelper.requireNonNull(constants$768.CryptEnumProvidersA$MH,"CryptEnumProvidersA");
    }
    public static int CryptEnumProvidersA ( int dwIndex,  Addressable pdwReserved,  int dwFlags,  Addressable pdwProvType,  Addressable szProvName,  Addressable pcbProvName) {
        var mh$ = CryptEnumProvidersA$MH();
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProvidersW$MH() {
        return RuntimeHelper.requireNonNull(constants$768.CryptEnumProvidersW$MH,"CryptEnumProvidersW");
    }
    public static int CryptEnumProvidersW ( int dwIndex,  Addressable pdwReserved,  int dwFlags,  Addressable pdwProvType,  Addressable szProvName,  Addressable pcbProvName) {
        var mh$ = CryptEnumProvidersW$MH();
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptContextAddRef$MH() {
        return RuntimeHelper.requireNonNull(constants$768.CryptContextAddRef$MH,"CryptContextAddRef");
    }
    public static int CryptContextAddRef ( long hProv,  Addressable pdwReserved,  int dwFlags) {
        var mh$ = CryptContextAddRef$MH();
        try {
            return (int)mh$.invokeExact(hProv, pdwReserved, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDuplicateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$768.CryptDuplicateKey$MH,"CryptDuplicateKey");
    }
    public static int CryptDuplicateKey ( long hKey,  Addressable pdwReserved,  int dwFlags,  Addressable phKey) {
        var mh$ = CryptDuplicateKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, pdwReserved, dwFlags, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDuplicateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$768.CryptDuplicateHash$MH,"CryptDuplicateHash");
    }
    public static int CryptDuplicateHash ( long hHash,  Addressable pdwReserved,  int dwFlags,  Addressable phHash) {
        var mh$ = CryptDuplicateHash$MH();
        try {
            return (int)mh$.invokeExact(hHash, pdwReserved, dwFlags, phHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEncSChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$768.GetEncSChannel$MH,"GetEncSChannel");
    }
    public static int GetEncSChannel ( Addressable pData,  Addressable dwDecSize) {
        var mh$ = GetEncSChannel$MH();
        try {
            return (int)mh$.invokeExact(pData, dwDecSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt NTSTATUS = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PNTSTATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBCryptBuffer = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBCryptBufferDesc = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress BCRYPT_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress BCRYPT_ALG_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress BCRYPT_KEY_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress BCRYPT_HASH_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress BCRYPT_SECRET_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBCRYPT_ECCKEY_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSSL_ECCKEY_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static int BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE() {
        return (int)1L;
    }
    public static int BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE() {
        return (int)2L;
    }
    public static int BCRYPT_ECC_PRIME_MONTGOMERY_CURVE() {
        return (int)3L;
    }
    public static int BCRYPT_NO_CURVE_GENERATION_ALG_ID() {
        return (int)0L;
    }
    public static OfAddress PBCRYPT_ECCFULLKEY_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBCRYPT_DH_KEY_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBCRYPT_DSA_KEY_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static int DSA_HASH_ALGORITHM_SHA1() {
        return (int)0L;
    }
    public static int DSA_HASH_ALGORITHM_SHA256() {
        return (int)1L;
    }
    public static int DSA_HASH_ALGORITHM_SHA512() {
        return (int)2L;
    }
    public static int DSA_FIPS186_2() {
        return (int)0L;
    }
    public static int DSA_FIPS186_3() {
        return (int)1L;
    }
    public static OfAddress PBCRYPT_DSA_KEY_BLOB_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBCRYPT_KEY_DATA_BLOB_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static int BCRYPT_HASH_OPERATION_HASH_DATA() {
        return (int)1L;
    }
    public static int BCRYPT_HASH_OPERATION_FINISH_HASH() {
        return (int)2L;
    }
    public static int BCRYPT_OPERATION_TYPE_HASH() {
        return (int)1L;
    }
    public static MethodHandle BCryptOpenAlgorithmProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$769.BCryptOpenAlgorithmProvider$MH,"BCryptOpenAlgorithmProvider");
    }
    public static int BCryptOpenAlgorithmProvider ( Addressable phAlgorithm,  Addressable pszAlgId,  Addressable pszImplementation,  int dwFlags) {
        var mh$ = BCryptOpenAlgorithmProvider$MH();
        try {
            return (int)mh$.invokeExact(phAlgorithm, pszAlgId, pszImplementation, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumAlgorithms$MH() {
        return RuntimeHelper.requireNonNull(constants$769.BCryptEnumAlgorithms$MH,"BCryptEnumAlgorithms");
    }
    public static int BCryptEnumAlgorithms ( int dwAlgOperations,  Addressable pAlgCount,  Addressable ppAlgList,  int dwFlags) {
        var mh$ = BCryptEnumAlgorithms$MH();
        try {
            return (int)mh$.invokeExact(dwAlgOperations, pAlgCount, ppAlgList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$769.BCryptEnumProviders$MH,"BCryptEnumProviders");
    }
    public static int BCryptEnumProviders ( Addressable pszAlgId,  Addressable pImplCount,  Addressable ppImplList,  int dwFlags) {
        var mh$ = BCryptEnumProviders$MH();
        try {
            return (int)mh$.invokeExact(pszAlgId, pImplCount, ppImplList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$769.BCryptGetProperty$MH,"BCryptGetProperty");
    }
    public static int BCryptGetProperty ( Addressable hObject,  Addressable pszProperty,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptGetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$769.BCryptSetProperty$MH,"BCryptSetProperty");
    }
    public static int BCryptSetProperty ( Addressable hObject,  Addressable pszProperty,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = BCryptSetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCloseAlgorithmProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$769.BCryptCloseAlgorithmProvider$MH,"BCryptCloseAlgorithmProvider");
    }
    public static int BCryptCloseAlgorithmProvider ( Addressable hAlgorithm,  int dwFlags) {
        var mh$ = BCryptCloseAlgorithmProvider$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$770.BCryptFreeBuffer$MH,"BCryptFreeBuffer");
    }
    public static void BCryptFreeBuffer ( Addressable pvBuffer) {
        var mh$ = BCryptFreeBuffer$MH();
        try {
            mh$.invokeExact(pvBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenerateSymmetricKey$MH() {
        return RuntimeHelper.requireNonNull(constants$770.BCryptGenerateSymmetricKey$MH,"BCryptGenerateSymmetricKey");
    }
    public static int BCryptGenerateSymmetricKey ( Addressable hAlgorithm,  Addressable phKey,  Addressable pbKeyObject,  int cbKeyObject,  Addressable pbSecret,  int cbSecret,  int dwFlags) {
        var mh$ = BCryptGenerateSymmetricKey$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phKey, pbKeyObject, cbKeyObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenerateKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$770.BCryptGenerateKeyPair$MH,"BCryptGenerateKeyPair");
    }
    public static int BCryptGenerateKeyPair ( Addressable hAlgorithm,  Addressable phKey,  int dwLength,  int dwFlags) {
        var mh$ = BCryptGenerateKeyPair$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phKey, dwLength, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEncrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$770.BCryptEncrypt$MH,"BCryptEncrypt");
    }
    public static int BCryptEncrypt ( Addressable hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbIV,  int cbIV,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptEncrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDecrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$770.BCryptDecrypt$MH,"BCryptDecrypt");
    }
    public static int BCryptDecrypt ( Addressable hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbIV,  int cbIV,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptDecrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptExportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$770.BCryptExportKey$MH,"BCryptExportKey");
    }
    public static int BCryptExportKey ( Addressable hKey,  Addressable hExportKey,  Addressable pszBlobType,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptExportKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, hExportKey, pszBlobType, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptImportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$771.BCryptImportKey$MH,"BCryptImportKey");
    }
    public static int BCryptImportKey ( Addressable hAlgorithm,  Addressable hImportKey,  Addressable pszBlobType,  Addressable phKey,  Addressable pbKeyObject,  int cbKeyObject,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = BCryptImportKey$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, hImportKey, pszBlobType, phKey, pbKeyObject, cbKeyObject, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptImportKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$771.BCryptImportKeyPair$MH,"BCryptImportKeyPair");
    }
    public static int BCryptImportKeyPair ( Addressable hAlgorithm,  Addressable hImportKey,  Addressable pszBlobType,  Addressable phKey,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = BCryptImportKeyPair$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, hImportKey, pszBlobType, phKey, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDuplicateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$771.BCryptDuplicateKey$MH,"BCryptDuplicateKey");
    }
    public static int BCryptDuplicateKey ( Addressable hKey,  Addressable phNewKey,  Addressable pbKeyObject,  int cbKeyObject,  int dwFlags) {
        var mh$ = BCryptDuplicateKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, phNewKey, pbKeyObject, cbKeyObject, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFinalizeKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$771.BCryptFinalizeKeyPair$MH,"BCryptFinalizeKeyPair");
    }
    public static int BCryptFinalizeKeyPair ( Addressable hKey,  int dwFlags) {
        var mh$ = BCryptFinalizeKeyPair$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroyKey$MH() {
        return RuntimeHelper.requireNonNull(constants$771.BCryptDestroyKey$MH,"BCryptDestroyKey");
    }
    public static int BCryptDestroyKey ( Addressable hKey) {
        var mh$ = BCryptDestroyKey$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroySecret$MH() {
        return RuntimeHelper.requireNonNull(constants$771.BCryptDestroySecret$MH,"BCryptDestroySecret");
    }
    public static int BCryptDestroySecret ( Addressable hSecret) {
        var mh$ = BCryptDestroySecret$MH();
        try {
            return (int)mh$.invokeExact(hSecret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSignHash$MH() {
        return RuntimeHelper.requireNonNull(constants$772.BCryptSignHash$MH,"BCryptSignHash");
    }
    public static int BCryptSignHash ( Addressable hKey,  Addressable pPaddingInfo,  Addressable pbInput,  int cbInput,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptSignHash$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbInput, cbInput, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptVerifySignature$MH() {
        return RuntimeHelper.requireNonNull(constants$772.BCryptVerifySignature$MH,"BCryptVerifySignature");
    }
    public static int BCryptVerifySignature ( Addressable hKey,  Addressable pPaddingInfo,  Addressable pbHash,  int cbHash,  Addressable pbSignature,  int cbSignature,  int dwFlags) {
        var mh$ = BCryptVerifySignature$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHash, cbHash, pbSignature, cbSignature, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSecretAgreement$MH() {
        return RuntimeHelper.requireNonNull(constants$772.BCryptSecretAgreement$MH,"BCryptSecretAgreement");
    }
    public static int BCryptSecretAgreement ( Addressable hPrivKey,  Addressable hPubKey,  Addressable phAgreedSecret,  int dwFlags) {
        var mh$ = BCryptSecretAgreement$MH();
        try {
            return (int)mh$.invokeExact(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKey$MH() {
        return RuntimeHelper.requireNonNull(constants$772.BCryptDeriveKey$MH,"BCryptDeriveKey");
    }
    public static int BCryptDeriveKey ( Addressable hSharedSecret,  Addressable pwszKDF,  Addressable pParameterList,  Addressable pbDerivedKey,  int cbDerivedKey,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptDeriveKey$MH();
        try {
            return (int)mh$.invokeExact(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptKeyDerivation$MH() {
        return RuntimeHelper.requireNonNull(constants$772.BCryptKeyDerivation$MH,"BCryptKeyDerivation");
    }
    public static int BCryptKeyDerivation ( Addressable hKey,  Addressable pParameterList,  Addressable pbDerivedKey,  int cbDerivedKey,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptKeyDerivation$MH();
        try {
            return (int)mh$.invokeExact(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCreateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$772.BCryptCreateHash$MH,"BCryptCreateHash");
    }
    public static int BCryptCreateHash ( Addressable hAlgorithm,  Addressable phHash,  Addressable pbHashObject,  int cbHashObject,  Addressable pbSecret,  int cbSecret,  int dwFlags) {
        var mh$ = BCryptCreateHash$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phHash, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptHashData$MH() {
        return RuntimeHelper.requireNonNull(constants$773.BCryptHashData$MH,"BCryptHashData");
    }
    public static int BCryptHashData ( Addressable hHash,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = BCryptHashData$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFinishHash$MH() {
        return RuntimeHelper.requireNonNull(constants$773.BCryptFinishHash$MH,"BCryptFinishHash");
    }
    public static int BCryptFinishHash ( Addressable hHash,  Addressable pbOutput,  int cbOutput,  int dwFlags) {
        var mh$ = BCryptFinishHash$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbOutput, cbOutput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCreateMultiHash$MH() {
        return RuntimeHelper.requireNonNull(constants$773.BCryptCreateMultiHash$MH,"BCryptCreateMultiHash");
    }
    public static int BCryptCreateMultiHash ( Addressable hAlgorithm,  Addressable phHash,  int nHashes,  Addressable pbHashObject,  int cbHashObject,  Addressable pbSecret,  int cbSecret,  int dwFlags) {
        var mh$ = BCryptCreateMultiHash$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phHash, nHashes, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptProcessMultiOperations$MH() {
        return RuntimeHelper.requireNonNull(constants$773.BCryptProcessMultiOperations$MH,"BCryptProcessMultiOperations");
    }
    public static int BCryptProcessMultiOperations ( Addressable hObject,  int operationType,  Addressable pOperations,  int cbOperations,  int dwFlags) {
        var mh$ = BCryptProcessMultiOperations$MH();
        try {
            return (int)mh$.invokeExact(hObject, operationType, pOperations, cbOperations, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDuplicateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$773.BCryptDuplicateHash$MH,"BCryptDuplicateHash");
    }
    public static int BCryptDuplicateHash ( Addressable hHash,  Addressable phNewHash,  Addressable pbHashObject,  int cbHashObject,  int dwFlags) {
        var mh$ = BCryptDuplicateHash$MH();
        try {
            return (int)mh$.invokeExact(hHash, phNewHash, pbHashObject, cbHashObject, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroyHash$MH() {
        return RuntimeHelper.requireNonNull(constants$773.BCryptDestroyHash$MH,"BCryptDestroyHash");
    }
    public static int BCryptDestroyHash ( Addressable hHash) {
        var mh$ = BCryptDestroyHash$MH();
        try {
            return (int)mh$.invokeExact(hHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptHash$MH() {
        return RuntimeHelper.requireNonNull(constants$774.BCryptHash$MH,"BCryptHash");
    }
    public static int BCryptHash ( Addressable hAlgorithm,  Addressable pbSecret,  int cbSecret,  Addressable pbInput,  int cbInput,  Addressable pbOutput,  int cbOutput) {
        var mh$ = BCryptHash$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, pbSecret, cbSecret, pbInput, cbInput, pbOutput, cbOutput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenRandom$MH() {
        return RuntimeHelper.requireNonNull(constants$774.BCryptGenRandom$MH,"BCryptGenRandom");
    }
    public static int BCryptGenRandom ( Addressable hAlgorithm,  Addressable pbBuffer,  int cbBuffer,  int dwFlags) {
        var mh$ = BCryptGenRandom$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, pbBuffer, cbBuffer, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKeyCapi$MH() {
        return RuntimeHelper.requireNonNull(constants$774.BCryptDeriveKeyCapi$MH,"BCryptDeriveKeyCapi");
    }
    public static int BCryptDeriveKeyCapi ( Addressable hHash,  Addressable hTargetAlg,  Addressable pbDerivedKey,  int cbDerivedKey,  int dwFlags) {
        var mh$ = BCryptDeriveKeyCapi$MH();
        try {
            return (int)mh$.invokeExact(hHash, hTargetAlg, pbDerivedKey, cbDerivedKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKeyPBKDF2$MH() {
        return RuntimeHelper.requireNonNull(constants$774.BCryptDeriveKeyPBKDF2$MH,"BCryptDeriveKeyPBKDF2");
    }
    public static int BCryptDeriveKeyPBKDF2 ( Addressable hPrf,  Addressable pbPassword,  int cbPassword,  Addressable pbSalt,  int cbSalt,  long cIterations,  Addressable pbDerivedKey,  int cbDerivedKey,  int dwFlags) {
        var mh$ = BCryptDeriveKeyPBKDF2$MH();
        try {
            return (int)mh$.invokeExact(hPrf, pbPassword, cbPassword, pbSalt, cbSalt, cIterations, pbDerivedKey, cbDerivedKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PBCRYPT_INTERFACE_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_INTERFACE_REG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_IMAGE_REG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PROVIDER_REG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PROVIDERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTEXT_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTEXT_FUNCTION_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTEXTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTEXT_FUNCTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTEXT_FUNCTION_PROVIDERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PROPERTY_REF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_IMAGE_REF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PROVIDER_REF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PROVIDER_REFS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle BCryptQueryProviderRegistration$MH() {
        return RuntimeHelper.requireNonNull(constants$774.BCryptQueryProviderRegistration$MH,"BCryptQueryProviderRegistration");
    }
    public static int BCryptQueryProviderRegistration ( Addressable pszProvider,  int dwMode,  int dwInterface,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptQueryProviderRegistration$MH();
        try {
            return (int)mh$.invokeExact(pszProvider, dwMode, dwInterface, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumRegisteredProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$774.BCryptEnumRegisteredProviders$MH,"BCryptEnumRegisteredProviders");
    }
    public static int BCryptEnumRegisteredProviders ( Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptEnumRegisteredProviders$MH();
        try {
            return (int)mh$.invokeExact(pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$775.BCryptCreateContext$MH,"BCryptCreateContext");
    }
    public static int BCryptCreateContext ( int dwTable,  Addressable pszContext,  Addressable pConfig) {
        var mh$ = BCryptCreateContext$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, pConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$775.BCryptDeleteContext$MH,"BCryptDeleteContext");
    }
    public static int BCryptDeleteContext ( int dwTable,  Addressable pszContext) {
        var mh$ = BCryptDeleteContext$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContexts$MH() {
        return RuntimeHelper.requireNonNull(constants$775.BCryptEnumContexts$MH,"BCryptEnumContexts");
    }
    public static int BCryptEnumContexts ( int dwTable,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptEnumContexts$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptConfigureContext$MH() {
        return RuntimeHelper.requireNonNull(constants$775.BCryptConfigureContext$MH,"BCryptConfigureContext");
    }
    public static int BCryptConfigureContext ( int dwTable,  Addressable pszContext,  Addressable pConfig) {
        var mh$ = BCryptConfigureContext$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, pConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextConfiguration$MH() {
        return RuntimeHelper.requireNonNull(constants$775.BCryptQueryContextConfiguration$MH,"BCryptQueryContextConfiguration");
    }
    public static int BCryptQueryContextConfiguration ( int dwTable,  Addressable pszContext,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptQueryContextConfiguration$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptAddContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$775.BCryptAddContextFunction$MH,"BCryptAddContextFunction");
    }
    public static int BCryptAddContextFunction ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  int dwPosition) {
        var mh$ = BCryptAddContextFunction$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, dwPosition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptRemoveContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$776.BCryptRemoveContextFunction$MH,"BCryptRemoveContextFunction");
    }
    public static int BCryptRemoveContextFunction ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction) {
        var mh$ = BCryptRemoveContextFunction$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContextFunctions$MH() {
        return RuntimeHelper.requireNonNull(constants$776.BCryptEnumContextFunctions$MH,"BCryptEnumContextFunctions");
    }
    public static int BCryptEnumContextFunctions ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptEnumContextFunctions$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptConfigureContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$776.BCryptConfigureContextFunction$MH,"BCryptConfigureContextFunction");
    }
    public static int BCryptConfigureContextFunction ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pConfig) {
        var mh$ = BCryptConfigureContextFunction$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextFunctionConfiguration$MH() {
        return RuntimeHelper.requireNonNull(constants$776.BCryptQueryContextFunctionConfiguration$MH,"BCryptQueryContextFunctionConfiguration");
    }
    public static int BCryptQueryContextFunctionConfiguration ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptQueryContextFunctionConfiguration$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContextFunctionProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$776.BCryptEnumContextFunctionProviders$MH,"BCryptEnumContextFunctionProviders");
    }
    public static int BCryptEnumContextFunctionProviders ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptEnumContextFunctionProviders$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSetContextFunctionProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$776.BCryptSetContextFunctionProperty$MH,"BCryptSetContextFunctionProperty");
    }
    public static int BCryptSetContextFunctionProperty ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pszProperty,  int cbValue,  Addressable pbValue) {
        var mh$ = BCryptSetContextFunctionProperty$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pszProperty, cbValue, pbValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextFunctionProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$777.BCryptQueryContextFunctionProperty$MH,"BCryptQueryContextFunctionProperty");
    }
    public static int BCryptQueryContextFunctionProperty ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pszProperty,  Addressable pcbValue,  Addressable ppbValue) {
        var mh$ = BCryptQueryContextFunctionProperty$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pszProperty, pcbValue, ppbValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptRegisterConfigChangeNotify$MH() {
        return RuntimeHelper.requireNonNull(constants$777.BCryptRegisterConfigChangeNotify$MH,"BCryptRegisterConfigChangeNotify");
    }
    public static int BCryptRegisterConfigChangeNotify ( Addressable phEvent) {
        var mh$ = BCryptRegisterConfigChangeNotify$MH();
        try {
            return (int)mh$.invokeExact(phEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptUnregisterConfigChangeNotify$MH() {
        return RuntimeHelper.requireNonNull(constants$777.BCryptUnregisterConfigChangeNotify$MH,"BCryptUnregisterConfigChangeNotify");
    }
    public static int BCryptUnregisterConfigChangeNotify ( Addressable hEvent) {
        var mh$ = BCryptUnregisterConfigChangeNotify$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptResolveProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$777.BCryptResolveProviders$MH,"BCryptResolveProviders");
    }
    public static int BCryptResolveProviders ( Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pszProvider,  int dwMode,  int dwFlags,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptResolveProviders$MH();
        try {
            return (int)mh$.invokeExact(pszContext, dwInterface, pszFunction, pszProvider, dwMode, dwFlags, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGetFipsAlgorithmMode$MH() {
        return RuntimeHelper.requireNonNull(constants$777.BCryptGetFipsAlgorithmMode$MH,"BCryptGetFipsAlgorithmMode");
    }
    public static int BCryptGetFipsAlgorithmMode ( Addressable pfEnabled) {
        var mh$ = BCryptGetFipsAlgorithmMode$MH();
        try {
            return (int)mh$.invokeExact(pfEnabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CngGetFipsAlgorithmMode$MH() {
        return RuntimeHelper.requireNonNull(constants$777.CngGetFipsAlgorithmMode$MH,"CngGetFipsAlgorithmMode");
    }
    public static byte CngGetFipsAlgorithmMode () {
        var mh$ = CngGetFipsAlgorithmMode$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt SECURITY_STATUS = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PNCryptBuffer = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCryptBufferDesc = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_CIPHER_PADDING_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_VSM_KEY_ATTESTATION_STATEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_EXPORTED_ISOLATED_KEY_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NCryptOpenStorageProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$778.NCryptOpenStorageProvider$MH,"NCryptOpenStorageProvider");
    }
    public static int NCryptOpenStorageProvider ( Addressable phProvider,  Addressable pszProviderName,  int dwFlags) {
        var mh$ = NCryptOpenStorageProvider$MH();
        try {
            return (int)mh$.invokeExact(phProvider, pszProviderName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumAlgorithms$MH() {
        return RuntimeHelper.requireNonNull(constants$778.NCryptEnumAlgorithms$MH,"NCryptEnumAlgorithms");
    }
    public static int NCryptEnumAlgorithms ( long hProvider,  int dwAlgOperations,  Addressable pdwAlgCount,  Addressable ppAlgList,  int dwFlags) {
        var mh$ = NCryptEnumAlgorithms$MH();
        try {
            return (int)mh$.invokeExact(hProvider, dwAlgOperations, pdwAlgCount, ppAlgList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptIsAlgSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$779.NCryptIsAlgSupported$MH,"NCryptIsAlgSupported");
    }
    public static int NCryptIsAlgSupported ( long hProvider,  Addressable pszAlgId,  int dwFlags) {
        var mh$ = NCryptIsAlgSupported$MH();
        try {
            return (int)mh$.invokeExact(hProvider, pszAlgId, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumKeys$MH() {
        return RuntimeHelper.requireNonNull(constants$779.NCryptEnumKeys$MH,"NCryptEnumKeys");
    }
    public static int NCryptEnumKeys ( long hProvider,  Addressable pszScope,  Addressable ppKeyName,  Addressable ppEnumState,  int dwFlags) {
        var mh$ = NCryptEnumKeys$MH();
        try {
            return (int)mh$.invokeExact(hProvider, pszScope, ppKeyName, ppEnumState, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumStorageProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$779.NCryptEnumStorageProviders$MH,"NCryptEnumStorageProviders");
    }
    public static int NCryptEnumStorageProviders ( Addressable pdwProviderCount,  Addressable ppProviderList,  int dwFlags) {
        var mh$ = NCryptEnumStorageProviders$MH();
        try {
            return (int)mh$.invokeExact(pdwProviderCount, ppProviderList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$779.NCryptFreeBuffer$MH,"NCryptFreeBuffer");
    }
    public static int NCryptFreeBuffer ( Addressable pvInput) {
        var mh$ = NCryptFreeBuffer$MH();
        try {
            return (int)mh$.invokeExact(pvInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptOpenKey$MH() {
        return RuntimeHelper.requireNonNull(constants$779.NCryptOpenKey$MH,"NCryptOpenKey");
    }
    public static int NCryptOpenKey ( long hProvider,  Addressable phKey,  Addressable pszKeyName,  int dwLegacyKeySpec,  int dwFlags) {
        var mh$ = NCryptOpenKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, phKey, pszKeyName, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptCreatePersistedKey$MH() {
        return RuntimeHelper.requireNonNull(constants$779.NCryptCreatePersistedKey$MH,"NCryptCreatePersistedKey");
    }
    public static int NCryptCreatePersistedKey ( long hProvider,  Addressable phKey,  Addressable pszAlgId,  Addressable pszKeyName,  int dwLegacyKeySpec,  int dwFlags) {
        var mh$ = NCryptCreatePersistedKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, phKey, pszAlgId, pszKeyName, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$780.NCryptGetProperty$MH,"NCryptGetProperty");
    }
    public static int NCryptGetProperty ( long hObject,  Addressable pszProperty,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptGetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$780.NCryptSetProperty$MH,"NCryptSetProperty");
    }
    public static int NCryptSetProperty ( long hObject,  Addressable pszProperty,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = NCryptSetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFinalizeKey$MH() {
        return RuntimeHelper.requireNonNull(constants$780.NCryptFinalizeKey$MH,"NCryptFinalizeKey");
    }
    public static int NCryptFinalizeKey ( long hKey,  int dwFlags) {
        var mh$ = NCryptFinalizeKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEncrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$780.NCryptEncrypt$MH,"NCryptEncrypt");
    }
    public static int NCryptEncrypt ( long hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptEncrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDecrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$780.NCryptDecrypt$MH,"NCryptDecrypt");
    }
    public static int NCryptDecrypt ( long hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptDecrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PNCRYPT_KEY_BLOB_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NCryptImportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$780.NCryptImportKey$MH,"NCryptImportKey");
    }
    public static int NCryptImportKey ( long hProvider,  long hImportKey,  Addressable pszBlobType,  Addressable pParameterList,  Addressable phKey,  Addressable pbData,  int cbData,  int dwFlags) {
        var mh$ = NCryptImportKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, hImportKey, pszBlobType, pParameterList, phKey, pbData, cbData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptExportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$781.NCryptExportKey$MH,"NCryptExportKey");
    }
    public static int NCryptExportKey ( long hKey,  long hExportKey,  Addressable pszBlobType,  Addressable pParameterList,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptExportKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, hExportKey, pszBlobType, pParameterList, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSignHash$MH() {
        return RuntimeHelper.requireNonNull(constants$781.NCryptSignHash$MH,"NCryptSignHash");
    }
    public static int NCryptSignHash ( long hKey,  Addressable pPaddingInfo,  Addressable pbHashValue,  int cbHashValue,  Addressable pbSignature,  int cbSignature,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptSignHash$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptVerifySignature$MH() {
        return RuntimeHelper.requireNonNull(constants$781.NCryptVerifySignature$MH,"NCryptVerifySignature");
    }
    public static int NCryptVerifySignature ( long hKey,  Addressable pPaddingInfo,  Addressable pbHashValue,  int cbHashValue,  Addressable pbSignature,  int cbSignature,  int dwFlags) {
        var mh$ = NCryptVerifySignature$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDeleteKey$MH() {
        return RuntimeHelper.requireNonNull(constants$781.NCryptDeleteKey$MH,"NCryptDeleteKey");
    }
    public static int NCryptDeleteKey ( long hKey,  int dwFlags) {
        var mh$ = NCryptDeleteKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFreeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$781.NCryptFreeObject$MH,"NCryptFreeObject");
    }
    public static int NCryptFreeObject ( long hObject) {
        var mh$ = NCryptFreeObject$MH();
        try {
            return (int)mh$.invokeExact(hObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptIsKeyHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$781.NCryptIsKeyHandle$MH,"NCryptIsKeyHandle");
    }
    public static int NCryptIsKeyHandle ( long hKey) {
        var mh$ = NCryptIsKeyHandle$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptTranslateHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$782.NCryptTranslateHandle$MH,"NCryptTranslateHandle");
    }
    public static int NCryptTranslateHandle ( Addressable phProvider,  Addressable phKey,  long hLegacyProv,  long hLegacyKey,  int dwLegacyKeySpec,  int dwFlags) {
        var mh$ = NCryptTranslateHandle$MH();
        try {
            return (int)mh$.invokeExact(phProvider, phKey, hLegacyProv, hLegacyKey, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptNotifyChangeKey$MH() {
        return RuntimeHelper.requireNonNull(constants$782.NCryptNotifyChangeKey$MH,"NCryptNotifyChangeKey");
    }
    public static int NCryptNotifyChangeKey ( long hProvider,  Addressable phEvent,  int dwFlags) {
        var mh$ = NCryptNotifyChangeKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, phEvent, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSecretAgreement$MH() {
        return RuntimeHelper.requireNonNull(constants$782.NCryptSecretAgreement$MH,"NCryptSecretAgreement");
    }
    public static int NCryptSecretAgreement ( long hPrivKey,  long hPubKey,  Addressable phAgreedSecret,  int dwFlags) {
        var mh$ = NCryptSecretAgreement$MH();
        try {
            return (int)mh$.invokeExact(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDeriveKey$MH() {
        return RuntimeHelper.requireNonNull(constants$782.NCryptDeriveKey$MH,"NCryptDeriveKey");
    }
    public static int NCryptDeriveKey ( long hSharedSecret,  Addressable pwszKDF,  Addressable pParameterList,  Addressable pbDerivedKey,  int cbDerivedKey,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptDeriveKey$MH();
        try {
            return (int)mh$.invokeExact(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptKeyDerivation$MH() {
        return RuntimeHelper.requireNonNull(constants$782.NCryptKeyDerivation$MH,"NCryptKeyDerivation");
    }
    public static int NCryptKeyDerivation ( long hKey,  Addressable pParameterList,  Addressable pbDerivedKey,  int cbDerivedKey,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptKeyDerivation$MH();
        try {
            return (int)mh$.invokeExact(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptCreateClaim$MH() {
        return RuntimeHelper.requireNonNull(constants$782.NCryptCreateClaim$MH,"NCryptCreateClaim");
    }
    public static int NCryptCreateClaim ( long hSubjectKey,  long hAuthorityKey,  int dwClaimType,  Addressable pParameterList,  Addressable pbClaimBlob,  int cbClaimBlob,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptCreateClaim$MH();
        try {
            return (int)mh$.invokeExact(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptVerifyClaim$MH() {
        return RuntimeHelper.requireNonNull(constants$783.NCryptVerifyClaim$MH,"NCryptVerifyClaim");
    }
    public static int NCryptVerifyClaim ( long hSubjectKey,  long hAuthorityKey,  int dwClaimType,  Addressable pParameterList,  Addressable pbClaimBlob,  int cbClaimBlob,  Addressable pOutput,  int dwFlags) {
        var mh$ = NCryptVerifyClaim$MH();
        try {
            return (int)mh$.invokeExact(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pOutput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_BIT_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ALGORITHM_IDENTIFIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_OBJID_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_HASH_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_EXTENSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_EXTENSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ATTRIBUTE_TYPE_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ATTRIBUTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_RDN_ATTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_RDN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_NAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_NAME_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_PUBLIC_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ECC_PRIVATE_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PRIVATE_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PKCS8_IMPORT_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PKCS8_EXPORT_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_OR_CRL_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_OR_CRL_BUNDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REQUEST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_KEYGEN_REQUEST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SIGNED_CONTENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_USAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ENHKEY_USAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCTL_USAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_ENHKEY_USAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIME_STAMP_REQUEST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ENROLLMENT_NAME_VALUE_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CSP_PROVIDER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptFormatObject$MH() {
        return RuntimeHelper.requireNonNull(constants$784.CryptFormatObject$MH,"CryptFormatObject");
    }
    public static int CryptFormatObject ( int dwCertEncodingType,  int dwFormatType,  int dwFormatStrType,  Addressable pFormatStruct,  Addressable lpszStructType,  Addressable pbEncoded,  int cbEncoded,  Addressable pbFormat,  Addressable pcbFormat) {
        var mh$ = CryptFormatObject$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, dwFormatType, dwFormatStrType, pFormatStruct, lpszStructType, pbEncoded, cbEncoded, pbFormat, pcbFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_ENCODE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptEncodeObjectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$785.CryptEncodeObjectEx$MH,"CryptEncodeObjectEx");
    }
    public static int CryptEncodeObjectEx ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pvStructInfo,  int dwFlags,  Addressable pEncodePara,  Addressable pvEncoded,  Addressable pcbEncoded) {
        var mh$ = CryptEncodeObjectEx$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pvStructInfo, dwFlags, pEncodePara, pvEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncodeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$785.CryptEncodeObject$MH,"CryptEncodeObject");
    }
    public static int CryptEncodeObject ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pvStructInfo,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = CryptEncodeObject$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pvStructInfo, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_DECODE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptDecodeObjectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$785.CryptDecodeObjectEx$MH,"CryptDecodeObjectEx");
    }
    public static int CryptDecodeObjectEx ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pbEncoded,  int cbEncoded,  int dwFlags,  Addressable pDecodePara,  Addressable pvStructInfo,  Addressable pcbStructInfo) {
        var mh$ = CryptDecodeObjectEx$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pDecodePara, pvStructInfo, pcbStructInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecodeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$785.CryptDecodeObject$MH,"CryptDecodeObject");
    }
    public static int CryptDecodeObject ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pbEncoded,  int cbEncoded,  int dwFlags,  Addressable pvStructInfo,  Addressable pcbStructInfo) {
        var mh$ = CryptDecodeObject$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pvStructInfo, pcbStructInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_EXTENSIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_AUTHORITY_KEY_ID_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_PRIVATE_KEY_VALIDITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_KEY_ATTRIBUTES_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_KEY_USAGE_RESTRICTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_OTHER_NAME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ALT_NAME_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ALT_NAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_BASIC_CONSTRAINTS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_BASIC_CONSTRAINTS2_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_QUALIFIER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICIES_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_QUALIFIER_USER_NOTICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCPS_URLS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY95_QUALIFIER1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_MAPPING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_MAPPINGS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_CONSTRAINTS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_SEQUENCE_OF_ANY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_AUTHORITY_KEY_ID2_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ACCESS_DESCRIPTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_AUTHORITY_INFO_ACCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SUBJECT_INFO_ACCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_DIST_POINT_NAME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_DIST_POINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_DIST_POINTS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCROSS_CERT_DIST_POINTS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_ISSUING_DIST_POINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_GENERAL_SUBTREE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_NAME_CONSTRAINTS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_DSS_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_DH_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ECC_SIGNATURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_X942_DH_VALIDATION_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_X942_DH_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_X942_OTHER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ECC_CMS_SHARED_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_RC2_CBC_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_SMIME_CAPABILITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_SMIME_CAPABILITIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_QC_STATEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_QC_STATEMENTS_EXT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_MASK_GEN_ALGORITHM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_RSA_SSA_PSS_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PSOURCE_ALGORITHM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_RSAES_OAEP_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_TAGGED_ATTRIBUTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_TAGGED_CERT_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_TAGGED_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_TAGGED_CONTENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_TAGGED_OTHER_MSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_DATA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_RESPONSE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_PEND_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_STATUS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_ADD_EXTENSIONS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_ADD_ATTRIBUTES_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_TEMPLATE_EXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_HASHED_URL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_DETAILS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_REFERENCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_IMAGE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_IMAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_AUDIO_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_AUDIO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_OTHER_LOGOTYPE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_EXT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_BIOMETRIC_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_BIOMETRIC_EXT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_SIGNATURE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_SIGNED_REQUEST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_CERT_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_REQUEST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_REQUEST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_RESPONSE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_BASIC_SIGNED_RESPONSE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_BASIC_REVOKED_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_BASIC_RESPONSE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_BASIC_RESPONSE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SUPPORTED_ALGORITHM_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_TPM_SPECIFICATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCRYPTOIDFUNCSET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCRYPTOIDFUNCADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_OID_FUNC_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptInstallOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$785.CryptInstallOIDFunctionAddress$MH,"CryptInstallOIDFunctionAddress");
    }
    public static int CryptInstallOIDFunctionAddress ( Addressable hModule,  int dwEncodingType,  Addressable pszFuncName,  int cFuncEntry,  Addressable rgFuncEntry,  int dwFlags) {
        var mh$ = CryptInstallOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hModule, dwEncodingType, pszFuncName, cFuncEntry, rgFuncEntry, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptInitOIDFunctionSet$MH() {
        return RuntimeHelper.requireNonNull(constants$785.CryptInitOIDFunctionSet$MH,"CryptInitOIDFunctionSet");
    }
    public static MemoryAddress CryptInitOIDFunctionSet ( Addressable pszFuncName,  int dwFlags) {
        var mh$ = CryptInitOIDFunctionSet$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszFuncName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$786.CryptGetOIDFunctionAddress$MH,"CryptGetOIDFunctionAddress");
    }
    public static int CryptGetOIDFunctionAddress ( Addressable hFuncSet,  int dwEncodingType,  Addressable pszOID,  int dwFlags,  Addressable ppvFuncAddr,  Addressable phFuncAddr) {
        var mh$ = CryptGetOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hFuncSet, dwEncodingType, pszOID, dwFlags, ppvFuncAddr, phFuncAddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultOIDDllList$MH() {
        return RuntimeHelper.requireNonNull(constants$786.CryptGetDefaultOIDDllList$MH,"CryptGetDefaultOIDDllList");
    }
    public static int CryptGetDefaultOIDDllList ( Addressable hFuncSet,  int dwEncodingType,  Addressable pwszDllList,  Addressable pcchDllList) {
        var mh$ = CryptGetDefaultOIDDllList$MH();
        try {
            return (int)mh$.invokeExact(hFuncSet, dwEncodingType, pwszDllList, pcchDllList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$786.CryptGetDefaultOIDFunctionAddress$MH,"CryptGetDefaultOIDFunctionAddress");
    }
    public static int CryptGetDefaultOIDFunctionAddress ( Addressable hFuncSet,  int dwEncodingType,  Addressable pwszDll,  int dwFlags,  Addressable ppvFuncAddr,  Addressable phFuncAddr) {
        var mh$ = CryptGetDefaultOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hFuncSet, dwEncodingType, pwszDll, dwFlags, ppvFuncAddr, phFuncAddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFreeOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$786.CryptFreeOIDFunctionAddress$MH,"CryptFreeOIDFunctionAddress");
    }
    public static int CryptFreeOIDFunctionAddress ( Addressable hFuncAddr,  int dwFlags) {
        var mh$ = CryptFreeOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hFuncAddr, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$786.CryptRegisterOIDFunction$MH,"CryptRegisterOIDFunction");
    }
    public static int CryptRegisterOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  Addressable pwszDll,  Addressable pszOverrideFuncName) {
        var mh$ = CryptRegisterOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, pwszDll, pszOverrideFuncName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$786.CryptUnregisterOIDFunction$MH,"CryptUnregisterOIDFunction");
    }
    public static int CryptUnregisterOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID) {
        var mh$ = CryptUnregisterOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterDefaultOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$787.CryptRegisterDefaultOIDFunction$MH,"CryptRegisterDefaultOIDFunction");
    }
    public static int CryptRegisterDefaultOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  int dwIndex,  Addressable pwszDll) {
        var mh$ = CryptRegisterDefaultOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, dwIndex, pwszDll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterDefaultOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$787.CryptUnregisterDefaultOIDFunction$MH,"CryptUnregisterDefaultOIDFunction");
    }
    public static int CryptUnregisterDefaultOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pwszDll) {
        var mh$ = CryptUnregisterDefaultOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pwszDll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetOIDFunctionValue$MH() {
        return RuntimeHelper.requireNonNull(constants$787.CryptSetOIDFunctionValue$MH,"CryptSetOIDFunctionValue");
    }
    public static int CryptSetOIDFunctionValue ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  Addressable pwszValueName,  int dwValueType,  Addressable pbValueData,  int cbValueData) {
        var mh$ = CryptSetOIDFunctionValue$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, pwszValueName, dwValueType, pbValueData, cbValueData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetOIDFunctionValue$MH() {
        return RuntimeHelper.requireNonNull(constants$787.CryptGetOIDFunctionValue$MH,"CryptGetOIDFunctionValue");
    }
    public static int CryptGetOIDFunctionValue ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  Addressable pwszValueName,  Addressable pdwValueType,  Addressable pbValueData,  Addressable pcbValueData) {
        var mh$ = CryptGetOIDFunctionValue$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, pwszValueName, pdwValueType, pbValueData, pcbValueData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$788.CryptEnumOIDFunction$MH,"CryptEnumOIDFunction");
    }
    public static int CryptEnumOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  int dwFlags,  Addressable pvArg,  Addressable pfnEnumOIDFunc) {
        var mh$ = CryptEnumOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, dwFlags, pvArg, pfnEnumOIDFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_OID_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCRYPT_OID_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptFindOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$788.CryptFindOIDInfo$MH,"CryptFindOIDInfo");
    }
    public static MemoryAddress CryptFindOIDInfo ( int dwKeyType,  Addressable pvKey,  int dwGroupId) {
        var mh$ = CryptFindOIDInfo$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwKeyType, pvKey, dwGroupId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$788.CryptRegisterOIDInfo$MH,"CryptRegisterOIDInfo");
    }
    public static int CryptRegisterOIDInfo ( Addressable pInfo,  int dwFlags) {
        var mh$ = CryptRegisterOIDInfo$MH();
        try {
            return (int)mh$.invokeExact(pInfo, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$788.CryptUnregisterOIDInfo$MH,"CryptUnregisterOIDInfo");
    }
    public static int CryptUnregisterOIDInfo ( Addressable pInfo) {
        var mh$ = CryptUnregisterOIDInfo$MH();
        try {
            return (int)mh$.invokeExact(pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$789.CryptEnumOIDInfo$MH,"CryptEnumOIDInfo");
    }
    public static int CryptEnumOIDInfo ( int dwGroupId,  int dwFlags,  Addressable pvArg,  Addressable pfnEnumOIDInfo) {
        var mh$ = CryptEnumOIDInfo$MH();
        try {
            return (int)mh$.invokeExact(dwGroupId, dwFlags, pvArg, pfnEnumOIDInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFindLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$789.CryptFindLocalizedName$MH,"CryptFindLocalizedName");
    }
    public static MemoryAddress CryptFindLocalizedName ( Addressable pwszCryptName) {
        var mh$ = CryptFindLocalizedName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszCryptName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_STRONG_SIGN_SERIALIZED_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_STRONG_SIGN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_STRONG_SIGN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCRYPTMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ISSUER_SERIAL_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_SIGNER_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_SIGNED_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_RECIPIENT_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_ENVELOPED_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_RC2_AUX_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_SP3_COMPATIBLE_AUX_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_RC4_AUX_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_HASHED_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_ENCRYPTED_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_STREAM_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptMsgOpenToEncode$MH() {
        return RuntimeHelper.requireNonNull(constants$789.CryptMsgOpenToEncode$MH,"CryptMsgOpenToEncode");
    }
    public static MemoryAddress CryptMsgOpenToEncode ( int dwMsgEncodingType,  int dwFlags,  int dwMsgType,  Addressable pvMsgEncodeInfo,  Addressable pszInnerContentObjID,  Addressable pStreamInfo) {
        var mh$ = CryptMsgOpenToEncode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, pStreamInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCalculateEncodedLength$MH() {
        return RuntimeHelper.requireNonNull(constants$789.CryptMsgCalculateEncodedLength$MH,"CryptMsgCalculateEncodedLength");
    }
    public static int CryptMsgCalculateEncodedLength ( int dwMsgEncodingType,  int dwFlags,  int dwMsgType,  Addressable pvMsgEncodeInfo,  Addressable pszInnerContentObjID,  int cbData) {
        var mh$ = CryptMsgCalculateEncodedLength$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgOpenToDecode$MH() {
        return RuntimeHelper.requireNonNull(constants$790.CryptMsgOpenToDecode$MH,"CryptMsgOpenToDecode");
    }
    public static MemoryAddress CryptMsgOpenToDecode ( int dwMsgEncodingType,  int dwFlags,  int dwMsgType,  long hCryptProv,  Addressable pRecipientInfo,  Addressable pStreamInfo) {
        var mh$ = CryptMsgOpenToDecode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, hCryptProv, pRecipientInfo, pStreamInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgDuplicate$MH() {
        return RuntimeHelper.requireNonNull(constants$790.CryptMsgDuplicate$MH,"CryptMsgDuplicate");
    }
    public static MemoryAddress CryptMsgDuplicate ( Addressable hCryptMsg) {
        var mh$ = CryptMsgDuplicate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCryptMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgClose$MH() {
        return RuntimeHelper.requireNonNull(constants$790.CryptMsgClose$MH,"CryptMsgClose");
    }
    public static int CryptMsgClose ( Addressable hCryptMsg) {
        var mh$ = CryptMsgClose$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$790.CryptMsgUpdate$MH,"CryptMsgUpdate");
    }
    public static int CryptMsgUpdate ( Addressable hCryptMsg,  Addressable pbData,  int cbData,  int fFinal) {
        var mh$ = CryptMsgUpdate$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, pbData, cbData, fFinal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgGetParam$MH() {
        return RuntimeHelper.requireNonNull(constants$790.CryptMsgGetParam$MH,"CryptMsgGetParam");
    }
    public static int CryptMsgGetParam ( Addressable hCryptMsg,  int dwParamType,  int dwIndex,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CryptMsgGetParam$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, dwParamType, dwIndex, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCMSG_SIGNER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CMS_SIGNER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_ATTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_TRANS_RECIPIENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_AGREE_RECIPIENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_MAIL_LIST_RECIPIENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CMS_RECIPIENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptMsgControl$MH() {
        return RuntimeHelper.requireNonNull(constants$790.CryptMsgControl$MH,"CryptMsgControl");
    }
    public static int CryptMsgControl ( Addressable hCryptMsg,  int dwFlags,  int dwCtrlType,  Addressable pvCtrlPara) {
        var mh$ = CryptMsgControl$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, dwFlags, dwCtrlType, pvCtrlPara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_DECRYPT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptMsgVerifyCountersignatureEncoded$MH() {
        return RuntimeHelper.requireNonNull(constants$791.CryptMsgVerifyCountersignatureEncoded$MH,"CryptMsgVerifyCountersignatureEncoded");
    }
    public static int CryptMsgVerifyCountersignatureEncoded ( long hCryptProv,  int dwEncodingType,  Addressable pbSignerInfo,  int cbSignerInfo,  Addressable pbSignerInfoCountersignature,  int cbSignerInfoCountersignature,  Addressable pciCountersigner) {
        var mh$ = CryptMsgVerifyCountersignatureEncoded$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, pciCountersigner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgVerifyCountersignatureEncodedEx$MH() {
        return RuntimeHelper.requireNonNull(constants$791.CryptMsgVerifyCountersignatureEncodedEx$MH,"CryptMsgVerifyCountersignatureEncodedEx");
    }
    public static int CryptMsgVerifyCountersignatureEncodedEx ( long hCryptProv,  int dwEncodingType,  Addressable pbSignerInfo,  int cbSignerInfo,  Addressable pbSignerInfoCountersignature,  int cbSignerInfoCountersignature,  int dwSignerType,  Addressable pvSigner,  int dwFlags,  Addressable pvExtra) {
        var mh$ = CryptMsgVerifyCountersignatureEncodedEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, dwSignerType, pvSigner, dwFlags, pvExtra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCountersign$MH() {
        return RuntimeHelper.requireNonNull(constants$791.CryptMsgCountersign$MH,"CryptMsgCountersign");
    }
    public static int CryptMsgCountersign ( Addressable hCryptMsg,  int dwIndex,  int cCountersigners,  Addressable rgCountersigners) {
        var mh$ = CryptMsgCountersign$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, dwIndex, cCountersigners, rgCountersigners);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCountersignEncoded$MH() {
        return RuntimeHelper.requireNonNull(constants$791.CryptMsgCountersignEncoded$MH,"CryptMsgCountersignEncoded");
    }
    public static int CryptMsgCountersignEncoded ( int dwEncodingType,  Addressable pbSignerInfo,  int cbSignerInfo,  int cCountersigners,  Addressable rgCountersigners,  Addressable pbCountersignature,  Addressable pcbCountersignature) {
        var mh$ = CryptMsgCountersignEncoded$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pbSignerInfo, cbSignerInfo, cCountersigners, rgCountersigners, pbCountersignature, pcbCountersignature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCMSG_CONTENT_ENCRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_TRANS_ENCRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_AGREE_ENCRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_MAIL_LIST_ENCRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CNG_CONTENT_DECRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCERTSTORE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCRL_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCTL_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static int KeyTypeOther() {
        return (int)0L;
    }
    public static int KeyTypeVirtualSmartCard() {
        return (int)1L;
    }
    public static int KeyTypePhysicalSmartCard() {
        return (int)2L;
    }
    public static int KeyTypePassport() {
        return (int)3L;
    }
    public static int KeyTypePassportRemote() {
        return (int)4L;
    }
    public static int KeyTypePassportSmartCard() {
        return (int)5L;
    }
    public static int KeyTypeHardware() {
        return (int)6L;
    }
    public static int KeyTypeSoftware() {
        return (int)7L;
    }
    public static int KeyTypeSelfSigned() {
        return (int)8L;
    }
    public static OfAddress PCRYPT_KEY_PROV_PARAM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_KEY_PROV_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_KEY_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PROOT_INFO_LUID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_SMART_CARD_ROOT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SYSTEM_STORE_RELOCATE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REGISTRY_STORE_CLIENT_GPT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REGISTRY_STORE_ROAMING_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LDAP_STORE_OPENED_PARA = Constants$root.C_POINTER$LAYOUT;
}


