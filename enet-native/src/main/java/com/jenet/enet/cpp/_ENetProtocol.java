// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetProtocol {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("command"),
            Constants$root.C_CHAR$LAYOUT.withName("channelID"),
            Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
        ).withName("header"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            Constants$root.C_SHORT$LAYOUT.withName("receivedReliableSequenceNumber"),
            Constants$root.C_SHORT$LAYOUT.withName("receivedSentTime")
        ).withName("acknowledge"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            Constants$root.C_SHORT$LAYOUT.withName("outgoingPeerID"),
            Constants$root.C_CHAR$LAYOUT.withName("incomingSessionID"),
            Constants$root.C_CHAR$LAYOUT.withName("outgoingSessionID"),
            Constants$root.C_LONG$LAYOUT.withName("mtu"),
            Constants$root.C_LONG$LAYOUT.withName("windowSize"),
            Constants$root.C_LONG$LAYOUT.withName("channelCount"),
            Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
            Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth"),
            Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
            Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
            Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration"),
            Constants$root.C_LONG$LAYOUT.withName("connectID"),
            Constants$root.C_LONG$LAYOUT.withName("data")
        ).withName("connect"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            Constants$root.C_SHORT$LAYOUT.withName("outgoingPeerID"),
            Constants$root.C_CHAR$LAYOUT.withName("incomingSessionID"),
            Constants$root.C_CHAR$LAYOUT.withName("outgoingSessionID"),
            Constants$root.C_LONG$LAYOUT.withName("mtu"),
            Constants$root.C_LONG$LAYOUT.withName("windowSize"),
            Constants$root.C_LONG$LAYOUT.withName("channelCount"),
            Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
            Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth"),
            Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
            Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
            Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration"),
            Constants$root.C_LONG$LAYOUT.withName("connectID")
        ).withName("verifyConnect"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            Constants$root.C_LONG$LAYOUT.withName("data")
        ).withName("disconnect"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header")
        ).withName("ping"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            Constants$root.C_SHORT$LAYOUT.withName("dataLength")
        ).withName("sendReliable"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            Constants$root.C_SHORT$LAYOUT.withName("unreliableSequenceNumber"),
            Constants$root.C_SHORT$LAYOUT.withName("dataLength")
        ).withName("sendUnreliable"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            Constants$root.C_SHORT$LAYOUT.withName("unsequencedGroup"),
            Constants$root.C_SHORT$LAYOUT.withName("dataLength")
        ).withName("sendUnsequenced"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            Constants$root.C_SHORT$LAYOUT.withName("startSequenceNumber"),
            Constants$root.C_SHORT$LAYOUT.withName("dataLength"),
            Constants$root.C_LONG$LAYOUT.withName("fragmentCount"),
            Constants$root.C_LONG$LAYOUT.withName("fragmentNumber"),
            Constants$root.C_LONG$LAYOUT.withName("totalLength"),
            Constants$root.C_LONG$LAYOUT.withName("fragmentOffset")
        ).withName("sendFragment"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
            Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth")
        ).withName("bandwidthLimit"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
            Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
            Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration")
        ).withName("throttleConfigure")
    ).withName("_ENetProtocol");
    public static MemoryLayout $LAYOUT() {
        return _ENetProtocol.$union$LAYOUT;
    }
    public static MemorySegment header$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static MemorySegment acknowledge$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment connect$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment verifyConnect$slice(MemorySegment seg) {
        return seg.asSlice(0, 44);
    }
    public static MemorySegment disconnect$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment ping$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static MemorySegment sendReliable$slice(MemorySegment seg) {
        return seg.asSlice(0, 6);
    }
    public static MemorySegment sendUnreliable$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment sendUnsequenced$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment sendFragment$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment bandwidthLimit$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static MemorySegment throttleConfigure$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


