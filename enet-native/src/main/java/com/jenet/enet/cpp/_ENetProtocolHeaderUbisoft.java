// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetProtocolHeaderUbisoft {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(3, Constants$root.C_SHORT$LAYOUT).withName("integrity"),
        Constants$root.C_SHORT$LAYOUT.withName("peerID"),
        Constants$root.C_SHORT$LAYOUT.withName("sentTime")
    ).withName("_ENetProtocolHeaderUbisoft");
    public static MemoryLayout $LAYOUT() {
        return _ENetProtocolHeaderUbisoft.$struct$LAYOUT;
    }
    public static MemorySegment integrity$slice(MemorySegment seg) {
        return seg.asSlice(0, 6);
    }
    static final VarHandle peerID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("peerID"));
    public static VarHandle peerID$VH() {
        return _ENetProtocolHeaderUbisoft.peerID$VH;
    }
    public static short peerID$get(MemorySegment seg) {
        return (short)_ENetProtocolHeaderUbisoft.peerID$VH.get(seg);
    }
    public static void peerID$set( MemorySegment seg, short x) {
        _ENetProtocolHeaderUbisoft.peerID$VH.set(seg, x);
    }
    public static short peerID$get(MemorySegment seg, long index) {
        return (short)_ENetProtocolHeaderUbisoft.peerID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void peerID$set(MemorySegment seg, long index, short x) {
        _ENetProtocolHeaderUbisoft.peerID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sentTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sentTime"));
    public static VarHandle sentTime$VH() {
        return _ENetProtocolHeaderUbisoft.sentTime$VH;
    }
    public static short sentTime$get(MemorySegment seg) {
        return (short)_ENetProtocolHeaderUbisoft.sentTime$VH.get(seg);
    }
    public static void sentTime$set( MemorySegment seg, short x) {
        _ENetProtocolHeaderUbisoft.sentTime$VH.set(seg, x);
    }
    public static short sentTime$get(MemorySegment seg, long index) {
        return (short)_ENetProtocolHeaderUbisoft.sentTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sentTime$set(MemorySegment seg, long index, short x) {
        _ENetProtocolHeaderUbisoft.sentTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


