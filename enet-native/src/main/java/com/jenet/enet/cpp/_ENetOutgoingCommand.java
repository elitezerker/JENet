// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetOutgoingCommand {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("next"),
            Constants$root.C_POINTER$LAYOUT.withName("previous")
        ).withName("outgoingCommandList"),
        Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber"),
        Constants$root.C_SHORT$LAYOUT.withName("unreliableSequenceNumber"),
        Constants$root.C_LONG$LAYOUT.withName("sentTime"),
        Constants$root.C_LONG$LAYOUT.withName("roundTripTimeout"),
        Constants$root.C_LONG$LAYOUT.withName("roundTripTimeoutLimit"),
        Constants$root.C_LONG$LAYOUT.withName("fragmentOffset"),
        Constants$root.C_SHORT$LAYOUT.withName("fragmentLength"),
        Constants$root.C_SHORT$LAYOUT.withName("sendAttempts"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("receivedReliableSequenceNumber"),
                Constants$root.C_SHORT$LAYOUT.withName("receivedSentTime")
            ).withName("acknowledge"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("outgoingPeerID"),
                Constants$root.C_CHAR$LAYOUT.withName("incomingSessionID"),
                Constants$root.C_CHAR$LAYOUT.withName("outgoingSessionID"),
                Constants$root.C_LONG$LAYOUT.withName("mtu"),
                Constants$root.C_LONG$LAYOUT.withName("windowSize"),
                Constants$root.C_LONG$LAYOUT.withName("channelCount"),
                Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration"),
                Constants$root.C_LONG$LAYOUT.withName("connectID"),
                Constants$root.C_LONG$LAYOUT.withName("data")
            ).withName("connect"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("outgoingPeerID"),
                Constants$root.C_CHAR$LAYOUT.withName("incomingSessionID"),
                Constants$root.C_CHAR$LAYOUT.withName("outgoingSessionID"),
                Constants$root.C_LONG$LAYOUT.withName("mtu"),
                Constants$root.C_LONG$LAYOUT.withName("windowSize"),
                Constants$root.C_LONG$LAYOUT.withName("channelCount"),
                Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration"),
                Constants$root.C_LONG$LAYOUT.withName("connectID")
            ).withName("verifyConnect"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_LONG$LAYOUT.withName("data")
            ).withName("disconnect"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header")
            ).withName("ping"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength")
            ).withName("sendReliable"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("unreliableSequenceNumber"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength")
            ).withName("sendUnreliable"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("unsequencedGroup"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength")
            ).withName("sendUnsequenced"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("startSequenceNumber"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength"),
                Constants$root.C_LONG$LAYOUT.withName("fragmentCount"),
                Constants$root.C_LONG$LAYOUT.withName("fragmentNumber"),
                Constants$root.C_LONG$LAYOUT.withName("totalLength"),
                Constants$root.C_LONG$LAYOUT.withName("fragmentOffset")
            ).withName("sendFragment"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth")
            ).withName("bandwidthLimit"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration")
            ).withName("throttleConfigure")
        ).withName("command"),
        Constants$root.C_POINTER$LAYOUT.withName("packet")
    ).withName("_ENetOutgoingCommand");
    public static MemoryLayout $LAYOUT() {
        return _ENetOutgoingCommand.$struct$LAYOUT;
    }
    public static MemorySegment outgoingCommandList$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final VarHandle reliableSequenceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reliableSequenceNumber"));
    public static VarHandle reliableSequenceNumber$VH() {
        return _ENetOutgoingCommand.reliableSequenceNumber$VH;
    }
    public static short reliableSequenceNumber$get(MemorySegment seg) {
        return (short)_ENetOutgoingCommand.reliableSequenceNumber$VH.get(seg);
    }
    public static void reliableSequenceNumber$set( MemorySegment seg, short x) {
        _ENetOutgoingCommand.reliableSequenceNumber$VH.set(seg, x);
    }
    public static short reliableSequenceNumber$get(MemorySegment seg, long index) {
        return (short)_ENetOutgoingCommand.reliableSequenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reliableSequenceNumber$set(MemorySegment seg, long index, short x) {
        _ENetOutgoingCommand.reliableSequenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle unreliableSequenceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unreliableSequenceNumber"));
    public static VarHandle unreliableSequenceNumber$VH() {
        return _ENetOutgoingCommand.unreliableSequenceNumber$VH;
    }
    public static short unreliableSequenceNumber$get(MemorySegment seg) {
        return (short)_ENetOutgoingCommand.unreliableSequenceNumber$VH.get(seg);
    }
    public static void unreliableSequenceNumber$set( MemorySegment seg, short x) {
        _ENetOutgoingCommand.unreliableSequenceNumber$VH.set(seg, x);
    }
    public static short unreliableSequenceNumber$get(MemorySegment seg, long index) {
        return (short)_ENetOutgoingCommand.unreliableSequenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unreliableSequenceNumber$set(MemorySegment seg, long index, short x) {
        _ENetOutgoingCommand.unreliableSequenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sentTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sentTime"));
    public static VarHandle sentTime$VH() {
        return _ENetOutgoingCommand.sentTime$VH;
    }
    public static int sentTime$get(MemorySegment seg) {
        return (int)_ENetOutgoingCommand.sentTime$VH.get(seg);
    }
    public static void sentTime$set( MemorySegment seg, int x) {
        _ENetOutgoingCommand.sentTime$VH.set(seg, x);
    }
    public static int sentTime$get(MemorySegment seg, long index) {
        return (int)_ENetOutgoingCommand.sentTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sentTime$set(MemorySegment seg, long index, int x) {
        _ENetOutgoingCommand.sentTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle roundTripTimeout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("roundTripTimeout"));
    public static VarHandle roundTripTimeout$VH() {
        return _ENetOutgoingCommand.roundTripTimeout$VH;
    }
    public static int roundTripTimeout$get(MemorySegment seg) {
        return (int)_ENetOutgoingCommand.roundTripTimeout$VH.get(seg);
    }
    public static void roundTripTimeout$set( MemorySegment seg, int x) {
        _ENetOutgoingCommand.roundTripTimeout$VH.set(seg, x);
    }
    public static int roundTripTimeout$get(MemorySegment seg, long index) {
        return (int)_ENetOutgoingCommand.roundTripTimeout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void roundTripTimeout$set(MemorySegment seg, long index, int x) {
        _ENetOutgoingCommand.roundTripTimeout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle roundTripTimeoutLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("roundTripTimeoutLimit"));
    public static VarHandle roundTripTimeoutLimit$VH() {
        return _ENetOutgoingCommand.roundTripTimeoutLimit$VH;
    }
    public static int roundTripTimeoutLimit$get(MemorySegment seg) {
        return (int)_ENetOutgoingCommand.roundTripTimeoutLimit$VH.get(seg);
    }
    public static void roundTripTimeoutLimit$set( MemorySegment seg, int x) {
        _ENetOutgoingCommand.roundTripTimeoutLimit$VH.set(seg, x);
    }
    public static int roundTripTimeoutLimit$get(MemorySegment seg, long index) {
        return (int)_ENetOutgoingCommand.roundTripTimeoutLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void roundTripTimeoutLimit$set(MemorySegment seg, long index, int x) {
        _ENetOutgoingCommand.roundTripTimeoutLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fragmentOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fragmentOffset"));
    public static VarHandle fragmentOffset$VH() {
        return _ENetOutgoingCommand.fragmentOffset$VH;
    }
    public static int fragmentOffset$get(MemorySegment seg) {
        return (int)_ENetOutgoingCommand.fragmentOffset$VH.get(seg);
    }
    public static void fragmentOffset$set( MemorySegment seg, int x) {
        _ENetOutgoingCommand.fragmentOffset$VH.set(seg, x);
    }
    public static int fragmentOffset$get(MemorySegment seg, long index) {
        return (int)_ENetOutgoingCommand.fragmentOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentOffset$set(MemorySegment seg, long index, int x) {
        _ENetOutgoingCommand.fragmentOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fragmentLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fragmentLength"));
    public static VarHandle fragmentLength$VH() {
        return _ENetOutgoingCommand.fragmentLength$VH;
    }
    public static short fragmentLength$get(MemorySegment seg) {
        return (short)_ENetOutgoingCommand.fragmentLength$VH.get(seg);
    }
    public static void fragmentLength$set( MemorySegment seg, short x) {
        _ENetOutgoingCommand.fragmentLength$VH.set(seg, x);
    }
    public static short fragmentLength$get(MemorySegment seg, long index) {
        return (short)_ENetOutgoingCommand.fragmentLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fragmentLength$set(MemorySegment seg, long index, short x) {
        _ENetOutgoingCommand.fragmentLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sendAttempts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sendAttempts"));
    public static VarHandle sendAttempts$VH() {
        return _ENetOutgoingCommand.sendAttempts$VH;
    }
    public static short sendAttempts$get(MemorySegment seg) {
        return (short)_ENetOutgoingCommand.sendAttempts$VH.get(seg);
    }
    public static void sendAttempts$set( MemorySegment seg, short x) {
        _ENetOutgoingCommand.sendAttempts$VH.set(seg, x);
    }
    public static short sendAttempts$get(MemorySegment seg, long index) {
        return (short)_ENetOutgoingCommand.sendAttempts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sendAttempts$set(MemorySegment seg, long index, short x) {
        _ENetOutgoingCommand.sendAttempts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment command$slice(MemorySegment seg) {
        return seg.asSlice(40, 48);
    }
    static final VarHandle packet$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packet"));
    public static VarHandle packet$VH() {
        return _ENetOutgoingCommand.packet$VH;
    }
    public static MemoryAddress packet$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetOutgoingCommand.packet$VH.get(seg);
    }
    public static void packet$set( MemorySegment seg, MemoryAddress x) {
        _ENetOutgoingCommand.packet$VH.set(seg, x);
    }
    public static MemoryAddress packet$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetOutgoingCommand.packet$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packet$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetOutgoingCommand.packet$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


