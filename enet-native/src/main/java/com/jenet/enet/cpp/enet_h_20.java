// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class enet_h_20 extends enet_h_19 {

    public static MethodHandle CertOpenStore$MH() {
        return RuntimeHelper.requireNonNull(constants$796.CertOpenStore$MH,"CertOpenStore");
    }
    public static MemoryAddress CertOpenStore ( Addressable lpszStoreProvider,  int dwEncodingType,  long hCryptProv,  int dwFlags,  Addressable pvPara) {
        var mh$ = CertOpenStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszStoreProvider, dwEncodingType, hCryptProv, dwFlags, pvPara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCERTSTOREPROV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_STORE_PROV_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_STORE_PROV_FIND_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_STORE_PROV_FIND_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertDuplicateStore$MH() {
        return RuntimeHelper.requireNonNull(constants$804.CertDuplicateStore$MH,"CertDuplicateStore");
    }
    public static MemoryAddress CertDuplicateStore ( Addressable hCertStore) {
        var mh$ = CertDuplicateStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSaveStore$MH() {
        return RuntimeHelper.requireNonNull(constants$805.CertSaveStore$MH,"CertSaveStore");
    }
    public static int CertSaveStore ( Addressable hCertStore,  int dwEncodingType,  int dwSaveAs,  int dwSaveTo,  Addressable pvSaveToPara,  int dwFlags) {
        var mh$ = CertSaveStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwEncodingType, dwSaveAs, dwSaveTo, pvSaveToPara, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCloseStore$MH() {
        return RuntimeHelper.requireNonNull(constants$805.CertCloseStore$MH,"CertCloseStore");
    }
    public static int CertCloseStore ( Addressable hCertStore,  int dwFlags) {
        var mh$ = CertCloseStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetSubjectCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$805.CertGetSubjectCertificateFromStore$MH,"CertGetSubjectCertificateFromStore");
    }
    public static MemoryAddress CertGetSubjectCertificateFromStore ( Addressable hCertStore,  int dwCertEncodingType,  Addressable pCertId) {
        var mh$ = CertGetSubjectCertificateFromStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, dwCertEncodingType, pCertId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCertificatesInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$805.CertEnumCertificatesInStore$MH,"CertEnumCertificatesInStore");
    }
    public static MemoryAddress CertEnumCertificatesInStore ( Addressable hCertStore,  Addressable pPrevCertContext) {
        var mh$ = CertEnumCertificatesInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, pPrevCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCertificateInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$805.CertFindCertificateInStore$MH,"CertFindCertificateInStore");
    }
    public static MemoryAddress CertFindCertificateInStore ( Addressable hCertStore,  int dwCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevCertContext) {
        var mh$ = CertFindCertificateInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetIssuerCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$805.CertGetIssuerCertificateFromStore$MH,"CertGetIssuerCertificateFromStore");
    }
    public static MemoryAddress CertGetIssuerCertificateFromStore ( Addressable hCertStore,  Addressable pSubjectContext,  Addressable pPrevIssuerContext,  Addressable pdwFlags) {
        var mh$ = CertGetIssuerCertificateFromStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, pSubjectContext, pPrevIssuerContext, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifySubjectCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$806.CertVerifySubjectCertificateContext$MH,"CertVerifySubjectCertificateContext");
    }
    public static int CertVerifySubjectCertificateContext ( Addressable pSubject,  Addressable pIssuer,  Addressable pdwFlags) {
        var mh$ = CertVerifySubjectCertificateContext$MH();
        try {
            return (int)mh$.invokeExact(pSubject, pIssuer, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$806.CertDuplicateCertificateContext$MH,"CertDuplicateCertificateContext");
    }
    public static MemoryAddress CertDuplicateCertificateContext ( Addressable pCertContext) {
        var mh$ = CertDuplicateCertificateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$806.CertCreateCertificateContext$MH,"CertCreateCertificateContext");
    }
    public static MemoryAddress CertCreateCertificateContext ( int dwCertEncodingType,  Addressable pbCertEncoded,  int cbCertEncoded) {
        var mh$ = CertCreateCertificateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwCertEncodingType, pbCertEncoded, cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$806.CertFreeCertificateContext$MH,"CertFreeCertificateContext");
    }
    public static int CertFreeCertificateContext ( Addressable pCertContext) {
        var mh$ = CertFreeCertificateContext$MH();
        try {
            return (int)mh$.invokeExact(pCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCertificateContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$806.CertSetCertificateContextProperty$MH,"CertSetCertificateContextProperty");
    }
    public static int CertSetCertificateContextProperty ( Addressable pCertContext,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = CertSetCertificateContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCertificateContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$806.CertGetCertificateContextProperty$MH,"CertGetCertificateContextProperty");
    }
    public static int CertGetCertificateContextProperty ( Addressable pCertContext,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CertGetCertificateContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCertificateContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$807.CertEnumCertificateContextProperties$MH,"CertEnumCertificateContextProperties");
    }
    public static int CertEnumCertificateContextProperties ( Addressable pCertContext,  int dwPropId) {
        var mh$ = CertEnumCertificateContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCTLEntryFromCertificateContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$807.CertCreateCTLEntryFromCertificateContextProperties$MH,"CertCreateCTLEntryFromCertificateContextProperties");
    }
    public static int CertCreateCTLEntryFromCertificateContextProperties ( Addressable pCertContext,  int cOptAttr,  Addressable rgOptAttr,  int dwFlags,  Addressable pvReserved,  Addressable pCtlEntry,  Addressable pcbCtlEntry) {
        var mh$ = CertCreateCTLEntryFromCertificateContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, cOptAttr, rgOptAttr, dwFlags, pvReserved, pCtlEntry, pcbCtlEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCertificateContextPropertiesFromCTLEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$807.CertSetCertificateContextPropertiesFromCTLEntry$MH,"CertSetCertificateContextPropertiesFromCTLEntry");
    }
    public static int CertSetCertificateContextPropertiesFromCTLEntry ( Addressable pCertContext,  Addressable pCtlEntry,  int dwFlags) {
        var mh$ = CertSetCertificateContextPropertiesFromCTLEntry$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pCtlEntry, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCRLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$807.CertGetCRLFromStore$MH,"CertGetCRLFromStore");
    }
    public static MemoryAddress CertGetCRLFromStore ( Addressable hCertStore,  Addressable pIssuerContext,  Addressable pPrevCrlContext,  Addressable pdwFlags) {
        var mh$ = CertGetCRLFromStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, pIssuerContext, pPrevCrlContext, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCRLsInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$807.CertEnumCRLsInStore$MH,"CertEnumCRLsInStore");
    }
    public static MemoryAddress CertEnumCRLsInStore ( Addressable hCertStore,  Addressable pPrevCrlContext) {
        var mh$ = CertEnumCRLsInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, pPrevCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCRLInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$807.CertFindCRLInStore$MH,"CertFindCRLInStore");
    }
    public static MemoryAddress CertFindCRLInStore ( Addressable hCertStore,  int dwCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevCrlContext) {
        var mh$ = CertFindCRLInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRL_FIND_ISSUED_FOR_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertDuplicateCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$808.CertDuplicateCRLContext$MH,"CertDuplicateCRLContext");
    }
    public static MemoryAddress CertDuplicateCRLContext ( Addressable pCrlContext) {
        var mh$ = CertDuplicateCRLContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$808.CertCreateCRLContext$MH,"CertCreateCRLContext");
    }
    public static MemoryAddress CertCreateCRLContext ( int dwCertEncodingType,  Addressable pbCrlEncoded,  int cbCrlEncoded) {
        var mh$ = CertCreateCRLContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwCertEncodingType, pbCrlEncoded, cbCrlEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$808.CertFreeCRLContext$MH,"CertFreeCRLContext");
    }
    public static int CertFreeCRLContext ( Addressable pCrlContext) {
        var mh$ = CertFreeCRLContext$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCRLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$808.CertSetCRLContextProperty$MH,"CertSetCRLContextProperty");
    }
    public static int CertSetCRLContextProperty ( Addressable pCrlContext,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = CertSetCRLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCRLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$808.CertGetCRLContextProperty$MH,"CertGetCRLContextProperty");
    }
    public static int CertGetCRLContextProperty ( Addressable pCrlContext,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CertGetCRLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCRLContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$808.CertEnumCRLContextProperties$MH,"CertEnumCRLContextProperties");
    }
    public static int CertEnumCRLContextProperties ( Addressable pCrlContext,  int dwPropId) {
        var mh$ = CertEnumCRLContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCertificateInCRL$MH() {
        return RuntimeHelper.requireNonNull(constants$809.CertFindCertificateInCRL$MH,"CertFindCertificateInCRL");
    }
    public static int CertFindCertificateInCRL ( Addressable pCert,  Addressable pCrlContext,  int dwFlags,  Addressable pvReserved,  Addressable ppCrlEntry) {
        var mh$ = CertFindCertificateInCRL$MH();
        try {
            return (int)mh$.invokeExact(pCert, pCrlContext, dwFlags, pvReserved, ppCrlEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertIsValidCRLForCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$809.CertIsValidCRLForCertificate$MH,"CertIsValidCRLForCertificate");
    }
    public static int CertIsValidCRLForCertificate ( Addressable pCert,  Addressable pCrl,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CertIsValidCRLForCertificate$MH();
        try {
            return (int)mh$.invokeExact(pCert, pCrl, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$809.CertAddEncodedCertificateToStore$MH,"CertAddEncodedCertificateToStore");
    }
    public static int CertAddEncodedCertificateToStore ( Addressable hCertStore,  int dwCertEncodingType,  Addressable pbCertEncoded,  int cbCertEncoded,  int dwAddDisposition,  Addressable ppCertContext) {
        var mh$ = CertAddEncodedCertificateToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwCertEncodingType, pbCertEncoded, cbCertEncoded, dwAddDisposition, ppCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCertificateContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$809.CertAddCertificateContextToStore$MH,"CertAddCertificateContextToStore");
    }
    public static int CertAddCertificateContextToStore ( Addressable hCertStore,  Addressable pCertContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCertificateContextToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCertContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddSerializedElementToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$809.CertAddSerializedElementToStore$MH,"CertAddSerializedElementToStore");
    }
    public static int CertAddSerializedElementToStore ( Addressable hCertStore,  Addressable pbElement,  int cbElement,  int dwAddDisposition,  int dwFlags,  int dwContextTypeFlags,  Addressable pdwContextType,  Addressable ppvContext) {
        var mh$ = CertAddSerializedElementToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pbElement, cbElement, dwAddDisposition, dwFlags, dwContextTypeFlags, pdwContextType, ppvContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$809.CertDeleteCertificateFromStore$MH,"CertDeleteCertificateFromStore");
    }
    public static int CertDeleteCertificateFromStore ( Addressable pCertContext) {
        var mh$ = CertDeleteCertificateFromStore$MH();
        try {
            return (int)mh$.invokeExact(pCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCRLToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CertAddEncodedCRLToStore$MH,"CertAddEncodedCRLToStore");
    }
    public static int CertAddEncodedCRLToStore ( Addressable hCertStore,  int dwCertEncodingType,  Addressable pbCrlEncoded,  int cbCrlEncoded,  int dwAddDisposition,  Addressable ppCrlContext) {
        var mh$ = CertAddEncodedCRLToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwCertEncodingType, pbCrlEncoded, cbCrlEncoded, dwAddDisposition, ppCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCRLContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CertAddCRLContextToStore$MH,"CertAddCRLContextToStore");
    }
    public static int CertAddCRLContextToStore ( Addressable hCertStore,  Addressable pCrlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCRLContextToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCrlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCRLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CertDeleteCRLFromStore$MH,"CertDeleteCRLFromStore");
    }
    public static int CertDeleteCRLFromStore ( Addressable pCrlContext) {
        var mh$ = CertDeleteCRLFromStore$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCertificateStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CertSerializeCertificateStoreElement$MH,"CertSerializeCertificateStoreElement");
    }
    public static int CertSerializeCertificateStoreElement ( Addressable pCertContext,  int dwFlags,  Addressable pbElement,  Addressable pcbElement) {
        var mh$ = CertSerializeCertificateStoreElement$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwFlags, pbElement, pcbElement);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCRLStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CertSerializeCRLStoreElement$MH,"CertSerializeCRLStoreElement");
    }
    public static int CertSerializeCRLStoreElement ( Addressable pCrlContext,  int dwFlags,  Addressable pbElement,  Addressable pcbElement) {
        var mh$ = CertSerializeCRLStoreElement$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwFlags, pbElement, pcbElement);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CertDuplicateCTLContext$MH,"CertDuplicateCTLContext");
    }
    public static MemoryAddress CertDuplicateCTLContext ( Addressable pCtlContext) {
        var mh$ = CertDuplicateCTLContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CertCreateCTLContext$MH,"CertCreateCTLContext");
    }
    public static MemoryAddress CertCreateCTLContext ( int dwMsgAndCertEncodingType,  Addressable pbCtlEncoded,  int cbCtlEncoded) {
        var mh$ = CertCreateCTLContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CertFreeCTLContext$MH,"CertFreeCTLContext");
    }
    public static int CertFreeCTLContext ( Addressable pCtlContext) {
        var mh$ = CertFreeCTLContext$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCTLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CertSetCTLContextProperty$MH,"CertSetCTLContextProperty");
    }
    public static int CertSetCTLContextProperty ( Addressable pCtlContext,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = CertSetCTLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCTLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CertGetCTLContextProperty$MH,"CertGetCTLContextProperty");
    }
    public static int CertGetCTLContextProperty ( Addressable pCtlContext,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CertGetCTLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCTLContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CertEnumCTLContextProperties$MH,"CertEnumCTLContextProperties");
    }
    public static int CertEnumCTLContextProperties ( Addressable pCtlContext,  int dwPropId) {
        var mh$ = CertEnumCTLContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCTLsInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CertEnumCTLsInStore$MH,"CertEnumCTLsInStore");
    }
    public static MemoryAddress CertEnumCTLsInStore ( Addressable hCertStore,  Addressable pPrevCtlContext) {
        var mh$ = CertEnumCTLsInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, pPrevCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindSubjectInCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$812.CertFindSubjectInCTL$MH,"CertFindSubjectInCTL");
    }
    public static MemoryAddress CertFindSubjectInCTL ( int dwEncodingType,  int dwSubjectType,  Addressable pvSubject,  Addressable pCtlContext,  int dwFlags) {
        var mh$ = CertFindSubjectInCTL$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwEncodingType, dwSubjectType, pvSubject, pCtlContext, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCTL_ANY_SUBJECT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertFindCTLInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$812.CertFindCTLInStore$MH,"CertFindCTLInStore");
    }
    public static MemoryAddress CertFindCTLInStore ( Addressable hCertStore,  int dwMsgAndCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevCtlContext) {
        var mh$ = CertFindCTLInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, dwMsgAndCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCTL_FIND_USAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_FIND_SUBJECT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertAddEncodedCTLToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$812.CertAddEncodedCTLToStore$MH,"CertAddEncodedCTLToStore");
    }
    public static int CertAddEncodedCTLToStore ( Addressable hCertStore,  int dwMsgAndCertEncodingType,  Addressable pbCtlEncoded,  int cbCtlEncoded,  int dwAddDisposition,  Addressable ppCtlContext) {
        var mh$ = CertAddEncodedCTLToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded, dwAddDisposition, ppCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCTLContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$812.CertAddCTLContextToStore$MH,"CertAddCTLContextToStore");
    }
    public static int CertAddCTLContextToStore ( Addressable hCertStore,  Addressable pCtlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCTLContextToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCtlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCTLStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$812.CertSerializeCTLStoreElement$MH,"CertSerializeCTLStoreElement");
    }
    public static int CertSerializeCTLStoreElement ( Addressable pCtlContext,  int dwFlags,  Addressable pbElement,  Addressable pcbElement) {
        var mh$ = CertSerializeCTLStoreElement$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwFlags, pbElement, pcbElement);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCTLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$812.CertDeleteCTLFromStore$MH,"CertDeleteCTLFromStore");
    }
    public static int CertDeleteCTLFromStore ( Addressable pCtlContext) {
        var mh$ = CertDeleteCTLFromStore$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCertificateLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$813.CertAddCertificateLinkToStore$MH,"CertAddCertificateLinkToStore");
    }
    public static int CertAddCertificateLinkToStore ( Addressable hCertStore,  Addressable pCertContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCertificateLinkToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCertContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCRLLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$813.CertAddCRLLinkToStore$MH,"CertAddCRLLinkToStore");
    }
    public static int CertAddCRLLinkToStore ( Addressable hCertStore,  Addressable pCrlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCRLLinkToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCrlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCTLLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$813.CertAddCTLLinkToStore$MH,"CertAddCTLLinkToStore");
    }
    public static int CertAddCTLLinkToStore ( Addressable hCertStore,  Addressable pCtlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCTLLinkToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCtlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddStoreToCollection$MH() {
        return RuntimeHelper.requireNonNull(constants$813.CertAddStoreToCollection$MH,"CertAddStoreToCollection");
    }
    public static int CertAddStoreToCollection ( Addressable hCollectionStore,  Addressable hSiblingStore,  int dwUpdateFlags,  int dwPriority) {
        var mh$ = CertAddStoreToCollection$MH();
        try {
            return (int)mh$.invokeExact(hCollectionStore, hSiblingStore, dwUpdateFlags, dwPriority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRemoveStoreFromCollection$MH() {
        return RuntimeHelper.requireNonNull(constants$813.CertRemoveStoreFromCollection$MH,"CertRemoveStoreFromCollection");
    }
    public static void CertRemoveStoreFromCollection ( Addressable hCollectionStore,  Addressable hSiblingStore) {
        var mh$ = CertRemoveStoreFromCollection$MH();
        try {
            mh$.invokeExact(hCollectionStore, hSiblingStore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertControlStore$MH() {
        return RuntimeHelper.requireNonNull(constants$813.CertControlStore$MH,"CertControlStore");
    }
    public static int CertControlStore ( Addressable hCertStore,  int dwFlags,  int dwCtrlType,  Addressable pvCtrlPara) {
        var mh$ = CertControlStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwFlags, dwCtrlType, pvCtrlPara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetStoreProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$814.CertSetStoreProperty$MH,"CertSetStoreProperty");
    }
    public static int CertSetStoreProperty ( Addressable hCertStore,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = CertSetStoreProperty$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetStoreProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$814.CertGetStoreProperty$MH,"CertGetStoreProperty");
    }
    public static int CertGetStoreProperty ( Addressable hCertStore,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CertGetStoreProperty$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_CREATE_CONTEXT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$814.CertCreateContext$MH,"CertCreateContext");
    }
    public static MemoryAddress CertCreateContext ( int dwContextType,  int dwEncodingType,  Addressable pbEncoded,  int cbEncoded,  int dwFlags,  Addressable pCreatePara) {
        var mh$ = CertCreateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwContextType, dwEncodingType, pbEncoded, cbEncoded, dwFlags, pCreatePara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_SYSTEM_STORE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_PHYSICAL_STORE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertRegisterSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$814.CertRegisterSystemStore$MH,"CertRegisterSystemStore");
    }
    public static int CertRegisterSystemStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pStoreInfo,  Addressable pvReserved) {
        var mh$ = CertRegisterSystemStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pStoreInfo, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRegisterPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$815.CertRegisterPhysicalStore$MH,"CertRegisterPhysicalStore");
    }
    public static int CertRegisterPhysicalStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pwszStoreName,  Addressable pStoreInfo,  Addressable pvReserved) {
        var mh$ = CertRegisterPhysicalStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pwszStoreName, pStoreInfo, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertUnregisterSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$815.CertUnregisterSystemStore$MH,"CertUnregisterSystemStore");
    }
    public static int CertUnregisterSystemStore ( Addressable pvSystemStore,  int dwFlags) {
        var mh$ = CertUnregisterSystemStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertUnregisterPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$815.CertUnregisterPhysicalStore$MH,"CertUnregisterPhysicalStore");
    }
    public static int CertUnregisterPhysicalStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pwszStoreName) {
        var mh$ = CertUnregisterPhysicalStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pwszStoreName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSystemStoreLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$816.CertEnumSystemStoreLocation$MH,"CertEnumSystemStoreLocation");
    }
    public static int CertEnumSystemStoreLocation ( int dwFlags,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = CertEnumSystemStoreLocation$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pvArg, pfnEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$816.CertEnumSystemStore$MH,"CertEnumSystemStore");
    }
    public static int CertEnumSystemStore ( int dwFlags,  Addressable pvSystemStoreLocationPara,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = CertEnumSystemStore$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pvSystemStoreLocationPara, pvArg, pfnEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$816.CertEnumPhysicalStore$MH,"CertEnumPhysicalStore");
    }
    public static int CertEnumPhysicalStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = CertEnumPhysicalStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pvArg, pfnEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetEnhancedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$817.CertGetEnhancedKeyUsage$MH,"CertGetEnhancedKeyUsage");
    }
    public static int CertGetEnhancedKeyUsage ( Addressable pCertContext,  int dwFlags,  Addressable pUsage,  Addressable pcbUsage) {
        var mh$ = CertGetEnhancedKeyUsage$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwFlags, pUsage, pcbUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetEnhancedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$817.CertSetEnhancedKeyUsage$MH,"CertSetEnhancedKeyUsage");
    }
    public static int CertSetEnhancedKeyUsage ( Addressable pCertContext,  Addressable pUsage) {
        var mh$ = CertSetEnhancedKeyUsage$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEnhancedKeyUsageIdentifier$MH() {
        return RuntimeHelper.requireNonNull(constants$817.CertAddEnhancedKeyUsageIdentifier$MH,"CertAddEnhancedKeyUsageIdentifier");
    }
    public static int CertAddEnhancedKeyUsageIdentifier ( Addressable pCertContext,  Addressable pszUsageIdentifier) {
        var mh$ = CertAddEnhancedKeyUsageIdentifier$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pszUsageIdentifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRemoveEnhancedKeyUsageIdentifier$MH() {
        return RuntimeHelper.requireNonNull(constants$817.CertRemoveEnhancedKeyUsageIdentifier$MH,"CertRemoveEnhancedKeyUsageIdentifier");
    }
    public static int CertRemoveEnhancedKeyUsageIdentifier ( Addressable pCertContext,  Addressable pszUsageIdentifier) {
        var mh$ = CertRemoveEnhancedKeyUsageIdentifier$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pszUsageIdentifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetValidUsages$MH() {
        return RuntimeHelper.requireNonNull(constants$817.CertGetValidUsages$MH,"CertGetValidUsages");
    }
    public static int CertGetValidUsages ( int cCerts,  Addressable rghCerts,  Addressable cNumOIDs,  Addressable rghOIDs,  Addressable pcbOIDs) {
        var mh$ = CertGetValidUsages$MH();
        try {
            return (int)mh$.invokeExact(cCerts, rghCerts, cNumOIDs, rghOIDs, pcbOIDs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgGetAndVerifySigner$MH() {
        return RuntimeHelper.requireNonNull(constants$817.CryptMsgGetAndVerifySigner$MH,"CryptMsgGetAndVerifySigner");
    }
    public static int CryptMsgGetAndVerifySigner ( Addressable hCryptMsg,  int cSignerStore,  Addressable rghSignerStore,  int dwFlags,  Addressable ppSigner,  Addressable pdwSignerIndex) {
        var mh$ = CryptMsgGetAndVerifySigner$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, cSignerStore, rghSignerStore, dwFlags, ppSigner, pdwSignerIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgSignCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$818.CryptMsgSignCTL$MH,"CryptMsgSignCTL");
    }
    public static int CryptMsgSignCTL ( int dwMsgEncodingType,  Addressable pbCtlContent,  int cbCtlContent,  Addressable pSignInfo,  int dwFlags,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = CryptMsgSignCTL$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pbCtlContent, cbCtlContent, pSignInfo, dwFlags, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgEncodeAndSignCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$818.CryptMsgEncodeAndSignCTL$MH,"CryptMsgEncodeAndSignCTL");
    }
    public static int CryptMsgEncodeAndSignCTL ( int dwMsgEncodingType,  Addressable pCtlInfo,  Addressable pSignInfo,  int dwFlags,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = CryptMsgEncodeAndSignCTL$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pCtlInfo, pSignInfo, dwFlags, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindSubjectInSortedCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$818.CertFindSubjectInSortedCTL$MH,"CertFindSubjectInSortedCTL");
    }
    public static int CertFindSubjectInSortedCTL ( Addressable pSubjectIdentifier,  Addressable pCtlContext,  int dwFlags,  Addressable pvReserved,  Addressable pEncodedAttributes) {
        var mh$ = CertFindSubjectInSortedCTL$MH();
        try {
            return (int)mh$.invokeExact(pSubjectIdentifier, pCtlContext, dwFlags, pvReserved, pEncodedAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSubjectInSortedCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$818.CertEnumSubjectInSortedCTL$MH,"CertEnumSubjectInSortedCTL");
    }
    public static int CertEnumSubjectInSortedCTL ( Addressable pCtlContext,  Addressable ppvNextSubject,  Addressable pSubjectIdentifier,  Addressable pEncodedAttributes) {
        var mh$ = CertEnumSubjectInSortedCTL$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, ppvNextSubject, pSubjectIdentifier, pEncodedAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCTL_VERIFY_USAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_VERIFY_USAGE_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertVerifyCTLUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$818.CertVerifyCTLUsage$MH,"CertVerifyCTLUsage");
    }
    public static int CertVerifyCTLUsage ( int dwEncodingType,  int dwSubjectType,  Addressable pvSubject,  Addressable pSubjectUsage,  int dwFlags,  Addressable pVerifyUsagePara,  Addressable pVerifyUsageStatus) {
        var mh$ = CertVerifyCTLUsage$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, dwSubjectType, pvSubject, pSubjectUsage, dwFlags, pVerifyUsagePara, pVerifyUsageStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_REVOCATION_CRL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REVOCATION_CHAIN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REVOCATION_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REVOCATION_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertVerifyRevocation$MH() {
        return RuntimeHelper.requireNonNull(constants$818.CertVerifyRevocation$MH,"CertVerifyRevocation");
    }
    public static int CertVerifyRevocation ( int dwEncodingType,  int dwRevType,  int cContext,  Addressable rgpvContext,  int dwFlags,  Addressable pRevPara,  Addressable pRevStatus) {
        var mh$ = CertVerifyRevocation$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, dwRevType, cContext, rgpvContext, dwFlags, pRevPara, pRevStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareIntegerBlob$MH() {
        return RuntimeHelper.requireNonNull(constants$819.CertCompareIntegerBlob$MH,"CertCompareIntegerBlob");
    }
    public static int CertCompareIntegerBlob ( Addressable pInt1,  Addressable pInt2) {
        var mh$ = CertCompareIntegerBlob$MH();
        try {
            return (int)mh$.invokeExact(pInt1, pInt2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$819.CertCompareCertificate$MH,"CertCompareCertificate");
    }
    public static int CertCompareCertificate ( int dwCertEncodingType,  Addressable pCertId1,  Addressable pCertId2) {
        var mh$ = CertCompareCertificate$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertId1, pCertId2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareCertificateName$MH() {
        return RuntimeHelper.requireNonNull(constants$819.CertCompareCertificateName$MH,"CertCompareCertificateName");
    }
    public static int CertCompareCertificateName ( int dwCertEncodingType,  Addressable pCertName1,  Addressable pCertName2) {
        var mh$ = CertCompareCertificateName$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertName1, pCertName2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertIsRDNAttrsInCertificateName$MH() {
        return RuntimeHelper.requireNonNull(constants$819.CertIsRDNAttrsInCertificateName$MH,"CertIsRDNAttrsInCertificateName");
    }
    public static int CertIsRDNAttrsInCertificateName ( int dwCertEncodingType,  int dwFlags,  Addressable pCertName,  Addressable pRDN) {
        var mh$ = CertIsRDNAttrsInCertificateName$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, dwFlags, pCertName, pRDN);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertComparePublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$819.CertComparePublicKeyInfo$MH,"CertComparePublicKeyInfo");
    }
    public static int CertComparePublicKeyInfo ( int dwCertEncodingType,  Addressable pPublicKey1,  Addressable pPublicKey2) {
        var mh$ = CertComparePublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pPublicKey1, pPublicKey2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetPublicKeyLength$MH() {
        return RuntimeHelper.requireNonNull(constants$819.CertGetPublicKeyLength$MH,"CertGetPublicKeyLength");
    }
    public static int CertGetPublicKeyLength ( int dwCertEncodingType,  Addressable pPublicKey) {
        var mh$ = CertGetPublicKeyLength$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pPublicKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyCertificateSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$820.CryptVerifyCertificateSignature$MH,"CryptVerifyCertificateSignature");
    }
    public static int CryptVerifyCertificateSignature ( long hCryptProv,  int dwCertEncodingType,  Addressable pbEncoded,  int cbEncoded,  Addressable pPublicKey) {
        var mh$ = CryptVerifyCertificateSignature$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pPublicKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyCertificateSignatureEx$MH() {
        return RuntimeHelper.requireNonNull(constants$820.CryptVerifyCertificateSignatureEx$MH,"CryptVerifyCertificateSignatureEx");
    }
    public static int CryptVerifyCertificateSignatureEx ( long hCryptProv,  int dwCertEncodingType,  int dwSubjectType,  Addressable pvSubject,  int dwIssuerType,  Addressable pvIssuer,  int dwFlags,  Addressable pvExtra) {
        var mh$ = CryptVerifyCertificateSignatureEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, dwSubjectType, pvSubject, dwIssuerType, pvIssuer, dwFlags, pvExtra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertIsStrongHashToSign$MH() {
        return RuntimeHelper.requireNonNull(constants$820.CertIsStrongHashToSign$MH,"CertIsStrongHashToSign");
    }
    public static int CertIsStrongHashToSign ( Addressable pStrongSignPara,  Addressable pwszCNGHashAlgid,  Addressable pSigningCert) {
        var mh$ = CertIsStrongHashToSign$MH();
        try {
            return (int)mh$.invokeExact(pStrongSignPara, pwszCNGHashAlgid, pSigningCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashToBeSigned$MH() {
        return RuntimeHelper.requireNonNull(constants$820.CryptHashToBeSigned$MH,"CryptHashToBeSigned");
    }
    public static int CryptHashToBeSigned ( long hCryptProv,  int dwCertEncodingType,  Addressable pbEncoded,  int cbEncoded,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptHashToBeSigned$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$820.CryptHashCertificate$MH,"CryptHashCertificate");
    }
    public static int CryptHashCertificate ( long hCryptProv,  int Algid,  int dwFlags,  Addressable pbEncoded,  int cbEncoded,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptHashCertificate$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, Algid, dwFlags, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashCertificate2$MH() {
        return RuntimeHelper.requireNonNull(constants$820.CryptHashCertificate2$MH,"CryptHashCertificate2");
    }
    public static int CryptHashCertificate2 ( Addressable pwszCNGHashAlgid,  int dwFlags,  Addressable pvReserved,  Addressable pbEncoded,  int cbEncoded,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptHashCertificate2$MH();
        try {
            return (int)mh$.invokeExact(pwszCNGHashAlgid, dwFlags, pvReserved, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$821.CryptSignCertificate$MH,"CryptSignCertificate");
    }
    public static int CryptSignCertificate ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable pbEncodedToBeSigned,  int cbEncodedToBeSigned,  Addressable pSignatureAlgorithm,  Addressable pvHashAuxInfo,  Addressable pbSignature,  Addressable pcbSignature) {
        var mh$ = CryptSignCertificate$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pbEncodedToBeSigned, cbEncodedToBeSigned, pSignatureAlgorithm, pvHashAuxInfo, pbSignature, pcbSignature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignAndEncodeCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$821.CryptSignAndEncodeCertificate$MH,"CryptSignAndEncodeCertificate");
    }
    public static int CryptSignAndEncodeCertificate ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable lpszStructType,  Addressable pvStructInfo,  Addressable pSignatureAlgorithm,  Addressable pvHashAuxInfo,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = CryptSignAndEncodeCertificate$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, lpszStructType, pvStructInfo, pSignatureAlgorithm, pvHashAuxInfo, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyTimeValidity$MH() {
        return RuntimeHelper.requireNonNull(constants$822.CertVerifyTimeValidity$MH,"CertVerifyTimeValidity");
    }
    public static int CertVerifyTimeValidity ( Addressable pTimeToVerify,  Addressable pCertInfo) {
        var mh$ = CertVerifyTimeValidity$MH();
        try {
            return (int)mh$.invokeExact(pTimeToVerify, pCertInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyCRLTimeValidity$MH() {
        return RuntimeHelper.requireNonNull(constants$822.CertVerifyCRLTimeValidity$MH,"CertVerifyCRLTimeValidity");
    }
    public static int CertVerifyCRLTimeValidity ( Addressable pTimeToVerify,  Addressable pCrlInfo) {
        var mh$ = CertVerifyCRLTimeValidity$MH();
        try {
            return (int)mh$.invokeExact(pTimeToVerify, pCrlInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyValidityNesting$MH() {
        return RuntimeHelper.requireNonNull(constants$822.CertVerifyValidityNesting$MH,"CertVerifyValidityNesting");
    }
    public static int CertVerifyValidityNesting ( Addressable pSubjectInfo,  Addressable pIssuerInfo) {
        var mh$ = CertVerifyValidityNesting$MH();
        try {
            return (int)mh$.invokeExact(pSubjectInfo, pIssuerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyCRLRevocation$MH() {
        return RuntimeHelper.requireNonNull(constants$822.CertVerifyCRLRevocation$MH,"CertVerifyCRLRevocation");
    }
    public static int CertVerifyCRLRevocation ( int dwCertEncodingType,  Addressable pCertId,  int cCrlInfo,  Addressable rgpCrlInfo) {
        var mh$ = CertVerifyCRLRevocation$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertId, cCrlInfo, rgpCrlInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAlgIdToOID$MH() {
        return RuntimeHelper.requireNonNull(constants$823.CertAlgIdToOID$MH,"CertAlgIdToOID");
    }
    public static MemoryAddress CertAlgIdToOID ( int dwAlgId) {
        var mh$ = CertAlgIdToOID$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwAlgId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOIDToAlgId$MH() {
        return RuntimeHelper.requireNonNull(constants$823.CertOIDToAlgId$MH,"CertOIDToAlgId");
    }
    public static int CertOIDToAlgId ( Addressable pszObjId) {
        var mh$ = CertOIDToAlgId$MH();
        try {
            return (int)mh$.invokeExact(pszObjId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$823.CertFindExtension$MH,"CertFindExtension");
    }
    public static MemoryAddress CertFindExtension ( Addressable pszObjId,  int cExtensions,  Addressable rgExtensions) {
        var mh$ = CertFindExtension$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszObjId, cExtensions, rgExtensions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$823.CertFindAttribute$MH,"CertFindAttribute");
    }
    public static MemoryAddress CertFindAttribute ( Addressable pszObjId,  int cAttr,  Addressable rgAttr) {
        var mh$ = CertFindAttribute$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszObjId, cAttr, rgAttr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindRDNAttr$MH() {
        return RuntimeHelper.requireNonNull(constants$823.CertFindRDNAttr$MH,"CertFindRDNAttr");
    }
    public static MemoryAddress CertFindRDNAttr ( Addressable pszObjId,  Addressable pName) {
        var mh$ = CertFindRDNAttr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszObjId, pName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetIntendedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$823.CertGetIntendedKeyUsage$MH,"CertGetIntendedKeyUsage");
    }
    public static int CertGetIntendedKeyUsage ( int dwCertEncodingType,  Addressable pCertInfo,  Addressable pbKeyUsage,  int cbKeyUsage) {
        var mh$ = CertGetIntendedKeyUsage$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertInfo, pbKeyUsage, cbKeyUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCRYPTDEFAULTCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptInstallDefaultContext$MH() {
        return RuntimeHelper.requireNonNull(constants$824.CryptInstallDefaultContext$MH,"CryptInstallDefaultContext");
    }
    public static int CryptInstallDefaultContext ( long hCryptProv,  int dwDefaultType,  Addressable pvDefaultPara,  int dwFlags,  Addressable pvReserved,  Addressable phDefaultContext) {
        var mh$ = CryptInstallDefaultContext$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwDefaultType, pvDefaultPara, dwFlags, pvReserved, phDefaultContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptUninstallDefaultContext$MH() {
        return RuntimeHelper.requireNonNull(constants$824.CryptUninstallDefaultContext$MH,"CryptUninstallDefaultContext");
    }
    public static int CryptUninstallDefaultContext ( Addressable hDefaultContext,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CryptUninstallDefaultContext$MH();
        try {
            return (int)mh$.invokeExact(hDefaultContext, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$824.CryptExportPublicKeyInfo$MH,"CryptExportPublicKeyInfo");
    }
    public static int CryptExportPublicKeyInfo ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable pInfo,  Addressable pcbInfo) {
        var mh$ = CryptExportPublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pInfo, pcbInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$824.CryptExportPublicKeyInfoEx$MH,"CryptExportPublicKeyInfoEx");
    }
    public static int CryptExportPublicKeyInfoEx ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable pszPublicKeyObjId,  int dwFlags,  Addressable pvAuxInfo,  Addressable pInfo,  Addressable pcbInfo) {
        var mh$ = CryptExportPublicKeyInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfoFromBCryptKeyHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$825.CryptExportPublicKeyInfoFromBCryptKeyHandle$MH,"CryptExportPublicKeyInfoFromBCryptKeyHandle");
    }
    public static int CryptExportPublicKeyInfoFromBCryptKeyHandle ( Addressable hBCryptKey,  int dwCertEncodingType,  Addressable pszPublicKeyObjId,  int dwFlags,  Addressable pvAuxInfo,  Addressable pInfo,  Addressable pcbInfo) {
        var mh$ = CryptExportPublicKeyInfoFromBCryptKeyHandle$MH();
        try {
            return (int)mh$.invokeExact(hBCryptKey, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$825.CryptImportPublicKeyInfo$MH,"CryptImportPublicKeyInfo");
    }
    public static int CryptImportPublicKeyInfo ( long hCryptProv,  int dwCertEncodingType,  Addressable pInfo,  Addressable phKey) {
        var mh$ = CryptImportPublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pInfo, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$825.CryptImportPublicKeyInfoEx$MH,"CryptImportPublicKeyInfoEx");
    }
    public static int CryptImportPublicKeyInfoEx ( long hCryptProv,  int dwCertEncodingType,  Addressable pInfo,  int aiKeyAlg,  int dwFlags,  Addressable pvAuxInfo,  Addressable phKey) {
        var mh$ = CryptImportPublicKeyInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pInfo, aiKeyAlg, dwFlags, pvAuxInfo, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfoEx2$MH() {
        return RuntimeHelper.requireNonNull(constants$825.CryptImportPublicKeyInfoEx2$MH,"CryptImportPublicKeyInfoEx2");
    }
    public static int CryptImportPublicKeyInfoEx2 ( int dwCertEncodingType,  Addressable pInfo,  int dwFlags,  Addressable pvAuxInfo,  Addressable phKey) {
        var mh$ = CryptImportPublicKeyInfoEx2$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pInfo, dwFlags, pvAuxInfo, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptAcquireCertificatePrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$826.CryptAcquireCertificatePrivateKey$MH,"CryptAcquireCertificatePrivateKey");
    }
    public static int CryptAcquireCertificatePrivateKey ( Addressable pCert,  int dwFlags,  Addressable pvParameters,  Addressable phCryptProvOrNCryptKey,  Addressable pdwKeySpec,  Addressable pfCallerFreeProvOrNCryptKey) {
        var mh$ = CryptAcquireCertificatePrivateKey$MH();
        try {
            return (int)mh$.invokeExact(pCert, dwFlags, pvParameters, phCryptProvOrNCryptKey, pdwKeySpec, pfCallerFreeProvOrNCryptKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFindCertificateKeyProvInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$826.CryptFindCertificateKeyProvInfo$MH,"CryptFindCertificateKeyProvInfo");
    }
    public static int CryptFindCertificateKeyProvInfo ( Addressable pCert,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CryptFindCertificateKeyProvInfo$MH();
        try {
            return (int)mh$.invokeExact(pCert, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$827.CryptImportPKCS8$MH,"CryptImportPKCS8");
    }
    public static int CryptImportPKCS8 ( MemorySegment sPrivateKeyAndParams,  int dwFlags,  Addressable phCryptProv,  Addressable pvAuxInfo) {
        var mh$ = CryptImportPKCS8$MH();
        try {
            return (int)mh$.invokeExact(sPrivateKeyAndParams, dwFlags, phCryptProv, pvAuxInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$827.CryptExportPKCS8$MH,"CryptExportPKCS8");
    }
    public static int CryptExportPKCS8 ( long hCryptProv,  int dwKeySpec,  Addressable pszPrivateKeyObjId,  int dwFlags,  Addressable pvAuxInfo,  Addressable pbPrivateKeyBlob,  Addressable pcbPrivateKeyBlob) {
        var mh$ = CryptExportPKCS8$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwKeySpec, pszPrivateKeyObjId, dwFlags, pvAuxInfo, pbPrivateKeyBlob, pcbPrivateKeyBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPKCS8Ex$MH() {
        return RuntimeHelper.requireNonNull(constants$827.CryptExportPKCS8Ex$MH,"CryptExportPKCS8Ex");
    }
    public static int CryptExportPKCS8Ex ( Addressable psExportParams,  int dwFlags,  Addressable pvAuxInfo,  Addressable pbPrivateKeyBlob,  Addressable pcbPrivateKeyBlob) {
        var mh$ = CryptExportPKCS8Ex$MH();
        try {
            return (int)mh$.invokeExact(psExportParams, dwFlags, pvAuxInfo, pbPrivateKeyBlob, pcbPrivateKeyBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$827.CryptHashPublicKeyInfo$MH,"CryptHashPublicKeyInfo");
    }
    public static int CryptHashPublicKeyInfo ( long hCryptProv,  int Algid,  int dwFlags,  int dwCertEncodingType,  Addressable pInfo,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptHashPublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, Algid, dwFlags, dwCertEncodingType, pInfo, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRDNValueToStrA$MH() {
        return RuntimeHelper.requireNonNull(constants$828.CertRDNValueToStrA$MH,"CertRDNValueToStrA");
    }
    public static int CertRDNValueToStrA ( int dwValueType,  Addressable pValue,  Addressable psz,  int csz) {
        var mh$ = CertRDNValueToStrA$MH();
        try {
            return (int)mh$.invokeExact(dwValueType, pValue, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRDNValueToStrW$MH() {
        return RuntimeHelper.requireNonNull(constants$828.CertRDNValueToStrW$MH,"CertRDNValueToStrW");
    }
    public static int CertRDNValueToStrW ( int dwValueType,  Addressable pValue,  Addressable psz,  int csz) {
        var mh$ = CertRDNValueToStrW$MH();
        try {
            return (int)mh$.invokeExact(dwValueType, pValue, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertNameToStrA$MH() {
        return RuntimeHelper.requireNonNull(constants$828.CertNameToStrA$MH,"CertNameToStrA");
    }
    public static int CertNameToStrA ( int dwCertEncodingType,  Addressable pName,  int dwStrType,  Addressable psz,  int csz) {
        var mh$ = CertNameToStrA$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pName, dwStrType, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertNameToStrW$MH() {
        return RuntimeHelper.requireNonNull(constants$828.CertNameToStrW$MH,"CertNameToStrW");
    }
    public static int CertNameToStrW ( int dwCertEncodingType,  Addressable pName,  int dwStrType,  Addressable psz,  int csz) {
        var mh$ = CertNameToStrW$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pName, dwStrType, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertStrToNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$828.CertStrToNameA$MH,"CertStrToNameA");
    }
    public static int CertStrToNameA ( int dwCertEncodingType,  Addressable pszX500,  int dwStrType,  Addressable pvReserved,  Addressable pbEncoded,  Addressable pcbEncoded,  Addressable ppszError) {
        var mh$ = CertStrToNameA$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertStrToNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$828.CertStrToNameW$MH,"CertStrToNameW");
    }
    public static int CertStrToNameW ( int dwCertEncodingType,  Addressable pszX500,  int dwStrType,  Addressable pvReserved,  Addressable pbEncoded,  Addressable pcbEncoded,  Addressable ppszError) {
        var mh$ = CertStrToNameW$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetNameStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$829.CertGetNameStringA$MH,"CertGetNameStringA");
    }
    public static int CertGetNameStringA ( Addressable pCertContext,  int dwType,  int dwFlags,  Addressable pvTypePara,  Addressable pszNameString,  int cchNameString) {
        var mh$ = CertGetNameStringA$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetNameStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$829.CertGetNameStringW$MH,"CertGetNameStringW");
    }
    public static int CertGetNameStringW ( Addressable pCertContext,  int dwType,  int dwFlags,  Addressable pvTypePara,  Addressable pszNameString,  int cchNameString) {
        var mh$ = CertGetNameStringW$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_SIGN_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_VERIFY_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ENCRYPT_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_DECRYPT_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_HASH_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_KEY_SIGN_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_KEY_VERIFY_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptSignMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$829.CryptSignMessage$MH,"CryptSignMessage");
    }
    public static int CryptSignMessage ( Addressable pSignPara,  int fDetachedSignature,  int cToBeSigned,  Addressable rgpbToBeSigned,  Addressable rgcbToBeSigned,  Addressable pbSignedBlob,  Addressable pcbSignedBlob) {
        var mh$ = CryptSignMessage$MH();
        try {
            return (int)mh$.invokeExact(pSignPara, fDetachedSignature, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, pbSignedBlob, pcbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$829.CryptVerifyMessageSignature$MH,"CryptVerifyMessageSignature");
    }
    public static int CryptVerifyMessageSignature ( Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbSignedBlob,  int cbSignedBlob,  Addressable pbDecoded,  Addressable pcbDecoded,  Addressable ppSignerCert) {
        var mh$ = CryptVerifyMessageSignature$MH();
        try {
            return (int)mh$.invokeExact(pVerifyPara, dwSignerIndex, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetMessageSignerCount$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CryptGetMessageSignerCount$MH,"CryptGetMessageSignerCount");
    }
    public static int CryptGetMessageSignerCount ( int dwMsgEncodingType,  Addressable pbSignedBlob,  int cbSignedBlob) {
        var mh$ = CryptGetMessageSignerCount$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pbSignedBlob, cbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetMessageCertificates$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CryptGetMessageCertificates$MH,"CryptGetMessageCertificates");
    }
    public static MemoryAddress CryptGetMessageCertificates ( int dwMsgAndCertEncodingType,  long hCryptProv,  int dwFlags,  Addressable pbSignedBlob,  int cbSignedBlob) {
        var mh$ = CryptGetMessageCertificates$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwMsgAndCertEncodingType, hCryptProv, dwFlags, pbSignedBlob, cbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyDetachedMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CryptVerifyDetachedMessageSignature$MH,"CryptVerifyDetachedMessageSignature");
    }
    public static int CryptVerifyDetachedMessageSignature ( Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbDetachedSignBlob,  int cbDetachedSignBlob,  int cToBeSigned,  Addressable rgpbToBeSigned,  Addressable rgcbToBeSigned,  Addressable ppSignerCert) {
        var mh$ = CryptVerifyDetachedMessageSignature$MH();
        try {
            return (int)mh$.invokeExact(pVerifyPara, dwSignerIndex, pbDetachedSignBlob, cbDetachedSignBlob, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CryptEncryptMessage$MH,"CryptEncryptMessage");
    }
    public static int CryptEncryptMessage ( Addressable pEncryptPara,  int cRecipientCert,  Addressable rgpRecipientCert,  Addressable pbToBeEncrypted,  int cbToBeEncrypted,  Addressable pbEncryptedBlob,  Addressable pcbEncryptedBlob) {
        var mh$ = CryptEncryptMessage$MH();
        try {
            return (int)mh$.invokeExact(pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeEncrypted, cbToBeEncrypted, pbEncryptedBlob, pcbEncryptedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CryptDecryptMessage$MH,"CryptDecryptMessage");
    }
    public static int CryptDecryptMessage ( Addressable pDecryptPara,  Addressable pbEncryptedBlob,  int cbEncryptedBlob,  Addressable pbDecrypted,  Addressable pcbDecrypted,  Addressable ppXchgCert) {
        var mh$ = CryptDecryptMessage$MH();
        try {
            return (int)mh$.invokeExact(pDecryptPara, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignAndEncryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CryptSignAndEncryptMessage$MH,"CryptSignAndEncryptMessage");
    }
    public static int CryptSignAndEncryptMessage ( Addressable pSignPara,  Addressable pEncryptPara,  int cRecipientCert,  Addressable rgpRecipientCert,  Addressable pbToBeSignedAndEncrypted,  int cbToBeSignedAndEncrypted,  Addressable pbSignedAndEncryptedBlob,  Addressable pcbSignedAndEncryptedBlob) {
        var mh$ = CryptSignAndEncryptMessage$MH();
        try {
            return (int)mh$.invokeExact(pSignPara, pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeSignedAndEncrypted, cbToBeSignedAndEncrypted, pbSignedAndEncryptedBlob, pcbSignedAndEncryptedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecryptAndVerifyMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CryptDecryptAndVerifyMessageSignature$MH,"CryptDecryptAndVerifyMessageSignature");
    }
    public static int CryptDecryptAndVerifyMessageSignature ( Addressable pDecryptPara,  Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbEncryptedBlob,  int cbEncryptedBlob,  Addressable pbDecrypted,  Addressable pcbDecrypted,  Addressable ppXchgCert,  Addressable ppSignerCert) {
        var mh$ = CryptDecryptAndVerifyMessageSignature$MH();
        try {
            return (int)mh$.invokeExact(pDecryptPara, pVerifyPara, dwSignerIndex, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecodeMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CryptDecodeMessage$MH,"CryptDecodeMessage");
    }
    public static int CryptDecodeMessage ( int dwMsgTypeFlags,  Addressable pDecryptPara,  Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbEncodedBlob,  int cbEncodedBlob,  int dwPrevInnerContentType,  Addressable pdwMsgType,  Addressable pdwInnerContentType,  Addressable pbDecoded,  Addressable pcbDecoded,  Addressable ppXchgCert,  Addressable ppSignerCert) {
        var mh$ = CryptDecodeMessage$MH();
        try {
            return (int)mh$.invokeExact(dwMsgTypeFlags, pDecryptPara, pVerifyPara, dwSignerIndex, pbEncodedBlob, cbEncodedBlob, dwPrevInnerContentType, pdwMsgType, pdwInnerContentType, pbDecoded, pcbDecoded, ppXchgCert, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CryptHashMessage$MH,"CryptHashMessage");
    }
    public static int CryptHashMessage ( Addressable pHashPara,  int fDetachedHash,  int cToBeHashed,  Addressable rgpbToBeHashed,  Addressable rgcbToBeHashed,  Addressable pbHashedBlob,  Addressable pcbHashedBlob,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptHashMessage$MH();
        try {
            return (int)mh$.invokeExact(pHashPara, fDetachedHash, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbHashedBlob, pcbHashedBlob, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageHash$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CryptVerifyMessageHash$MH,"CryptVerifyMessageHash");
    }
    public static int CryptVerifyMessageHash ( Addressable pHashPara,  Addressable pbHashedBlob,  int cbHashedBlob,  Addressable pbToBeHashed,  Addressable pcbToBeHashed,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptVerifyMessageHash$MH();
        try {
            return (int)mh$.invokeExact(pHashPara, pbHashedBlob, cbHashedBlob, pbToBeHashed, pcbToBeHashed, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyDetachedMessageHash$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CryptVerifyDetachedMessageHash$MH,"CryptVerifyDetachedMessageHash");
    }
    public static int CryptVerifyDetachedMessageHash ( Addressable pHashPara,  Addressable pbDetachedHashBlob,  int cbDetachedHashBlob,  int cToBeHashed,  Addressable rgpbToBeHashed,  Addressable rgcbToBeHashed,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptVerifyDetachedMessageHash$MH();
        try {
            return (int)mh$.invokeExact(pHashPara, pbDetachedHashBlob, cbDetachedHashBlob, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignMessageWithKey$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CryptSignMessageWithKey$MH,"CryptSignMessageWithKey");
    }
    public static int CryptSignMessageWithKey ( Addressable pSignPara,  Addressable pbToBeSigned,  int cbToBeSigned,  Addressable pbSignedBlob,  Addressable pcbSignedBlob) {
        var mh$ = CryptSignMessageWithKey$MH();
        try {
            return (int)mh$.invokeExact(pSignPara, pbToBeSigned, cbToBeSigned, pbSignedBlob, pcbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageSignatureWithKey$MH() {
        return RuntimeHelper.requireNonNull(constants$832.CryptVerifyMessageSignatureWithKey$MH,"CryptVerifyMessageSignatureWithKey");
    }
    public static int CryptVerifyMessageSignatureWithKey ( Addressable pVerifyPara,  Addressable pPublicKeyInfo,  Addressable pbSignedBlob,  int cbSignedBlob,  Addressable pbDecoded,  Addressable pcbDecoded) {
        var mh$ = CryptVerifyMessageSignatureWithKey$MH();
        try {
            return (int)mh$.invokeExact(pVerifyPara, pPublicKeyInfo, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOpenSystemStoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$832.CertOpenSystemStoreA$MH,"CertOpenSystemStoreA");
    }
    public static MemoryAddress CertOpenSystemStoreA ( long hProv,  Addressable szSubsystemProtocol) {
        var mh$ = CertOpenSystemStoreA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProv, szSubsystemProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOpenSystemStoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$832.CertOpenSystemStoreW$MH,"CertOpenSystemStoreW");
    }
    public static MemoryAddress CertOpenSystemStoreW ( long hProv,  Addressable szSubsystemProtocol) {
        var mh$ = CertOpenSystemStoreW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProv, szSubsystemProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToSystemStoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$832.CertAddEncodedCertificateToSystemStoreA$MH,"CertAddEncodedCertificateToSystemStoreA");
    }
    public static int CertAddEncodedCertificateToSystemStoreA ( Addressable szCertStoreName,  Addressable pbCertEncoded,  int cbCertEncoded) {
        var mh$ = CertAddEncodedCertificateToSystemStoreA$MH();
        try {
            return (int)mh$.invokeExact(szCertStoreName, pbCertEncoded, cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToSystemStoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$832.CertAddEncodedCertificateToSystemStoreW$MH,"CertAddEncodedCertificateToSystemStoreW");
    }
    public static int CertAddEncodedCertificateToSystemStoreW ( Addressable szCertStoreName,  Addressable pbCertEncoded,  int cbCertEncoded) {
        var mh$ = CertAddEncodedCertificateToSystemStoreW$MH();
        try {
            return (int)mh$.invokeExact(szCertStoreName, pbCertEncoded, cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_CHAIN = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle FindCertsByIssuer$MH() {
        return RuntimeHelper.requireNonNull(constants$832.FindCertsByIssuer$MH,"FindCertsByIssuer");
    }
    public static int FindCertsByIssuer ( Addressable pCertChains,  Addressable pcbCertChains,  Addressable pcCertChains,  Addressable pbEncodedIssuerName,  int cbEncodedIssuerName,  Addressable pwszPurpose,  int dwKeySpec) {
        var mh$ = FindCertsByIssuer$MH();
        try {
            return (int)mh$.invokeExact(pCertChains, pcbCertChains, pcCertChains, pbEncodedIssuerName, cbEncodedIssuerName, pwszPurpose, dwKeySpec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptQueryObject$MH() {
        return RuntimeHelper.requireNonNull(constants$833.CryptQueryObject$MH,"CryptQueryObject");
    }
    public static int CryptQueryObject ( int dwObjectType,  Addressable pvObject,  int dwExpectedContentTypeFlags,  int dwExpectedFormatTypeFlags,  int dwFlags,  Addressable pdwMsgAndCertEncodingType,  Addressable pdwContentType,  Addressable pdwFormatType,  Addressable phCertStore,  Addressable phMsg,  Addressable ppvContext) {
        var mh$ = CryptQueryObject$MH();
        try {
            return (int)mh$.invokeExact(dwObjectType, pvObject, dwExpectedContentTypeFlags, dwExpectedFormatTypeFlags, dwFlags, pdwMsgAndCertEncodingType, pdwContentType, pdwFormatType, phCertStore, phMsg, ppvContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMemAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$833.CryptMemAlloc$MH,"CryptMemAlloc");
    }
    public static MemoryAddress CryptMemAlloc ( int cbSize) {
        var mh$ = CryptMemAlloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMemRealloc$MH() {
        return RuntimeHelper.requireNonNull(constants$833.CryptMemRealloc$MH,"CryptMemRealloc");
    }
    public static MemoryAddress CryptMemRealloc ( Addressable pv,  int cbSize) {
        var mh$ = CryptMemRealloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pv, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMemFree$MH() {
        return RuntimeHelper.requireNonNull(constants$833.CryptMemFree$MH,"CryptMemFree");
    }
    public static void CryptMemFree ( Addressable pv) {
        var mh$ = CryptMemFree$MH();
        try {
            mh$.invokeExact(pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCRYPTASYNC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHCRYPTASYNC = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptCreateAsyncHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$834.CryptCreateAsyncHandle$MH,"CryptCreateAsyncHandle");
    }
    public static int CryptCreateAsyncHandle ( int dwFlags,  Addressable phAsync) {
        var mh$ = CryptCreateAsyncHandle$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, phAsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetAsyncParam$MH() {
        return RuntimeHelper.requireNonNull(constants$834.CryptSetAsyncParam$MH,"CryptSetAsyncParam");
    }
    public static int CryptSetAsyncParam ( Addressable hAsync,  Addressable pszParamOid,  Addressable pvParam,  Addressable pfnFree) {
        var mh$ = CryptSetAsyncParam$MH();
        try {
            return (int)mh$.invokeExact(hAsync, pszParamOid, pvParam, pfnFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetAsyncParam$MH() {
        return RuntimeHelper.requireNonNull(constants$834.CryptGetAsyncParam$MH,"CryptGetAsyncParam");
    }
    public static int CryptGetAsyncParam ( Addressable hAsync,  Addressable pszParamOid,  Addressable ppvParam,  Addressable ppfnFree) {
        var mh$ = CryptGetAsyncParam$MH();
        try {
            return (int)mh$.invokeExact(hAsync, pszParamOid, ppvParam, ppfnFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCloseAsyncHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$834.CryptCloseAsyncHandle$MH,"CryptCloseAsyncHandle");
    }
    public static int CryptCloseAsyncHandle ( Addressable hAsync) {
        var mh$ = CryptCloseAsyncHandle$MH();
        try {
            return (int)mh$.invokeExact(hAsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_BLOB_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CREDENTIALS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PASSWORD_CREDENTIALSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PASSWORD_CREDENTIALSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PASSWORD_CREDENTIALS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPTNET_URL_CACHE_PRE_FETCH_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPTNET_URL_CACHE_FLUSH_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPTNET_URL_CACHE_RESPONSE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_RETRIEVE_AUX_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptRetrieveObjectByUrlA$MH() {
        return RuntimeHelper.requireNonNull(constants$835.CryptRetrieveObjectByUrlA$MH,"CryptRetrieveObjectByUrlA");
    }
    public static int CryptRetrieveObjectByUrlA ( Addressable pszUrl,  Addressable pszObjectOid,  int dwRetrievalFlags,  int dwTimeout,  Addressable ppvObject,  Addressable hAsyncRetrieve,  Addressable pCredentials,  Addressable pvVerify,  Addressable pAuxInfo) {
        var mh$ = CryptRetrieveObjectByUrlA$MH();
        try {
            return (int)mh$.invokeExact(pszUrl, pszObjectOid, dwRetrievalFlags, dwTimeout, ppvObject, hAsyncRetrieve, pCredentials, pvVerify, pAuxInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRetrieveObjectByUrlW$MH() {
        return RuntimeHelper.requireNonNull(constants$835.CryptRetrieveObjectByUrlW$MH,"CryptRetrieveObjectByUrlW");
    }
    public static int CryptRetrieveObjectByUrlW ( Addressable pszUrl,  Addressable pszObjectOid,  int dwRetrievalFlags,  int dwTimeout,  Addressable ppvObject,  Addressable hAsyncRetrieve,  Addressable pCredentials,  Addressable pvVerify,  Addressable pAuxInfo) {
        var mh$ = CryptRetrieveObjectByUrlW$MH();
        try {
            return (int)mh$.invokeExact(pszUrl, pszObjectOid, dwRetrievalFlags, dwTimeout, ppvObject, hAsyncRetrieve, pCredentials, pvVerify, pAuxInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptInstallCancelRetrieval$MH() {
        return RuntimeHelper.requireNonNull(constants$835.CryptInstallCancelRetrieval$MH,"CryptInstallCancelRetrieval");
    }
    public static int CryptInstallCancelRetrieval ( Addressable pfnCancel,  Addressable pvArg,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CryptInstallCancelRetrieval$MH();
        try {
            return (int)mh$.invokeExact(pfnCancel, pvArg, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUninstallCancelRetrieval$MH() {
        return RuntimeHelper.requireNonNull(constants$835.CryptUninstallCancelRetrieval$MH,"CryptUninstallCancelRetrieval");
    }
    public static int CryptUninstallCancelRetrieval ( int dwFlags,  Addressable pvReserved) {
        var mh$ = CryptUninstallCancelRetrieval$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCancelAsyncRetrieval$MH() {
        return RuntimeHelper.requireNonNull(constants$836.CryptCancelAsyncRetrieval$MH,"CryptCancelAsyncRetrieval");
    }
    public static int CryptCancelAsyncRetrieval ( Addressable hAsyncRetrieval) {
        var mh$ = CryptCancelAsyncRetrieval$MH();
        try {
            return (int)mh$.invokeExact(hAsyncRetrieval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_ASYNC_RETRIEVAL_COMPLETION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_URL_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_URL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptGetObjectUrl$MH() {
        return RuntimeHelper.requireNonNull(constants$836.CryptGetObjectUrl$MH,"CryptGetObjectUrl");
    }
    public static int CryptGetObjectUrl ( Addressable pszUrlOid,  Addressable pvPara,  int dwFlags,  Addressable pUrlArray,  Addressable pcbUrlArray,  Addressable pUrlInfo,  Addressable pcbUrlInfo,  Addressable pvReserved) {
        var mh$ = CryptGetObjectUrl$MH();
        try {
            return (int)mh$.invokeExact(pszUrlOid, pvPara, dwFlags, pUrlArray, pcbUrlArray, pUrlInfo, pcbUrlInfo, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_CRL_CONTEXT_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_CRL_CONTEXT_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptGetTimeValidObject$MH() {
        return RuntimeHelper.requireNonNull(constants$837.CryptGetTimeValidObject$MH,"CryptGetTimeValidObject");
    }
    public static int CryptGetTimeValidObject ( Addressable pszTimeValidOid,  Addressable pvPara,  Addressable pIssuer,  Addressable pftValidFor,  int dwFlags,  int dwTimeout,  Addressable ppvObject,  Addressable pCredentials,  Addressable pExtraInfo) {
        var mh$ = CryptGetTimeValidObject$MH();
        try {
            return (int)mh$.invokeExact(pszTimeValidOid, pvPara, pIssuer, pftValidFor, dwFlags, dwTimeout, ppvObject, pCredentials, pExtraInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFlushTimeValidObject$MH() {
        return RuntimeHelper.requireNonNull(constants$837.CryptFlushTimeValidObject$MH,"CryptFlushTimeValidObject");
    }
    public static int CryptFlushTimeValidObject ( Addressable pszFlushTimeValidOid,  Addressable pvPara,  Addressable pIssuer,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CryptFlushTimeValidObject$MH();
        try {
            return (int)mh$.invokeExact(pszFlushTimeValidOid, pvPara, pIssuer, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateSelfSignCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$837.CertCreateSelfSignCertificate$MH,"CertCreateSelfSignCertificate");
    }
    public static MemoryAddress CertCreateSelfSignCertificate ( long hCryptProvOrNCryptKey,  Addressable pSubjectIssuerBlob,  int dwFlags,  Addressable pKeyProvInfo,  Addressable pSignatureAlgorithm,  Addressable pStartTime,  Addressable pEndTime,  Addressable pExtensions) {
        var mh$ = CertCreateSelfSignCertificate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCryptProvOrNCryptKey, pSubjectIssuerBlob, dwFlags, pKeyProvInfo, pSignatureAlgorithm, pStartTime, pEndTime, pExtensions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetKeyIdentifierProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$837.CryptGetKeyIdentifierProperty$MH,"CryptGetKeyIdentifierProperty");
    }
    public static int CryptGetKeyIdentifierProperty ( Addressable pKeyIdentifier,  int dwPropId,  int dwFlags,  Addressable pwszComputerName,  Addressable pvReserved,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CryptGetKeyIdentifierProperty$MH();
        try {
            return (int)mh$.invokeExact(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetKeyIdentifierProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$837.CryptSetKeyIdentifierProperty$MH,"CryptSetKeyIdentifierProperty");
    }
    public static int CryptSetKeyIdentifierProperty ( Addressable pKeyIdentifier,  int dwPropId,  int dwFlags,  Addressable pwszComputerName,  Addressable pvReserved,  Addressable pvData) {
        var mh$ = CryptSetKeyIdentifierProperty$MH();
        try {
            return (int)mh$.invokeExact(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumKeyIdentifierProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$838.CryptEnumKeyIdentifierProperties$MH,"CryptEnumKeyIdentifierProperties");
    }
    public static int CryptEnumKeyIdentifierProperties ( Addressable pKeyIdentifier,  int dwPropId,  int dwFlags,  Addressable pwszComputerName,  Addressable pvReserved,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = CryptEnumKeyIdentifierProperties$MH();
        try {
            return (int)mh$.invokeExact(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvArg, pfnEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCreateKeyIdentifierFromCSP$MH() {
        return RuntimeHelper.requireNonNull(constants$838.CryptCreateKeyIdentifierFromCSP$MH,"CryptCreateKeyIdentifierFromCSP");
    }
    public static int CryptCreateKeyIdentifierFromCSP ( int dwCertEncodingType,  Addressable pszPubKeyOID,  Addressable pPubKeyStruc,  int cbPubKeyStruc,  int dwFlags,  Addressable pvReserved,  Addressable pbHash,  Addressable pcbHash) {
        var mh$ = CryptCreateKeyIdentifierFromCSP$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pszPubKeyOID, pPubKeyStruc, cbPubKeyStruc, dwFlags, pvReserved, pbHash, pcbHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCERTCHAINENGINE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_ENGINE_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertCreateCertificateChainEngine$MH() {
        return RuntimeHelper.requireNonNull(constants$838.CertCreateCertificateChainEngine$MH,"CertCreateCertificateChainEngine");
    }
    public static int CertCreateCertificateChainEngine ( Addressable pConfig,  Addressable phChainEngine) {
        var mh$ = CertCreateCertificateChainEngine$MH();
        try {
            return (int)mh$.invokeExact(pConfig, phChainEngine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateChainEngine$MH() {
        return RuntimeHelper.requireNonNull(constants$838.CertFreeCertificateChainEngine$MH,"CertFreeCertificateChainEngine");
    }
    public static void CertFreeCertificateChainEngine ( Addressable hChainEngine) {
        var mh$ = CertFreeCertificateChainEngine$MH();
        try {
            mh$.invokeExact(hChainEngine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertResyncCertificateChainEngine$MH() {
        return RuntimeHelper.requireNonNull(constants$838.CertResyncCertificateChainEngine$MH,"CertResyncCertificateChainEngine");
    }
    public static int CertResyncCertificateChainEngine ( Addressable hChainEngine) {
        var mh$ = CertResyncCertificateChainEngine$MH();
        try {
            return (int)mh$.invokeExact(hChainEngine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_TRUST_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REVOCATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_TRUST_LIST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_CHAIN_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SIMPLE_CHAIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_SIMPLE_CHAIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_CHAIN_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_USAGE_MATCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_USAGE_MATCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertGetCertificateChain$MH() {
        return RuntimeHelper.requireNonNull(constants$839.CertGetCertificateChain$MH,"CertGetCertificateChain");
    }
    public static int CertGetCertificateChain ( Addressable hChainEngine,  Addressable pCertContext,  Addressable pTime,  Addressable hAdditionalStore,  Addressable pChainPara,  int dwFlags,  Addressable pvReserved,  Addressable ppChainContext) {
        var mh$ = CertGetCertificateChain$MH();
        try {
            return (int)mh$.invokeExact(hChainEngine, pCertContext, pTime, hAdditionalStore, pChainPara, dwFlags, pvReserved, ppChainContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateChain$MH() {
        return RuntimeHelper.requireNonNull(constants$839.CertFreeCertificateChain$MH,"CertFreeCertificateChain");
    }
    public static void CertFreeCertificateChain ( Addressable pChainContext) {
        var mh$ = CertFreeCertificateChain$MH();
        try {
            mh$.invokeExact(pChainContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCertificateChain$MH() {
        return RuntimeHelper.requireNonNull(constants$839.CertDuplicateCertificateChain$MH,"CertDuplicateCertificateChain");
    }
    public static MemoryAddress CertDuplicateCertificateChain ( Addressable pChainContext) {
        var mh$ = CertDuplicateCertificateChain$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pChainContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRL_REVOCATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertFindChainInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$839.CertFindChainInStore$MH,"CertFindChainInStore");
    }
    public static MemoryAddress CertFindChainInStore ( Addressable hCertStore,  int dwCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevChainContext) {
        var mh$ = CertFindChainInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevChainContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_CHAIN_FIND_ISSUER_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_FIND_BY_ISSUER_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_POLICY_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertVerifyCertificateChainPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$840.CertVerifyCertificateChainPolicy$MH,"CertVerifyCertificateChainPolicy");
    }
    public static int CertVerifyCertificateChainPolicy ( Addressable pszPolicyOID,  Addressable pChainContext,  Addressable pPolicyPara,  Addressable pPolicyStatus) {
        var mh$ = CertVerifyCertificateChainPolicy$MH();
        try {
            return (int)mh$.invokeExact(pszPolicyOID, pChainContext, pPolicyPara, pPolicyStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHTTPSPolicyCallbackData = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSSL_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEV_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEV_EXTRA_CERT_CHAIN_POLICY_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptStringToBinaryA$MH() {
        return RuntimeHelper.requireNonNull(constants$840.CryptStringToBinaryA$MH,"CryptStringToBinaryA");
    }
    public static int CryptStringToBinaryA ( Addressable pszString,  int cchString,  int dwFlags,  Addressable pbBinary,  Addressable pcbBinary,  Addressable pdwSkip,  Addressable pdwFlags) {
        var mh$ = CryptStringToBinaryA$MH();
        try {
            return (int)mh$.invokeExact(pszString, cchString, dwFlags, pbBinary, pcbBinary, pdwSkip, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptStringToBinaryW$MH() {
        return RuntimeHelper.requireNonNull(constants$840.CryptStringToBinaryW$MH,"CryptStringToBinaryW");
    }
    public static int CryptStringToBinaryW ( Addressable pszString,  int cchString,  int dwFlags,  Addressable pbBinary,  Addressable pcbBinary,  Addressable pdwSkip,  Addressable pdwFlags) {
        var mh$ = CryptStringToBinaryW$MH();
        try {
            return (int)mh$.invokeExact(pszString, cchString, dwFlags, pbBinary, pcbBinary, pdwSkip, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptBinaryToStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$840.CryptBinaryToStringA$MH,"CryptBinaryToStringA");
    }
    public static int CryptBinaryToStringA ( Addressable pbBinary,  int cbBinary,  int dwFlags,  Addressable pszString,  Addressable pcchString) {
        var mh$ = CryptBinaryToStringA$MH();
        try {
            return (int)mh$.invokeExact(pbBinary, cbBinary, dwFlags, pszString, pcchString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptBinaryToStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$840.CryptBinaryToStringW$MH,"CryptBinaryToStringW");
    }
    public static int CryptBinaryToStringW ( Addressable pbBinary,  int cbBinary,  int dwFlags,  Addressable pszString,  Addressable pcchString) {
        var mh$ = CryptBinaryToStringW$MH();
        try {
            return (int)mh$.invokeExact(pbBinary, cbBinary, dwFlags, pszString, pcchString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXImportCertStore$MH() {
        return RuntimeHelper.requireNonNull(constants$840.PFXImportCertStore$MH,"PFXImportCertStore");
    }
    public static MemoryAddress PFXImportCertStore ( Addressable pPFX,  Addressable szPassword,  int dwFlags) {
        var mh$ = PFXImportCertStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pPFX, szPassword, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXIsPFXBlob$MH() {
        return RuntimeHelper.requireNonNull(constants$841.PFXIsPFXBlob$MH,"PFXIsPFXBlob");
    }
    public static int PFXIsPFXBlob ( Addressable pPFX) {
        var mh$ = PFXIsPFXBlob$MH();
        try {
            return (int)mh$.invokeExact(pPFX);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXVerifyPassword$MH() {
        return RuntimeHelper.requireNonNull(constants$841.PFXVerifyPassword$MH,"PFXVerifyPassword");
    }
    public static int PFXVerifyPassword ( Addressable pPFX,  Addressable szPassword,  int dwFlags) {
        var mh$ = PFXVerifyPassword$MH();
        try {
            return (int)mh$.invokeExact(pPFX, szPassword, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXExportCertStoreEx$MH() {
        return RuntimeHelper.requireNonNull(constants$841.PFXExportCertStoreEx$MH,"PFXExportCertStoreEx");
    }
    public static int PFXExportCertStoreEx ( Addressable hStore,  Addressable pPFX,  Addressable szPassword,  Addressable pvPara,  int dwFlags) {
        var mh$ = PFXExportCertStoreEx$MH();
        try {
            return (int)mh$.invokeExact(hStore, pPFX, szPassword, pvPara, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPKCS12_PBES2_EXPORT_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PFXExportCertStore$MH() {
        return RuntimeHelper.requireNonNull(constants$841.PFXExportCertStore$MH,"PFXExportCertStore");
    }
    public static int PFXExportCertStore ( Addressable hStore,  Addressable pPFX,  Addressable szPassword,  int dwFlags) {
        var mh$ = PFXExportCertStore$MH();
        try {
            return (int)mh$.invokeExact(hStore, pPFX, szPassword, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCERT_SERVER_OCSP_RESPONSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SERVER_OCSP_RESPONSE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_SERVER_OCSP_RESPONSE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertOpenServerOcspResponse$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CertOpenServerOcspResponse$MH,"CertOpenServerOcspResponse");
    }
    public static MemoryAddress CertOpenServerOcspResponse ( Addressable pChainContext,  int dwFlags,  Addressable pOpenPara) {
        var mh$ = CertOpenServerOcspResponse$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pChainContext, dwFlags, pOpenPara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddRefServerOcspResponse$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CertAddRefServerOcspResponse$MH,"CertAddRefServerOcspResponse");
    }
    public static void CertAddRefServerOcspResponse ( Addressable hServerOcspResponse) {
        var mh$ = CertAddRefServerOcspResponse$MH();
        try {
            mh$.invokeExact(hServerOcspResponse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCloseServerOcspResponse$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CertCloseServerOcspResponse$MH,"CertCloseServerOcspResponse");
    }
    public static void CertCloseServerOcspResponse ( Addressable hServerOcspResponse,  int dwFlags) {
        var mh$ = CertCloseServerOcspResponse$MH();
        try {
            mh$.invokeExact(hServerOcspResponse, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetServerOcspResponseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CertGetServerOcspResponseContext$MH,"CertGetServerOcspResponseContext");
    }
    public static MemoryAddress CertGetServerOcspResponseContext ( Addressable hServerOcspResponse,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CertGetServerOcspResponseContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hServerOcspResponse, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddRefServerOcspResponseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CertAddRefServerOcspResponseContext$MH,"CertAddRefServerOcspResponseContext");
    }
    public static void CertAddRefServerOcspResponseContext ( Addressable pServerOcspResponseContext) {
        var mh$ = CertAddRefServerOcspResponseContext$MH();
        try {
            mh$.invokeExact(pServerOcspResponseContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeServerOcspResponseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CertFreeServerOcspResponseContext$MH,"CertFreeServerOcspResponseContext");
    }
    public static void CertFreeServerOcspResponseContext ( Addressable pServerOcspResponseContext) {
        var mh$ = CertFreeServerOcspResponseContext$MH();
        try {
            mh$.invokeExact(pServerOcspResponseContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRetrieveLogoOrBiometricInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CertRetrieveLogoOrBiometricInfo$MH,"CertRetrieveLogoOrBiometricInfo");
    }
    public static int CertRetrieveLogoOrBiometricInfo ( Addressable pCertContext,  Addressable lpszLogoOrBiometricType,  int dwRetrievalFlags,  int dwTimeout,  int dwFlags,  Addressable pvReserved,  Addressable ppbData,  Addressable pcbData,  Addressable ppwszMimeType) {
        var mh$ = CertRetrieveLogoOrBiometricInfo$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, lpszLogoOrBiometricType, dwRetrievalFlags, dwTimeout, dwFlags, pvReserved, ppbData, pcbData, ppwszMimeType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_SELECT_CHAIN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_SELECT_CHAIN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SELECT_CRITERIA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_SELECT_CRITERIA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertSelectCertificateChains$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CertSelectCertificateChains$MH,"CertSelectCertificateChains");
    }
    public static int CertSelectCertificateChains ( Addressable pSelectionContext,  int dwFlags,  Addressable pChainParameters,  int cCriteria,  Addressable rgpCriteria,  Addressable hStore,  Addressable pcSelection,  Addressable pprgpSelection) {
        var mh$ = CertSelectCertificateChains$MH();
        try {
            return (int)mh$.invokeExact(pSelectionContext, dwFlags, pChainParameters, cCriteria, rgpCriteria, hStore, pcSelection, pprgpSelection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateChainList$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CertFreeCertificateChainList$MH,"CertFreeCertificateChainList");
    }
    public static void CertFreeCertificateChainList ( Addressable prgpSelection) {
        var mh$ = CertFreeCertificateChainList$MH();
        try {
            mh$.invokeExact(prgpSelection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_TIMESTAMP_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIMESTAMP_RESPONSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIMESTAMP_ACCURACY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIMESTAMP_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIMESTAMP_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIMESTAMP_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptRetrieveTimeStamp$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CryptRetrieveTimeStamp$MH,"CryptRetrieveTimeStamp");
    }
    public static int CryptRetrieveTimeStamp ( Addressable wszUrl,  int dwRetrievalFlags,  int dwTimeout,  Addressable pszHashId,  Addressable pPara,  Addressable pbData,  int cbData,  Addressable ppTsContext,  Addressable ppTsSigner,  Addressable phStore) {
        var mh$ = CryptRetrieveTimeStamp$MH();
        try {
            return (int)mh$.invokeExact(wszUrl, dwRetrievalFlags, dwTimeout, pszHashId, pPara, pbData, cbData, ppTsContext, ppTsSigner, phStore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyTimeStampSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CryptVerifyTimeStampSignature$MH,"CryptVerifyTimeStampSignature");
    }
    public static int CryptVerifyTimeStampSignature ( Addressable pbTSContentInfo,  int cbTSContentInfo,  Addressable pbData,  int cbData,  Addressable hAdditionalStore,  Addressable ppTsContext,  Addressable ppTsSigner,  Addressable phStore) {
        var mh$ = CryptVerifyTimeStampSignature$MH();
        try {
            return (int)mh$.invokeExact(pbTSContentInfo, cbTSContentInfo, pbData, cbData, hAdditionalStore, ppTsContext, ppTsSigner, phStore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertIsWeakHash$MH() {
        return RuntimeHelper.requireNonNull(constants$846.CertIsWeakHash$MH,"CertIsWeakHash");
    }
    public static int CertIsWeakHash ( int dwHashUseType,  Addressable pwszCNGHashAlgid,  int dwChainFlags,  Addressable pSignerChainContext,  Addressable pTimeStamp,  Addressable pwszFileName) {
        var mh$ = CertIsWeakHash$MH();
        try {
            return (int)mh$.invokeExact(dwHashUseType, pwszCNGHashAlgid, dwChainFlags, pSignerChainContext, pTimeStamp, pwszFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPTPROTECT_PROMPTSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptProtectData$MH() {
        return RuntimeHelper.requireNonNull(constants$846.CryptProtectData$MH,"CryptProtectData");
    }
    public static int CryptProtectData ( Addressable pDataIn,  Addressable szDataDescr,  Addressable pOptionalEntropy,  Addressable pvReserved,  Addressable pPromptStruct,  int dwFlags,  Addressable pDataOut) {
        var mh$ = CryptProtectData$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, szDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pDataOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnprotectData$MH() {
        return RuntimeHelper.requireNonNull(constants$846.CryptUnprotectData$MH,"CryptUnprotectData");
    }
    public static int CryptUnprotectData ( Addressable pDataIn,  Addressable ppszDataDescr,  Addressable pOptionalEntropy,  Addressable pvReserved,  Addressable pPromptStruct,  int dwFlags,  Addressable pDataOut) {
        var mh$ = CryptUnprotectData$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, ppszDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pDataOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptProtectDataNoUI$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CryptProtectDataNoUI$MH,"CryptProtectDataNoUI");
    }
    public static int CryptProtectDataNoUI ( Addressable pDataIn,  Addressable szDataDescr,  Addressable pOptionalEntropy,  Addressable pvReserved,  Addressable pPromptStruct,  int dwFlags,  Addressable pbOptionalPassword,  int cbOptionalPassword,  Addressable pDataOut) {
        var mh$ = CryptProtectDataNoUI$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, szDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pbOptionalPassword, cbOptionalPassword, pDataOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnprotectDataNoUI$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CryptUnprotectDataNoUI$MH,"CryptUnprotectDataNoUI");
    }
    public static int CryptUnprotectDataNoUI ( Addressable pDataIn,  Addressable ppszDataDescr,  Addressable pOptionalEntropy,  Addressable pvReserved,  Addressable pPromptStruct,  int dwFlags,  Addressable pbOptionalPassword,  int cbOptionalPassword,  Addressable pDataOut) {
        var mh$ = CryptUnprotectDataNoUI$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, ppszDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pbOptionalPassword, cbOptionalPassword, pDataOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUpdateProtectedState$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CryptUpdateProtectedState$MH,"CryptUpdateProtectedState");
    }
    public static int CryptUpdateProtectedState ( Addressable pOldSid,  Addressable pwszOldPassword,  int dwFlags,  Addressable pdwSuccessCount,  Addressable pdwFailureCount) {
        var mh$ = CryptUpdateProtectedState$MH();
        try {
            return (int)mh$.invokeExact(pOldSid, pwszOldPassword, dwFlags, pdwSuccessCount, pdwFailureCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptProtectMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CryptProtectMemory$MH,"CryptProtectMemory");
    }
    public static int CryptProtectMemory ( Addressable pDataIn,  int cbDataIn,  int dwFlags) {
        var mh$ = CryptProtectMemory$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, cbDataIn, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnprotectMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CryptUnprotectMemory$MH,"CryptUnprotectMemory");
    }
    public static int CryptUnprotectMemory ( Addressable pDataIn,  int cbDataIn,  int dwFlags) {
        var mh$ = CryptUnprotectMemory$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, cbDataIn, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PEFS_CERTIFICATE_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_HASH_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_RPC_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_PIN_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_COMPATIBILITY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_VERSION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_DECRYPTION_STATUS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_ENCRYPTION_STATUS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_CERTIFICATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_CERTIFICATE_HASH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_CERTIFICATE_HASH_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_CERTIFICATE_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTED_FILE_METADATA_SIGNATURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_PROTECTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_PROTECTOR_LIST = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle QueryUsersOnEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$847.QueryUsersOnEncryptedFile$MH,"QueryUsersOnEncryptedFile");
    }
    public static int QueryUsersOnEncryptedFile ( Addressable lpFileName,  Addressable pUsers) {
        var mh$ = QueryUsersOnEncryptedFile$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pUsers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryRecoveryAgentsOnEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$848.QueryRecoveryAgentsOnEncryptedFile$MH,"QueryRecoveryAgentsOnEncryptedFile");
    }
    public static int QueryRecoveryAgentsOnEncryptedFile ( Addressable lpFileName,  Addressable pRecoveryAgents) {
        var mh$ = QueryRecoveryAgentsOnEncryptedFile$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pRecoveryAgents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveUsersFromEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$848.RemoveUsersFromEncryptedFile$MH,"RemoveUsersFromEncryptedFile");
    }
    public static int RemoveUsersFromEncryptedFile ( Addressable lpFileName,  Addressable pHashes) {
        var mh$ = RemoveUsersFromEncryptedFile$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pHashes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddUsersToEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$848.AddUsersToEncryptedFile$MH,"AddUsersToEncryptedFile");
    }
    public static int AddUsersToEncryptedFile ( Addressable lpFileName,  Addressable pEncryptionCertificates) {
        var mh$ = AddUsersToEncryptedFile$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pEncryptionCertificates);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserFileEncryptionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$848.SetUserFileEncryptionKey$MH,"SetUserFileEncryptionKey");
    }
    public static int SetUserFileEncryptionKey ( Addressable pEncryptionCertificate) {
        var mh$ = SetUserFileEncryptionKey$MH();
        try {
            return (int)mh$.invokeExact(pEncryptionCertificate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserFileEncryptionKeyEx$MH() {
        return RuntimeHelper.requireNonNull(constants$848.SetUserFileEncryptionKeyEx$MH,"SetUserFileEncryptionKeyEx");
    }
    public static int SetUserFileEncryptionKeyEx ( Addressable pEncryptionCertificate,  int dwCapabilities,  int dwFlags,  Addressable pvReserved) {
        var mh$ = SetUserFileEncryptionKeyEx$MH();
        try {
            return (int)mh$.invokeExact(pEncryptionCertificate, dwCapabilities, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeEncryptionCertificateHashList$MH() {
        return RuntimeHelper.requireNonNull(constants$848.FreeEncryptionCertificateHashList$MH,"FreeEncryptionCertificateHashList");
    }
    public static void FreeEncryptionCertificateHashList ( Addressable pUsers) {
        var mh$ = FreeEncryptionCertificateHashList$MH();
        try {
            mh$.invokeExact(pUsers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncryptionDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$849.EncryptionDisable$MH,"EncryptionDisable");
    }
    public static int EncryptionDisable ( Addressable DirPath,  int Disable) {
        var mh$ = EncryptionDisable$MH();
        try {
            return (int)mh$.invokeExact(DirPath, Disable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateEncryptionInfoFile$MH() {
        return RuntimeHelper.requireNonNull(constants$849.DuplicateEncryptionInfoFile$MH,"DuplicateEncryptionInfoFile");
    }
    public static int DuplicateEncryptionInfoFile ( Addressable SrcFileName,  Addressable DstFileName,  int dwCreationDistribution,  int dwAttributes,  Addressable lpSecurityAttributes) {
        var mh$ = DuplicateEncryptionInfoFile$MH();
        try {
            return (int)mh$.invokeExact(SrcFileName, DstFileName, dwCreationDistribution, dwAttributes, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEncryptedFileMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$849.GetEncryptedFileMetadata$MH,"GetEncryptedFileMetadata");
    }
    public static int GetEncryptedFileMetadata ( Addressable lpFileName,  Addressable pcbMetadata,  Addressable ppbMetadata) {
        var mh$ = GetEncryptedFileMetadata$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pcbMetadata, ppbMetadata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEncryptedFileMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$849.SetEncryptedFileMetadata$MH,"SetEncryptedFileMetadata");
    }
    public static int SetEncryptedFileMetadata ( Addressable lpFileName,  Addressable pbOldMetadata,  Addressable pbNewMetadata,  Addressable pOwnerHash,  int dwOperation,  Addressable pCertificatesAdded) {
        var mh$ = SetEncryptedFileMetadata$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pbOldMetadata, pbNewMetadata, pOwnerHash, dwOperation, pCertificatesAdded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeEncryptedFileMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$849.FreeEncryptedFileMetadata$MH,"FreeEncryptedFileMetadata");
    }
    public static void FreeEncryptedFileMetadata ( Addressable pbMetadata) {
        var mh$ = FreeEncryptedFileMetadata$MH();
        try {
            mh$.invokeExact(pbMetadata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRPC_IMPORT_CONTEXT_P = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle I_RpcNsGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$849.I_RpcNsGetBuffer$MH,"I_RpcNsGetBuffer");
    }
    public static int I_RpcNsGetBuffer ( Addressable Message) {
        var mh$ = I_RpcNsGetBuffer$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$850.I_RpcNsSendReceive$MH,"I_RpcNsSendReceive");
    }
    public static int I_RpcNsSendReceive ( Addressable Message,  Addressable Handle) {
        var mh$ = I_RpcNsSendReceive$MH();
        try {
            return (int)mh$.invokeExact(Message, Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsRaiseException$MH() {
        return RuntimeHelper.requireNonNull(constants$850.I_RpcNsRaiseException$MH,"I_RpcNsRaiseException");
    }
    public static void I_RpcNsRaiseException ( Addressable Message,  int Status) {
        var mh$ = I_RpcNsRaiseException$MH();
        try {
            mh$.invokeExact(Message, Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcReBindBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$850.I_RpcReBindBuffer$MH,"I_RpcReBindBuffer");
    }
    public static int I_RpcReBindBuffer ( Addressable Message) {
        var mh$ = I_RpcReBindBuffer$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsServerBindSearch$MH() {
        return RuntimeHelper.requireNonNull(constants$850.I_NsServerBindSearch$MH,"I_NsServerBindSearch");
    }
    public static int I_NsServerBindSearch () {
        var mh$ = I_NsServerBindSearch$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsClientBindSearch$MH() {
        return RuntimeHelper.requireNonNull(constants$850.I_NsClientBindSearch$MH,"I_NsClientBindSearch");
    }
    public static int I_NsClientBindSearch () {
        var mh$ = I_NsClientBindSearch$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsClientBindDone$MH() {
        return RuntimeHelper.requireNonNull(constants$850.I_NsClientBindDone$MH,"I_NsClientBindDone");
    }
    public static void I_NsClientBindDone () {
        var mh$ = I_NsClientBindDone$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MIDL_user_allocate$MH() {
        return RuntimeHelper.requireNonNull(constants$851.MIDL_user_allocate$MH,"MIDL_user_allocate");
    }
    public static MemoryAddress MIDL_user_allocate ( long size) {
        var mh$ = MIDL_user_allocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MIDL_user_free$MH() {
        return RuntimeHelper.requireNonNull(constants$851.MIDL_user_free$MH,"MIDL_user_free");
    }
    public static void MIDL_user_free ( Addressable x0) {
        var mh$ = MIDL_user_free$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcDefaultAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$851.I_RpcDefaultAllocate$MH,"I_RpcDefaultAllocate");
    }
    public static MemoryAddress I_RpcDefaultAllocate ( Addressable bh,  long size,  Addressable RealAlloc) {
        var mh$ = I_RpcDefaultAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(bh, size, RealAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcDefaultFree$MH() {
        return RuntimeHelper.requireNonNull(constants$852.I_RpcDefaultFree$MH,"I_RpcDefaultFree");
    }
    public static void I_RpcDefaultFree ( Addressable bh,  Addressable x1,  Addressable RealFree) {
        var mh$ = I_RpcDefaultFree$MH();
        try {
            mh$.invokeExact(bh, x1, RealFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress NDR_CCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NDR_SCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCONTEXT_QUEUE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NDRCContextBinding$MH() {
        return RuntimeHelper.requireNonNull(constants$853.NDRCContextBinding$MH,"NDRCContextBinding");
    }
    public static MemoryAddress NDRCContextBinding ( Addressable CContext) {
        var mh$ = NDRCContextBinding$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(CContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$853.NDRCContextMarshall$MH,"NDRCContextMarshall");
    }
    public static void NDRCContextMarshall ( Addressable CContext,  Addressable pBuff) {
        var mh$ = NDRCContextMarshall$MH();
        try {
            mh$.invokeExact(CContext, pBuff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$853.NDRCContextUnmarshall$MH,"NDRCContextUnmarshall");
    }
    public static void NDRCContextUnmarshall ( Addressable pCContext,  Addressable hBinding,  Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRCContextUnmarshall$MH();
        try {
            mh$.invokeExact(pCContext, hBinding, pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextUnmarshall2$MH() {
        return RuntimeHelper.requireNonNull(constants$853.NDRCContextUnmarshall2$MH,"NDRCContextUnmarshall2");
    }
    public static void NDRCContextUnmarshall2 ( Addressable pCContext,  Addressable hBinding,  Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRCContextUnmarshall2$MH();
        try {
            mh$.invokeExact(pCContext, hBinding, pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$854.NDRSContextMarshall$MH,"NDRSContextMarshall");
    }
    public static void NDRSContextMarshall ( Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn) {
        var mh$ = NDRSContextMarshall$MH();
        try {
            mh$.invokeExact(CContext, pBuff, userRunDownIn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$854.NDRSContextUnmarshall$MH,"NDRSContextUnmarshall");
    }
    public static MemoryAddress NDRSContextUnmarshall ( Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRSContextUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshallEx$MH() {
        return RuntimeHelper.requireNonNull(constants$854.NDRSContextMarshallEx$MH,"NDRSContextMarshallEx");
    }
    public static void NDRSContextMarshallEx ( Addressable BindingHandle,  Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn) {
        var mh$ = NDRSContextMarshallEx$MH();
        try {
            mh$.invokeExact(BindingHandle, CContext, pBuff, userRunDownIn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshall2$MH() {
        return RuntimeHelper.requireNonNull(constants$854.NDRSContextMarshall2$MH,"NDRSContextMarshall2");
    }
    public static void NDRSContextMarshall2 ( Addressable BindingHandle,  Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn,  Addressable CtxGuard,  int Flags) {
        var mh$ = NDRSContextMarshall2$MH();
        try {
            mh$.invokeExact(BindingHandle, CContext, pBuff, userRunDownIn, CtxGuard, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshallEx$MH() {
        return RuntimeHelper.requireNonNull(constants$854.NDRSContextUnmarshallEx$MH,"NDRSContextUnmarshallEx");
    }
    public static MemoryAddress NDRSContextUnmarshallEx ( Addressable BindingHandle,  Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRSContextUnmarshallEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BindingHandle, pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshall2$MH() {
        return RuntimeHelper.requireNonNull(constants$854.NDRSContextUnmarshall2$MH,"NDRSContextUnmarshall2");
    }
    public static MemoryAddress NDRSContextUnmarshall2 ( Addressable BindingHandle,  Addressable pBuff,  int DataRepresentation,  Addressable CtxGuard,  int Flags) {
        var mh$ = NDRSContextUnmarshall2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BindingHandle, pBuff, DataRepresentation, CtxGuard, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsDestroyClientContext$MH() {
        return RuntimeHelper.requireNonNull(constants$855.RpcSsDestroyClientContext$MH,"RpcSsDestroyClientContext");
    }
    public static void RpcSsDestroyClientContext ( Addressable ContextHandle) {
        var mh$ = RpcSsDestroyClientContext$MH();
        try {
            mh$.invokeExact(ContextHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress RPC_BUFPTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_STRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PARRAY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNDR_ASYNC_MESSAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNDR_CORRELATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_STRING$0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_SYNTAX_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_STUB_MESSAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_STUB_MESSAGE$1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGENERIC_BINDING_ROUTINE_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGENERIC_BINDING_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXMIT_ROUTINE_QUINTUPLE = Constants$root.C_POINTER$LAYOUT;
    public static int USER_MARSHAL_CB_BUFFER_SIZE() {
        return (int)0L;
    }
    public static int USER_MARSHAL_CB_MARSHALL() {
        return (int)1L;
    }
    public static int USER_MARSHAL_CB_UNMARSHALL() {
        return (int)2L;
    }
    public static int USER_MARSHAL_CB_FREE() {
        return (int)3L;
    }
    public static int IDL_CS_NO_CONVERT() {
        return (int)0L;
    }
    public static int IDL_CS_IN_PLACE_CONVERT() {
        return (int)1L;
    }
    public static int IDL_CS_NEW_BUFFER_CONVERT() {
        return (int)2L;
    }
    public static MethodHandle RpcCsGetTags$MH() {
        return RuntimeHelper.requireNonNull(constants$859.RpcCsGetTags$MH,"RpcCsGetTags");
    }
    public static void RpcCsGetTags ( Addressable hBinding,  int fServerSide,  Addressable pulSendingTag,  Addressable pulDesiredReceivingTag,  Addressable pulReceivingTag,  Addressable pStatus) {
        var mh$ = RpcCsGetTags$MH();
        try {
            mh$.invokeExact(hBinding, fServerSide, pulSendingTag, pulDesiredReceivingTag, pulReceivingTag, pStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMIDL_STUB_DESC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_XMIT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_METHOD_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_METHOD_PROPERTY_MAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_SERVER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_STUBLESS_PROXY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_SYNTAX_INFO$2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PARAM_OFFSETTABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARAM_OFFSETTABLE = Constants$root.C_POINTER$LAYOUT;
    public static int XLAT_SERVER() {
        return (int)1L;
    }
    public static int XLAT_CLIENT() {
        return (int)2L;
    }
    public static OfAddress PFULL_PTR_XLAT_TABLES = Constants$root.C_POINTER$LAYOUT;
    public static int SYSTEM_HANDLE_FILE() {
        return (int)0L;
    }
    public static int SYSTEM_HANDLE_SEMAPHORE() {
        return (int)1L;
    }
    public static int SYSTEM_HANDLE_EVENT() {
        return (int)2L;
    }
    public static int SYSTEM_HANDLE_MUTEX() {
        return (int)3L;
    }
    public static int SYSTEM_HANDLE_PROCESS() {
        return (int)4L;
    }
    public static int SYSTEM_HANDLE_TOKEN() {
        return (int)5L;
    }
    public static int SYSTEM_HANDLE_SECTION() {
        return (int)6L;
    }
    public static int SYSTEM_HANDLE_REG_KEY() {
        return (int)7L;
    }
    public static int SYSTEM_HANDLE_THREAD() {
        return (int)8L;
    }
    public static int SYSTEM_HANDLE_COMPOSITION_OBJECT() {
        return (int)9L;
    }
    public static int SYSTEM_HANDLE_SOCKET() {
        return (int)10L;
    }
    public static int SYSTEM_HANDLE_JOB() {
        return (int)11L;
    }
    public static int SYSTEM_HANDLE_PIPE() {
        return (int)12L;
    }
    public static int SYSTEM_HANDLE_MAX() {
        return (int)12L;
    }
    public static int SYSTEM_HANDLE_INVALID() {
        return (int)255L;
    }
    public static int MidlInterceptionInfoVersionOne() {
        return (int)1L;
    }
    public static int MidlWinrtTypeSerializationInfoVersionOne() {
        return (int)1L;
    }
    public static OfAddress PMIDL_INTERCEPTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_WINRT_TYPE_SERIALIZATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NdrClientGetSupportedSyntaxes$MH() {
        return RuntimeHelper.requireNonNull(constants$860.NdrClientGetSupportedSyntaxes$MH,"NdrClientGetSupportedSyntaxes");
    }
    public static int NdrClientGetSupportedSyntaxes ( Addressable pInf,  Addressable pCount,  Addressable pArr) {
        var mh$ = NdrClientGetSupportedSyntaxes$MH();
        try {
            return (int)mh$.invokeExact(pInf, pCount, pArr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerGetSupportedSyntaxes$MH() {
        return RuntimeHelper.requireNonNull(constants$860.NdrServerGetSupportedSyntaxes$MH,"NdrServerGetSupportedSyntaxes");
    }
    public static int NdrServerGetSupportedSyntaxes ( Addressable pInf,  Addressable pCount,  Addressable pArr,  Addressable pPreferSyntaxIndex) {
        var mh$ = NdrServerGetSupportedSyntaxes$MH();
        try {
            return (int)mh$.invokeExact(pInf, pCount, pArr, pPreferSyntaxIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleTypeMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$860.NdrSimpleTypeMarshall$MH,"NdrSimpleTypeMarshall");
    }
    public static void NdrSimpleTypeMarshall ( Addressable pStubMsg,  Addressable pMemory,  byte FormatChar) {
        var mh$ = NdrSimpleTypeMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$860.NdrPointerMarshall$MH,"NdrPointerMarshall");
    }
    public static MemoryAddress NdrPointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrPointerMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NdrCsArrayMarshall$MH,"NdrCsArrayMarshall");
    }
    public static MemoryAddress NdrCsArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NdrCsTagMarshall$MH,"NdrCsTagMarshall");
    }
    public static MemoryAddress NdrCsTagMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsTagMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NdrSimpleStructMarshall$MH,"NdrSimpleStructMarshall");
    }
    public static MemoryAddress NdrSimpleStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrSimpleStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NdrConformantStructMarshall$MH,"NdrConformantStructMarshall");
    }
    public static MemoryAddress NdrConformantStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NdrConformantVaryingStructMarshall$MH,"NdrConformantVaryingStructMarshall");
    }
    public static MemoryAddress NdrConformantVaryingStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NdrComplexStructMarshall$MH,"NdrComplexStructMarshall");
    }
    public static MemoryAddress NdrComplexStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrFixedArrayMarshall$MH,"NdrFixedArrayMarshall");
    }
    public static MemoryAddress NdrFixedArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrFixedArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrConformantArrayMarshall$MH,"NdrConformantArrayMarshall");
    }
    public static MemoryAddress NdrConformantArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrConformantVaryingArrayMarshall$MH,"NdrConformantVaryingArrayMarshall");
    }
    public static MemoryAddress NdrConformantVaryingArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrVaryingArrayMarshall$MH,"NdrVaryingArrayMarshall");
    }
    public static MemoryAddress NdrVaryingArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrComplexArrayMarshall$MH,"NdrComplexArrayMarshall");
    }
    public static MemoryAddress NdrComplexArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrNonConformantStringMarshall$MH,"NdrNonConformantStringMarshall");
    }
    public static MemoryAddress NdrNonConformantStringMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonConformantStringMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$863.NdrConformantStringMarshall$MH,"NdrConformantStringMarshall");
    }
    public static MemoryAddress NdrConformantStringMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStringMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$863.NdrEncapsulatedUnionMarshall$MH,"NdrEncapsulatedUnionMarshall");
    }
    public static MemoryAddress NdrEncapsulatedUnionMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$863.NdrNonEncapsulatedUnionMarshall$MH,"NdrNonEncapsulatedUnionMarshall");
    }
    public static MemoryAddress NdrNonEncapsulatedUnionMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$863.NdrByteCountPointerMarshall$MH,"NdrByteCountPointerMarshall");
    }
    public static MemoryAddress NdrByteCountPointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrByteCountPointerMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$863.NdrXmitOrRepAsMarshall$MH,"NdrXmitOrRepAsMarshall");
    }
    public static MemoryAddress NdrXmitOrRepAsMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$863.NdrUserMarshalMarshall$MH,"NdrUserMarshalMarshall");
    }
    public static MemoryAddress NdrUserMarshalMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrUserMarshalMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$864.NdrInterfacePointerMarshall$MH,"NdrInterfacePointerMarshall");
    }
    public static MemoryAddress NdrInterfacePointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$864.NdrClientContextMarshall$MH,"NdrClientContextMarshall");
    }
    public static void NdrClientContextMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  int fCheck) {
        var mh$ = NdrClientContextMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ContextHandle, fCheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$864.NdrServerContextMarshall$MH,"NdrServerContextMarshall");
    }
    public static void NdrServerContextMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  Addressable RundownRoutine) {
        var mh$ = NdrServerContextMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ContextHandle, RundownRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextNewMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$864.NdrServerContextNewMarshall$MH,"NdrServerContextNewMarshall");
    }
    public static void NdrServerContextNewMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  Addressable RundownRoutine,  Addressable pFormat) {
        var mh$ = NdrServerContextNewMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ContextHandle, RundownRoutine, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleTypeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$864.NdrSimpleTypeUnmarshall$MH,"NdrSimpleTypeUnmarshall");
    }
    public static void NdrSimpleTypeUnmarshall ( Addressable pStubMsg,  Addressable pMemory,  byte FormatChar) {
        var mh$ = NdrSimpleTypeUnmarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$864.NdrCsArrayUnmarshall$MH,"NdrCsArrayUnmarshall");
    }
    public static MemoryAddress NdrCsArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrCsArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrCsTagUnmarshall$MH,"NdrCsTagUnmarshall");
    }
    public static MemoryAddress NdrCsTagUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrCsTagUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRangeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrRangeUnmarshall$MH,"NdrRangeUnmarshall");
    }
    public static MemoryAddress NdrRangeUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrRangeUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrCorrelationInitialize$MH,"NdrCorrelationInitialize");
    }
    public static void NdrCorrelationInitialize ( Addressable pStubMsg,  Addressable pMemory,  int CacheSize,  int flags) {
        var mh$ = NdrCorrelationInitialize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, CacheSize, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationPass$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrCorrelationPass$MH,"NdrCorrelationPass");
    }
    public static void NdrCorrelationPass ( Addressable pStubMsg) {
        var mh$ = NdrCorrelationPass$MH();
        try {
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationFree$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrCorrelationFree$MH,"NdrCorrelationFree");
    }
    public static void NdrCorrelationFree ( Addressable pStubMsg) {
        var mh$ = NdrCorrelationFree$MH();
        try {
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrPointerUnmarshall$MH,"NdrPointerUnmarshall");
    }
    public static MemoryAddress NdrPointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrPointerUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$866.NdrSimpleStructUnmarshall$MH,"NdrSimpleStructUnmarshall");
    }
    public static MemoryAddress NdrSimpleStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrSimpleStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$866.NdrConformantStructUnmarshall$MH,"NdrConformantStructUnmarshall");
    }
    public static MemoryAddress NdrConformantStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$866.NdrConformantVaryingStructUnmarshall$MH,"NdrConformantVaryingStructUnmarshall");
    }
    public static MemoryAddress NdrConformantVaryingStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantVaryingStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$866.NdrComplexStructUnmarshall$MH,"NdrComplexStructUnmarshall");
    }
    public static MemoryAddress NdrComplexStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrComplexStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$866.NdrFixedArrayUnmarshall$MH,"NdrFixedArrayUnmarshall");
    }
    public static MemoryAddress NdrFixedArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrFixedArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$866.NdrConformantArrayUnmarshall$MH,"NdrConformantArrayUnmarshall");
    }
    public static MemoryAddress NdrConformantArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$867.NdrConformantVaryingArrayUnmarshall$MH,"NdrConformantVaryingArrayUnmarshall");
    }
    public static MemoryAddress NdrConformantVaryingArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantVaryingArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$867.NdrVaryingArrayUnmarshall$MH,"NdrVaryingArrayUnmarshall");
    }
    public static MemoryAddress NdrVaryingArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrVaryingArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$867.NdrComplexArrayUnmarshall$MH,"NdrComplexArrayUnmarshall");
    }
    public static MemoryAddress NdrComplexArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrComplexArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$867.NdrNonConformantStringUnmarshall$MH,"NdrNonConformantStringUnmarshall");
    }
    public static MemoryAddress NdrNonConformantStringUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrNonConformantStringUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$867.NdrConformantStringUnmarshall$MH,"NdrConformantStringUnmarshall");
    }
    public static MemoryAddress NdrConformantStringUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantStringUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$867.NdrEncapsulatedUnionUnmarshall$MH,"NdrEncapsulatedUnionUnmarshall");
    }
    public static MemoryAddress NdrEncapsulatedUnionUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrEncapsulatedUnionUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$868.NdrNonEncapsulatedUnionUnmarshall$MH,"NdrNonEncapsulatedUnionUnmarshall");
    }
    public static MemoryAddress NdrNonEncapsulatedUnionUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrNonEncapsulatedUnionUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$868.NdrByteCountPointerUnmarshall$MH,"NdrByteCountPointerUnmarshall");
    }
    public static MemoryAddress NdrByteCountPointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrByteCountPointerUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$868.NdrXmitOrRepAsUnmarshall$MH,"NdrXmitOrRepAsUnmarshall");
    }
    public static MemoryAddress NdrXmitOrRepAsUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrXmitOrRepAsUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$868.NdrUserMarshalUnmarshall$MH,"NdrUserMarshalUnmarshall");
    }
    public static MemoryAddress NdrUserMarshalUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrUserMarshalUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$868.NdrInterfacePointerUnmarshall$MH,"NdrInterfacePointerUnmarshall");
    }
    public static MemoryAddress NdrInterfacePointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrInterfacePointerUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$868.NdrClientContextUnmarshall$MH,"NdrClientContextUnmarshall");
    }
    public static void NdrClientContextUnmarshall ( Addressable pStubMsg,  Addressable pContextHandle,  Addressable BindHandle) {
        var mh$ = NdrClientContextUnmarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pContextHandle, BindHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$869.NdrServerContextUnmarshall$MH,"NdrServerContextUnmarshall");
    }
    public static MemoryAddress NdrServerContextUnmarshall ( Addressable pStubMsg) {
        var mh$ = NdrServerContextUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrContextHandleInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$869.NdrContextHandleInitialize$MH,"NdrContextHandleInitialize");
    }
    public static MemoryAddress NdrContextHandleInitialize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrContextHandleInitialize$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextNewUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$869.NdrServerContextNewUnmarshall$MH,"NdrServerContextNewUnmarshall");
    }
    public static MemoryAddress NdrServerContextNewUnmarshall ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrServerContextNewUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$869.NdrPointerBufferSize$MH,"NdrPointerBufferSize");
    }
    public static void NdrPointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrPointerBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$869.NdrCsArrayBufferSize$MH,"NdrCsArrayBufferSize");
    }
    public static void NdrCsArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$869.NdrCsTagBufferSize$MH,"NdrCsTagBufferSize");
    }
    public static void NdrCsTagBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsTagBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$870.NdrSimpleStructBufferSize$MH,"NdrSimpleStructBufferSize");
    }
    public static void NdrSimpleStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrSimpleStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$870.NdrConformantStructBufferSize$MH,"NdrConformantStructBufferSize");
    }
    public static void NdrConformantStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$870.NdrConformantVaryingStructBufferSize$MH,"NdrConformantVaryingStructBufferSize");
    }
    public static void NdrConformantVaryingStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$870.NdrComplexStructBufferSize$MH,"NdrComplexStructBufferSize");
    }
    public static void NdrComplexStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$870.NdrFixedArrayBufferSize$MH,"NdrFixedArrayBufferSize");
    }
    public static void NdrFixedArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrFixedArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$870.NdrConformantArrayBufferSize$MH,"NdrConformantArrayBufferSize");
    }
    public static void NdrConformantArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$871.NdrConformantVaryingArrayBufferSize$MH,"NdrConformantVaryingArrayBufferSize");
    }
    public static void NdrConformantVaryingArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$871.NdrVaryingArrayBufferSize$MH,"NdrVaryingArrayBufferSize");
    }
    public static void NdrVaryingArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$871.NdrComplexArrayBufferSize$MH,"NdrComplexArrayBufferSize");
    }
    public static void NdrComplexArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$871.NdrConformantStringBufferSize$MH,"NdrConformantStringBufferSize");
    }
    public static void NdrConformantStringBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStringBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$871.NdrNonConformantStringBufferSize$MH,"NdrNonConformantStringBufferSize");
    }
    public static void NdrNonConformantStringBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonConformantStringBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$871.NdrEncapsulatedUnionBufferSize$MH,"NdrEncapsulatedUnionBufferSize");
    }
    public static void NdrEncapsulatedUnionBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$872.NdrNonEncapsulatedUnionBufferSize$MH,"NdrNonEncapsulatedUnionBufferSize");
    }
    public static void NdrNonEncapsulatedUnionBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$872.NdrByteCountPointerBufferSize$MH,"NdrByteCountPointerBufferSize");
    }
    public static void NdrByteCountPointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrByteCountPointerBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$872.NdrXmitOrRepAsBufferSize$MH,"NdrXmitOrRepAsBufferSize");
    }
    public static void NdrXmitOrRepAsBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$872.NdrUserMarshalBufferSize$MH,"NdrUserMarshalBufferSize");
    }
    public static void NdrUserMarshalBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrUserMarshalBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$872.NdrInterfacePointerBufferSize$MH,"NdrInterfacePointerBufferSize");
    }
    public static void NdrInterfacePointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrContextHandleSize$MH() {
        return RuntimeHelper.requireNonNull(constants$872.NdrContextHandleSize$MH,"NdrContextHandleSize");
    }
    public static void NdrContextHandleSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrContextHandleSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$873.NdrPointerMemorySize$MH,"NdrPointerMemorySize");
    }
    public static int NdrPointerMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrPointerMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrContextHandleMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$873.NdrContextHandleMemorySize$MH,"NdrContextHandleMemorySize");
    }
    public static int NdrContextHandleMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrContextHandleMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$873.NdrCsArrayMemorySize$MH,"NdrCsArrayMemorySize");
    }
    public static int NdrCsArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrCsArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$873.NdrCsTagMemorySize$MH,"NdrCsTagMemorySize");
    }
    public static int NdrCsTagMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrCsTagMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$873.NdrSimpleStructMemorySize$MH,"NdrSimpleStructMemorySize");
    }
    public static int NdrSimpleStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrSimpleStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$873.NdrConformantStructMemorySize$MH,"NdrConformantStructMemorySize");
    }
    public static int NdrConformantStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$874.NdrConformantVaryingStructMemorySize$MH,"NdrConformantVaryingStructMemorySize");
    }
    public static int NdrConformantVaryingStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$874.NdrComplexStructMemorySize$MH,"NdrComplexStructMemorySize");
    }
    public static int NdrComplexStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrComplexStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$874.NdrFixedArrayMemorySize$MH,"NdrFixedArrayMemorySize");
    }
    public static int NdrFixedArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrFixedArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$874.NdrConformantArrayMemorySize$MH,"NdrConformantArrayMemorySize");
    }
    public static int NdrConformantArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$874.NdrConformantVaryingArrayMemorySize$MH,"NdrConformantVaryingArrayMemorySize");
    }
    public static int NdrConformantVaryingArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$874.NdrVaryingArrayMemorySize$MH,"NdrVaryingArrayMemorySize");
    }
    public static int NdrVaryingArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$875.NdrComplexArrayMemorySize$MH,"NdrComplexArrayMemorySize");
    }
    public static int NdrComplexArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrComplexArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$875.NdrConformantStringMemorySize$MH,"NdrConformantStringMemorySize");
    }
    public static int NdrConformantStringMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantStringMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$875.NdrNonConformantStringMemorySize$MH,"NdrNonConformantStringMemorySize");
    }
    public static int NdrNonConformantStringMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrNonConformantStringMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$875.NdrEncapsulatedUnionMemorySize$MH,"NdrEncapsulatedUnionMemorySize");
    }
    public static int NdrEncapsulatedUnionMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$875.NdrNonEncapsulatedUnionMemorySize$MH,"NdrNonEncapsulatedUnionMemorySize");
    }
    public static int NdrNonEncapsulatedUnionMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$875.NdrXmitOrRepAsMemorySize$MH,"NdrXmitOrRepAsMemorySize");
    }
    public static int NdrXmitOrRepAsMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$876.NdrUserMarshalMemorySize$MH,"NdrUserMarshalMemorySize");
    }
    public static int NdrUserMarshalMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrUserMarshalMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$876.NdrInterfacePointerMemorySize$MH,"NdrInterfacePointerMemorySize");
    }
    public static int NdrInterfacePointerMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$876.NdrPointerFree$MH,"NdrPointerFree");
    }
    public static void NdrPointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrPointerFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$876.NdrCsArrayFree$MH,"NdrCsArrayFree");
    }
    public static void NdrCsArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$876.NdrSimpleStructFree$MH,"NdrSimpleStructFree");
    }
    public static void NdrSimpleStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrSimpleStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$876.NdrConformantStructFree$MH,"NdrConformantStructFree");
    }
    public static void NdrConformantStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$877.NdrConformantVaryingStructFree$MH,"NdrConformantVaryingStructFree");
    }
    public static void NdrConformantVaryingStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$877.NdrComplexStructFree$MH,"NdrComplexStructFree");
    }
    public static void NdrComplexStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$877.NdrFixedArrayFree$MH,"NdrFixedArrayFree");
    }
    public static void NdrFixedArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrFixedArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$877.NdrConformantArrayFree$MH,"NdrConformantArrayFree");
    }
    public static void NdrConformantArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$877.NdrConformantVaryingArrayFree$MH,"NdrConformantVaryingArrayFree");
    }
    public static void NdrConformantVaryingArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$877.NdrVaryingArrayFree$MH,"NdrVaryingArrayFree");
    }
    public static void NdrVaryingArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NdrComplexArrayFree$MH,"NdrComplexArrayFree");
    }
    public static void NdrComplexArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionFree$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NdrEncapsulatedUnionFree$MH,"NdrEncapsulatedUnionFree");
    }
    public static void NdrEncapsulatedUnionFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionFree$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NdrNonEncapsulatedUnionFree$MH,"NdrNonEncapsulatedUnionFree");
    }
    public static void NdrNonEncapsulatedUnionFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NdrByteCountPointerFree$MH,"NdrByteCountPointerFree");
    }
    public static void NdrByteCountPointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrByteCountPointerFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NdrXmitOrRepAsFree$MH,"NdrXmitOrRepAsFree");
    }
    public static void NdrXmitOrRepAsFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalFree$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NdrUserMarshalFree$MH,"NdrUserMarshalFree");
    }
    public static void NdrUserMarshalFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrUserMarshalFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$879.NdrInterfacePointerFree$MH,"NdrInterfacePointerFree");
    }
    public static void NdrInterfacePointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConvert2$MH() {
        return RuntimeHelper.requireNonNull(constants$879.NdrConvert2$MH,"NdrConvert2");
    }
    public static void NdrConvert2 ( Addressable pStubMsg,  Addressable pFormat,  int NumberParams) {
        var mh$ = NdrConvert2$MH();
        try {
            mh$.invokeExact(pStubMsg, pFormat, NumberParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$879.NdrConvert$MH,"NdrConvert");
    }
    public static void NdrConvert ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConvert$MH();
        try {
            mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalSimpleTypeConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$879.NdrUserMarshalSimpleTypeConvert$MH,"NdrUserMarshalSimpleTypeConvert");
    }
    public static MemoryAddress NdrUserMarshalSimpleTypeConvert ( Addressable pFlags,  Addressable pBuffer,  byte FormatChar) {
        var mh$ = NdrUserMarshalSimpleTypeConvert$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pFlags, pBuffer, FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientInitializeNew$MH() {
        return RuntimeHelper.requireNonNull(constants$879.NdrClientInitializeNew$MH,"NdrClientInitializeNew");
    }
    public static void NdrClientInitializeNew ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int ProcNum) {
        var mh$ = NdrClientInitializeNew$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, ProcNum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeNew$MH() {
        return RuntimeHelper.requireNonNull(constants$879.NdrServerInitializeNew$MH,"NdrServerInitializeNew");
    }
    public static MemoryAddress NdrServerInitializeNew ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor) {
        var mh$ = NdrServerInitializeNew$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializePartial$MH() {
        return RuntimeHelper.requireNonNull(constants$880.NdrServerInitializePartial$MH,"NdrServerInitializePartial");
    }
    public static void NdrServerInitializePartial ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int RequestedBufferSize) {
        var mh$ = NdrServerInitializePartial$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, RequestedBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$880.NdrClientInitialize$MH,"NdrClientInitialize");
    }
    public static void NdrClientInitialize ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int ProcNum) {
        var mh$ = NdrClientInitialize$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, ProcNum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$880.NdrServerInitialize$MH,"NdrServerInitialize");
    }
    public static MemoryAddress NdrServerInitialize ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor) {
        var mh$ = NdrServerInitialize$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$880.NdrServerInitializeUnmarshall$MH,"NdrServerInitializeUnmarshall");
    }
    public static MemoryAddress NdrServerInitializeUnmarshall ( Addressable pStubMsg,  Addressable pStubDescriptor,  Addressable pRpcMsg) {
        var mh$ = NdrServerInitializeUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pStubDescriptor, pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$880.NdrServerInitializeMarshall$MH,"NdrServerInitializeMarshall");
    }
    public static void NdrServerInitializeMarshall ( Addressable pRpcMsg,  Addressable pStubMsg) {
        var mh$ = NdrServerInitializeMarshall$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$880.NdrGetBuffer$MH,"NdrGetBuffer");
    }
    public static MemoryAddress NdrGetBuffer ( Addressable pStubMsg,  int BufferLength,  Addressable Handle) {
        var mh$ = NdrGetBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, BufferLength, Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNsGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$881.NdrNsGetBuffer$MH,"NdrNsGetBuffer");
    }
    public static MemoryAddress NdrNsGetBuffer ( Addressable pStubMsg,  int BufferLength,  Addressable Handle) {
        var mh$ = NdrNsGetBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, BufferLength, Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$881.NdrSendReceive$MH,"NdrSendReceive");
    }
    public static MemoryAddress NdrSendReceive ( Addressable pStubMsg,  Addressable pBufferEnd) {
        var mh$ = NdrSendReceive$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pBufferEnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNsSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$881.NdrNsSendReceive$MH,"NdrNsSendReceive");
    }
    public static MemoryAddress NdrNsSendReceive ( Addressable pStubMsg,  Addressable pBufferEnd,  Addressable pAutoHandle) {
        var mh$ = NdrNsSendReceive$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pBufferEnd, pAutoHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$881.NdrFreeBuffer$MH,"NdrFreeBuffer");
    }
    public static void NdrFreeBuffer ( Addressable pStubMsg) {
        var mh$ = NdrFreeBuffer$MH();
        try {
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetDcomProtocolVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$881.NdrGetDcomProtocolVersion$MH,"NdrGetDcomProtocolVersion");
    }
    public static int NdrGetDcomProtocolVersion ( Addressable pStubMsg,  Addressable pVersion) {
        var mh$ = NdrGetDcomProtocolVersion$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pVersion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$881.NdrClientCall2$MH,"NdrClientCall2");
    }
    public static MemorySegment NdrClientCall2 ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrClientCall2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$882.NdrClientCall$MH,"NdrClientCall");
    }
    public static MemorySegment NdrClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$882.NdrAsyncClientCall$MH,"NdrAsyncClientCall");
    }
    public static MemorySegment NdrAsyncClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrAsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrDcomAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$882.NdrDcomAsyncClientCall$MH,"NdrDcomAsyncClientCall");
    }
    public static MemorySegment NdrDcomAsyncClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrDcomAsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int STUB_UNMARSHAL() {
        return (int)0L;
    }
    public static int STUB_CALL_SERVER() {
        return (int)1L;
    }
    public static int STUB_MARSHAL() {
        return (int)2L;
    }
    public static int STUB_CALL_SERVER_NO_HRESULT() {
        return (int)3L;
    }
    public static int PROXY_CALCSIZE() {
        return (int)0L;
    }
    public static int PROXY_GETBUFFER() {
        return (int)1L;
    }
    public static int PROXY_MARSHAL() {
        return (int)2L;
    }
    public static int PROXY_SENDRECEIVE() {
        return (int)3L;
    }
    public static int PROXY_UNMARSHAL() {
        return (int)4L;
    }
    public static MethodHandle NdrAsyncServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$882.NdrAsyncServerCall$MH,"NdrAsyncServerCall");
    }
    public static void NdrAsyncServerCall ( Addressable pRpcMsg) {
        var mh$ = NdrAsyncServerCall$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$882.NdrAsyncStubCall$MH,"NdrAsyncStubCall");
    }
    public static int NdrAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrAsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrDcomAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$882.NdrDcomAsyncStubCall$MH,"NdrDcomAsyncStubCall");
    }
    public static int NdrDcomAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrDcomAsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$883.NdrStubCall2$MH,"NdrStubCall2");
    }
    public static int NdrStubCall2 ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrStubCall2$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$883.NdrServerCall2$MH,"NdrServerCall2");
    }
    public static void NdrServerCall2 ( Addressable pRpcMsg) {
        var mh$ = NdrServerCall2$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$883.NdrStubCall$MH,"NdrStubCall");
    }
    public static int NdrStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$883.NdrServerCall$MH,"NdrServerCall");
    }
    public static void NdrServerCall ( Addressable pRpcMsg) {
        var mh$ = NdrServerCall$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$883.NdrServerUnmarshall$MH,"NdrServerUnmarshall");
    }
    public static int NdrServerUnmarshall ( Addressable pChannel,  Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  Addressable pFormat,  Addressable pParamList) {
        var mh$ = NdrServerUnmarshall$MH();
        try {
            return (int)mh$.invokeExact(pChannel, pRpcMsg, pStubMsg, pStubDescriptor, pFormat, pParamList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$883.NdrServerMarshall$MH,"NdrServerMarshall");
    }
    public static void NdrServerMarshall ( Addressable pThis,  Addressable pChannel,  Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrServerMarshall$MH();
        try {
            mh$.invokeExact(pThis, pChannel, pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrMapCommAndFaultStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$884.NdrMapCommAndFaultStatus$MH,"NdrMapCommAndFaultStatus");
    }
    public static int NdrMapCommAndFaultStatus ( Addressable pStubMsg,  Addressable pCommStatus,  Addressable pFaultStatus,  int Status) {
        var mh$ = NdrMapCommAndFaultStatus$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pCommStatus, pFaultStatus, Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress RPC_SS_THREAD_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RpcSsAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$884.RpcSsAllocate$MH,"RpcSsAllocate");
    }
    public static MemoryAddress RpcSsAllocate ( long Size) {
        var mh$ = RpcSsAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$885.RpcSsDisableAllocate$MH,"RpcSsDisableAllocate");
    }
    public static void RpcSsDisableAllocate () {
        var mh$ = RpcSsDisableAllocate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$885.RpcSsEnableAllocate$MH,"RpcSsEnableAllocate");
    }
    public static void RpcSsEnableAllocate () {
        var mh$ = RpcSsEnableAllocate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$885.RpcSsFree$MH,"RpcSsFree");
    }
    public static void RpcSsFree ( Addressable NodeToFree) {
        var mh$ = RpcSsFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsGetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$885.RpcSsGetThreadHandle$MH,"RpcSsGetThreadHandle");
    }
    public static MemoryAddress RpcSsGetThreadHandle () {
        var mh$ = RpcSsGetThreadHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSetClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$886.RpcSsSetClientAllocFree$MH,"RpcSsSetClientAllocFree");
    }
    public static void RpcSsSetClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree) {
        var mh$ = RpcSsSetClientAllocFree$MH();
        try {
            mh$.invokeExact(ClientAlloc, ClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$886.RpcSsSetThreadHandle$MH,"RpcSsSetThreadHandle");
    }
    public static void RpcSsSetThreadHandle ( Addressable Id) {
        var mh$ = RpcSsSetThreadHandle$MH();
        try {
            mh$.invokeExact(Id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSwapClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$888.RpcSsSwapClientAllocFree$MH,"RpcSsSwapClientAllocFree");
    }
    public static void RpcSsSwapClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree,  Addressable OldClientAlloc,  Addressable OldClientFree) {
        var mh$ = RpcSsSwapClientAllocFree$MH();
        try {
            mh$.invokeExact(ClientAlloc, ClientFree, OldClientAlloc, OldClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$888.RpcSmAllocate$MH,"RpcSmAllocate");
    }
    public static MemoryAddress RpcSmAllocate ( long Size,  Addressable pStatus) {
        var mh$ = RpcSmAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size, pStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmClientFree$MH() {
        return RuntimeHelper.requireNonNull(constants$888.RpcSmClientFree$MH,"RpcSmClientFree");
    }
    public static int RpcSmClientFree ( Addressable pNodeToFree) {
        var mh$ = RpcSmClientFree$MH();
        try {
            return (int)mh$.invokeExact(pNodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmDestroyClientContext$MH() {
        return RuntimeHelper.requireNonNull(constants$888.RpcSmDestroyClientContext$MH,"RpcSmDestroyClientContext");
    }
    public static int RpcSmDestroyClientContext ( Addressable ContextHandle) {
        var mh$ = RpcSmDestroyClientContext$MH();
        try {
            return (int)mh$.invokeExact(ContextHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$888.RpcSmDisableAllocate$MH,"RpcSmDisableAllocate");
    }
    public static int RpcSmDisableAllocate () {
        var mh$ = RpcSmDisableAllocate$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$888.RpcSmEnableAllocate$MH,"RpcSmEnableAllocate");
    }
    public static int RpcSmEnableAllocate () {
        var mh$ = RpcSmEnableAllocate$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmFree$MH() {
        return RuntimeHelper.requireNonNull(constants$889.RpcSmFree$MH,"RpcSmFree");
    }
    public static int RpcSmFree ( Addressable NodeToFree) {
        var mh$ = RpcSmFree$MH();
        try {
            return (int)mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmGetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$889.RpcSmGetThreadHandle$MH,"RpcSmGetThreadHandle");
    }
    public static MemoryAddress RpcSmGetThreadHandle ( Addressable pStatus) {
        var mh$ = RpcSmGetThreadHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSetClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$890.RpcSmSetClientAllocFree$MH,"RpcSmSetClientAllocFree");
    }
    public static int RpcSmSetClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree) {
        var mh$ = RpcSmSetClientAllocFree$MH();
        try {
            return (int)mh$.invokeExact(ClientAlloc, ClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$890.RpcSmSetThreadHandle$MH,"RpcSmSetThreadHandle");
    }
    public static int RpcSmSetThreadHandle ( Addressable Id) {
        var mh$ = RpcSmSetThreadHandle$MH();
        try {
            return (int)mh$.invokeExact(Id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSwapClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$891.RpcSmSwapClientAllocFree$MH,"RpcSmSwapClientAllocFree");
    }
    public static int RpcSmSwapClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree,  Addressable OldClientAlloc,  Addressable OldClientFree) {
        var mh$ = RpcSmSwapClientAllocFree$MH();
        try {
            return (int)mh$.invokeExact(ClientAlloc, ClientFree, OldClientAlloc, OldClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$891.NdrRpcSsEnableAllocate$MH,"NdrRpcSsEnableAllocate");
    }
    public static void NdrRpcSsEnableAllocate ( Addressable pMessage) {
        var mh$ = NdrRpcSsEnableAllocate$MH();
        try {
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrRpcSsDisableAllocate$MH,"NdrRpcSsDisableAllocate");
    }
    public static void NdrRpcSsDisableAllocate ( Addressable pMessage) {
        var mh$ = NdrRpcSsDisableAllocate$MH();
        try {
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmSetClientToOsf$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrRpcSmSetClientToOsf$MH,"NdrRpcSmSetClientToOsf");
    }
    public static void NdrRpcSmSetClientToOsf ( Addressable pMessage) {
        var mh$ = NdrRpcSmSetClientToOsf$MH();
        try {
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmClientAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrRpcSmClientAllocate$MH,"NdrRpcSmClientAllocate");
    }
    public static MemoryAddress NdrRpcSmClientAllocate ( long Size) {
        var mh$ = NdrRpcSmClientAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmClientFree$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrRpcSmClientFree$MH,"NdrRpcSmClientFree");
    }
    public static void NdrRpcSmClientFree ( Addressable NodeToFree) {
        var mh$ = NdrRpcSmClientFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDefaultAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrRpcSsDefaultAllocate$MH,"NdrRpcSsDefaultAllocate");
    }
    public static MemoryAddress NdrRpcSsDefaultAllocate ( long Size) {
        var mh$ = NdrRpcSsDefaultAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDefaultFree$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrRpcSsDefaultFree$MH,"NdrRpcSsDefaultFree");
    }
    public static void NdrRpcSsDefaultFree ( Addressable NodeToFree) {
        var mh$ = NdrRpcSsDefaultFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerXlatInit$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrFullPointerXlatInit$MH,"NdrFullPointerXlatInit");
    }
    public static MemoryAddress NdrFullPointerXlatInit ( int NumberOfPointers,  int XlatSide) {
        var mh$ = NdrFullPointerXlatInit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(NumberOfPointers, XlatSide);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerXlatFree$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrFullPointerXlatFree$MH,"NdrFullPointerXlatFree");
    }
    public static void NdrFullPointerXlatFree ( Addressable pXlatTables) {
        var mh$ = NdrFullPointerXlatFree$MH();
        try {
            mh$.invokeExact(pXlatTables);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrAllocate$MH,"NdrAllocate");
    }
    public static MemoryAddress NdrAllocate ( Addressable pStubMsg,  long Len) {
        var mh$ = NdrAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClearOutParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrClearOutParameters$MH,"NdrClearOutParameters");
    }
    public static void NdrClearOutParameters ( Addressable pStubMsg,  Addressable pFormat,  Addressable ArgAddr) {
        var mh$ = NdrClearOutParameters$MH();
        try {
            mh$.invokeExact(pStubMsg, pFormat, ArgAddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrOleAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrOleAllocate$MH,"NdrOleAllocate");
    }
    public static MemoryAddress NdrOleAllocate ( long Size) {
        var mh$ = NdrOleAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrOleFree$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrOleFree$MH,"NdrOleFree");
    }
    public static void NdrOleFree ( Addressable NodeToFree) {
        var mh$ = NdrOleFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetUserMarshalInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$894.NdrGetUserMarshalInfo$MH,"NdrGetUserMarshalInfo");
    }
    public static int NdrGetUserMarshalInfo ( Addressable pFlags,  int InformationLevel,  Addressable pMarshalInfo) {
        var mh$ = NdrGetUserMarshalInfo$MH();
        try {
            return (int)mh$.invokeExact(pFlags, InformationLevel, pMarshalInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCreateServerInterfaceFromStub$MH() {
        return RuntimeHelper.requireNonNull(constants$894.NdrCreateServerInterfaceFromStub$MH,"NdrCreateServerInterfaceFromStub");
    }
    public static int NdrCreateServerInterfaceFromStub ( Addressable pStub,  Addressable pServerIf) {
        var mh$ = NdrCreateServerInterfaceFromStub$MH();
        try {
            return (int)mh$.invokeExact(pStub, pServerIf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$894.NdrClientCall3$MH,"NdrClientCall3");
    }
    public static MemorySegment NdrClientCall3 ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = NdrClientCall3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$894.Ndr64AsyncClientCall$MH,"Ndr64AsyncClientCall");
    }
    public static MemorySegment Ndr64AsyncClientCall ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = Ndr64AsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64DcomAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$894.Ndr64DcomAsyncClientCall$MH,"Ndr64DcomAsyncClientCall");
    }
    public static MemorySegment Ndr64DcomAsyncClientCall ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = Ndr64DcomAsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$894.Ndr64AsyncServerCall$MH,"Ndr64AsyncServerCall");
    }
    public static void Ndr64AsyncServerCall ( Addressable pRpcMsg) {
        var mh$ = Ndr64AsyncServerCall$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncServerCall64$MH() {
        return RuntimeHelper.requireNonNull(constants$895.Ndr64AsyncServerCall64$MH,"Ndr64AsyncServerCall64");
    }
    public static void Ndr64AsyncServerCall64 ( Addressable pRpcMsg) {
        var mh$ = Ndr64AsyncServerCall64$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncServerCallAll$MH() {
        return RuntimeHelper.requireNonNull(constants$895.Ndr64AsyncServerCallAll$MH,"Ndr64AsyncServerCallAll");
    }
    public static void Ndr64AsyncServerCallAll ( Addressable pRpcMsg) {
        var mh$ = Ndr64AsyncServerCallAll$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$895.Ndr64AsyncStubCall$MH,"Ndr64AsyncStubCall");
    }
    public static int Ndr64AsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = Ndr64AsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64DcomAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$895.Ndr64DcomAsyncStubCall$MH,"Ndr64DcomAsyncStubCall");
    }
    public static int Ndr64DcomAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = Ndr64DcomAsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$895.NdrStubCall3$MH,"NdrStubCall3");
    }
    public static int NdrStubCall3 ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrStubCall3$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCallAll$MH() {
        return RuntimeHelper.requireNonNull(constants$895.NdrServerCallAll$MH,"NdrServerCallAll");
    }
    public static void NdrServerCallAll ( Addressable pRpcMsg) {
        var mh$ = NdrServerCallAll$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCallNdr64$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrServerCallNdr64$MH,"NdrServerCallNdr64");
    }
    public static void NdrServerCallNdr64 ( Addressable pRpcMsg) {
        var mh$ = NdrServerCallNdr64$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrServerCall3$MH,"NdrServerCall3");
    }
    public static void NdrServerCall3 ( Addressable pRpcMsg) {
        var mh$ = NdrServerCall3$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreClientMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrPartialIgnoreClientMarshall$MH,"NdrPartialIgnoreClientMarshall");
    }
    public static void NdrPartialIgnoreClientMarshall ( Addressable pStubMsg,  Addressable pMemory) {
        var mh$ = NdrPartialIgnoreClientMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreServerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrPartialIgnoreServerUnmarshall$MH,"NdrPartialIgnoreServerUnmarshall");
    }
    public static void NdrPartialIgnoreServerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory) {
        var mh$ = NdrPartialIgnoreServerUnmarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ppMemory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreClientBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrPartialIgnoreClientBufferSize$MH,"NdrPartialIgnoreClientBufferSize");
    }
    public static void NdrPartialIgnoreClientBufferSize ( Addressable pStubMsg,  Addressable pMemory) {
        var mh$ = NdrPartialIgnoreClientBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreServerInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrPartialIgnoreServerInitialize$MH,"NdrPartialIgnoreServerInitialize");
    }
    public static void NdrPartialIgnoreServerInitialize ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat) {
        var mh$ = NdrPartialIgnoreServerInitialize$MH();
        try {
            mh$.invokeExact(pStubMsg, ppMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcUserFree$MH() {
        return RuntimeHelper.requireNonNull(constants$897.RpcUserFree$MH,"RpcUserFree");
    }
    public static void RpcUserFree ( Addressable AsyncHandle,  Addressable pBuffer) {
        var mh$ = RpcUserFree$MH();
        try {
            mh$.invokeExact(AsyncHandle, pBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$LAYOUT() {
        return constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH() {
        return constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$LAYOUT() {
        return constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH() {
        return constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$897.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec"), x);
    }
    public static OfAddress LPOLESTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOLESTR = Constants$root.C_POINTER$LAYOUT;
    public static OfShort SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfDouble DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfInt SCODE = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PSCODE = Constants$root.C_POINTER$LAYOUT;
    public static int MEMCTX_TASK() {
        return (int)1L;
    }
    public static int MEMCTX_SHARED() {
        return (int)2L;
    }
    public static int MEMCTX_MACSYSTEM() {
        return (int)3L;
    }
    public static int MEMCTX_UNKNOWN() {
        return (int)-1L;
    }
    public static int MEMCTX_SAME() {
        return (int)-2L;
    }
    public static int CLSCTX_INPROC_SERVER() {
        return (int)1L;
    }
    public static int CLSCTX_INPROC_HANDLER() {
        return (int)2L;
    }
    public static int CLSCTX_LOCAL_SERVER() {
        return (int)4L;
    }
    public static int CLSCTX_INPROC_SERVER16() {
        return (int)8L;
    }
    public static int CLSCTX_REMOTE_SERVER() {
        return (int)16L;
    }
    public static int CLSCTX_INPROC_HANDLER16() {
        return (int)32L;
    }
    public static int CLSCTX_RESERVED1() {
        return (int)64L;
    }
    public static int CLSCTX_RESERVED2() {
        return (int)128L;
    }
    public static int CLSCTX_RESERVED3() {
        return (int)256L;
    }
    public static int CLSCTX_RESERVED4() {
        return (int)512L;
    }
    public static int CLSCTX_NO_CODE_DOWNLOAD() {
        return (int)1024L;
    }
    public static int CLSCTX_RESERVED5() {
        return (int)2048L;
    }
    public static int CLSCTX_NO_CUSTOM_MARSHAL() {
        return (int)4096L;
    }
    public static int CLSCTX_ENABLE_CODE_DOWNLOAD() {
        return (int)8192L;
    }
    public static int CLSCTX_NO_FAILURE_LOG() {
        return (int)16384L;
    }
    public static int CLSCTX_DISABLE_AAA() {
        return (int)32768L;
    }
    public static int CLSCTX_ENABLE_AAA() {
        return (int)65536L;
    }
    public static int CLSCTX_FROM_DEFAULT_CONTEXT() {
        return (int)131072L;
    }
    public static int CLSCTX_ACTIVATE_X86_SERVER() {
        return (int)262144L;
    }
    public static int CLSCTX_ACTIVATE_32_BIT_SERVER() {
        return (int)262144L;
    }
    public static int CLSCTX_ACTIVATE_64_BIT_SERVER() {
        return (int)524288L;
    }
    public static int CLSCTX_ENABLE_CLOAKING() {
        return (int)1048576L;
    }
    public static int CLSCTX_APPCONTAINER() {
        return (int)4194304L;
    }
    public static int CLSCTX_ACTIVATE_AAA_AS_IU() {
        return (int)8388608L;
    }
    public static int CLSCTX_RESERVED6() {
        return (int)16777216L;
    }
    public static int CLSCTX_ACTIVATE_ARM32_SERVER() {
        return (int)33554432L;
    }
    public static int CLSCTX_PS_DLL() {
        return (int)-2147483648L;
    }
    public static int MSHLFLAGS_NORMAL() {
        return (int)0L;
    }
    public static int MSHLFLAGS_TABLESTRONG() {
        return (int)1L;
    }
    public static int MSHLFLAGS_TABLEWEAK() {
        return (int)2L;
    }
    public static int MSHLFLAGS_NOPING() {
        return (int)4L;
    }
    public static int MSHLFLAGS_RESERVED1() {
        return (int)8L;
    }
    public static int MSHLFLAGS_RESERVED2() {
        return (int)16L;
    }
    public static int MSHLFLAGS_RESERVED3() {
        return (int)32L;
    }
    public static int MSHLFLAGS_RESERVED4() {
        return (int)64L;
    }
    public static int MSHCTX_LOCAL() {
        return (int)0L;
    }
    public static int MSHCTX_NOSHAREDMEM() {
        return (int)1L;
    }
    public static int MSHCTX_DIFFERENTMACHINE() {
        return (int)2L;
    }
    public static int MSHCTX_INPROC() {
        return (int)3L;
    }
    public static int MSHCTX_CROSSCTX() {
        return (int)4L;
    }
    public static int MSHCTX_RESERVED1() {
        return (int)5L;
    }
    public static OfAddress UP_BYTE_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_WORD_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_DWORD_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_FLAGGED_BYTE_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_FLAGGED_WORD_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static MemoryLayout IWinTypesBase_v0_1_c_ifspec$LAYOUT() {
        return constants$897.IWinTypesBase_v0_1_c_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypesBase_v0_1_c_ifspec$VH() {
        return constants$897.IWinTypesBase_v0_1_c_ifspec$VH;
    }
    public static MemorySegment IWinTypesBase_v0_1_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$897.IWinTypesBase_v0_1_c_ifspec$SEGMENT,"IWinTypesBase_v0_1_c_ifspec");
    }
    public static MemoryAddress IWinTypesBase_v0_1_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$897.IWinTypesBase_v0_1_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$897.IWinTypesBase_v0_1_c_ifspec$SEGMENT, "IWinTypesBase_v0_1_c_ifspec"));
    }
    public static void IWinTypesBase_v0_1_c_ifspec$set( MemoryAddress x) {
        constants$897.IWinTypesBase_v0_1_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$897.IWinTypesBase_v0_1_c_ifspec$SEGMENT, "IWinTypesBase_v0_1_c_ifspec"), x);
    }
    public static MemoryLayout IWinTypesBase_v0_1_s_ifspec$LAYOUT() {
        return constants$897.IWinTypesBase_v0_1_s_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypesBase_v0_1_s_ifspec$VH() {
        return constants$897.IWinTypesBase_v0_1_s_ifspec$VH;
    }
    public static MemorySegment IWinTypesBase_v0_1_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$897.IWinTypesBase_v0_1_s_ifspec$SEGMENT,"IWinTypesBase_v0_1_s_ifspec");
    }
    public static MemoryAddress IWinTypesBase_v0_1_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$897.IWinTypesBase_v0_1_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$897.IWinTypesBase_v0_1_s_ifspec$SEGMENT, "IWinTypesBase_v0_1_s_ifspec"));
    }
    public static void IWinTypesBase_v0_1_s_ifspec$set( MemoryAddress x) {
        constants$897.IWinTypesBase_v0_1_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$897.IWinTypesBase_v0_1_s_ifspec$SEGMENT, "IWinTypesBase_v0_1_s_ifspec"), x);
    }
    public static OfAddress LPBLOB = Constants$root.C_POINTER$LAYOUT;
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$LAYOUT() {
        return constants$897.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH() {
        return constants$897.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$897.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$897.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$897.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$897.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$897.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$LAYOUT() {
        return constants$898.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH() {
        return constants$898.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$898.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$898.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$LAYOUT() {
        return constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH() {
        return constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$LAYOUT() {
        return constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH() {
        return constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec"), x);
    }
    public static int DVASPECT_CONTENT() {
        return (int)1L;
    }
    public static int DVASPECT_THUMBNAIL() {
        return (int)2L;
    }
    public static int DVASPECT_ICON() {
        return (int)4L;
    }
    public static int DVASPECT_DOCPRINT() {
        return (int)8L;
    }
    public static int STGC_DEFAULT() {
        return (int)0L;
    }
    public static int STGC_OVERWRITE() {
        return (int)1L;
    }
    public static int STGC_ONLYIFCURRENT() {
        return (int)2L;
    }
    public static int STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE() {
        return (int)4L;
    }
    public static int STGC_CONSOLIDATE() {
        return (int)8L;
    }
    public static int STGMOVE_MOVE() {
        return (int)0L;
    }
    public static int STGMOVE_COPY() {
        return (int)1L;
    }
    public static int STGMOVE_SHALLOWCOPY() {
        return (int)2L;
    }
    public static int STATFLAG_DEFAULT() {
        return (int)0L;
    }
    public static int STATFLAG_NONAME() {
        return (int)1L;
    }
    public static int STATFLAG_NOOPEN() {
        return (int)2L;
    }
    public static OfAddress HCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireCLIPFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHGLOBAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHWND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHACCEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHICON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMONITOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHBITMAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHENHMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMETAFILEPICT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMETAFILEPICT = Constants$root.C_POINTER$LAYOUT;
    public static MemoryLayout IWinTypes_v0_1_c_ifspec$LAYOUT() {
        return constants$898.IWinTypes_v0_1_c_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypes_v0_1_c_ifspec$VH() {
        return constants$898.IWinTypes_v0_1_c_ifspec$VH;
    }
    public static MemorySegment IWinTypes_v0_1_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$898.IWinTypes_v0_1_c_ifspec$SEGMENT,"IWinTypes_v0_1_c_ifspec");
    }
    public static MemoryAddress IWinTypes_v0_1_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$898.IWinTypes_v0_1_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$898.IWinTypes_v0_1_c_ifspec$SEGMENT, "IWinTypes_v0_1_c_ifspec"));
    }
    public static void IWinTypes_v0_1_c_ifspec$set( MemoryAddress x) {
        constants$898.IWinTypes_v0_1_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$898.IWinTypes_v0_1_c_ifspec$SEGMENT, "IWinTypes_v0_1_c_ifspec"), x);
    }
    public static MemoryLayout IWinTypes_v0_1_s_ifspec$LAYOUT() {
        return constants$898.IWinTypes_v0_1_s_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypes_v0_1_s_ifspec$VH() {
        return constants$898.IWinTypes_v0_1_s_ifspec$VH;
    }
    public static MemorySegment IWinTypes_v0_1_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$898.IWinTypes_v0_1_s_ifspec$SEGMENT,"IWinTypes_v0_1_s_ifspec");
    }
    public static MemoryAddress IWinTypes_v0_1_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$898.IWinTypes_v0_1_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$898.IWinTypes_v0_1_s_ifspec$SEGMENT, "IWinTypes_v0_1_s_ifspec"));
    }
    public static void IWinTypes_v0_1_s_ifspec$set( MemoryAddress x) {
        constants$898.IWinTypes_v0_1_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$898.IWinTypes_v0_1_s_ifspec$SEGMENT, "IWinTypes_v0_1_s_ifspec"), x);
    }
    public static OfDouble DATE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress LPCY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDECIMAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireBSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress BSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfShort VARIANT_BOOL = Constants$root.C_SHORT$LAYOUT;
    public static OfAddress LPBSTRBLOB = Constants$root.C_POINTER$LAYOUT;
    public static int VT_EMPTY() {
        return (int)0L;
    }
    public static int VT_NULL() {
        return (int)1L;
    }
    public static int VT_I2() {
        return (int)2L;
    }
    public static int VT_I4() {
        return (int)3L;
    }
    public static int VT_R4() {
        return (int)4L;
    }
    public static int VT_R8() {
        return (int)5L;
    }
    public static int VT_CY() {
        return (int)6L;
    }
    public static int VT_DATE() {
        return (int)7L;
    }
    public static int VT_BSTR() {
        return (int)8L;
    }
    public static int VT_DISPATCH() {
        return (int)9L;
    }
    public static int VT_ERROR() {
        return (int)10L;
    }
    public static int VT_BOOL() {
        return (int)11L;
    }
    public static int VT_VARIANT() {
        return (int)12L;
    }
    public static int VT_UNKNOWN() {
        return (int)13L;
    }
    public static int VT_DECIMAL() {
        return (int)14L;
    }
    public static int VT_I1() {
        return (int)16L;
    }
    public static int VT_UI1() {
        return (int)17L;
    }
    public static int VT_UI2() {
        return (int)18L;
    }
    public static int VT_UI4() {
        return (int)19L;
    }
    public static int VT_I8() {
        return (int)20L;
    }
    public static int VT_UI8() {
        return (int)21L;
    }
    public static int VT_INT() {
        return (int)22L;
    }
    public static int VT_UINT() {
        return (int)23L;
    }
    public static int VT_VOID() {
        return (int)24L;
    }
    public static int VT_HRESULT() {
        return (int)25L;
    }
    public static int VT_PTR() {
        return (int)26L;
    }
    public static int VT_SAFEARRAY() {
        return (int)27L;
    }
    public static int VT_CARRAY() {
        return (int)28L;
    }
    public static int VT_USERDEFINED() {
        return (int)29L;
    }
    public static int VT_LPSTR() {
        return (int)30L;
    }
    public static int VT_LPWSTR() {
        return (int)31L;
    }
    public static int VT_RECORD() {
        return (int)36L;
    }
    public static int VT_INT_PTR() {
        return (int)37L;
    }
    public static int VT_UINT_PTR() {
        return (int)38L;
    }
    public static int VT_FILETIME() {
        return (int)64L;
    }
    public static int VT_BLOB() {
        return (int)65L;
    }
    public static int VT_STREAM() {
        return (int)66L;
    }
    public static int VT_STORAGE() {
        return (int)67L;
    }
    public static int VT_STREAMED_OBJECT() {
        return (int)68L;
    }
    public static int VT_STORED_OBJECT() {
        return (int)69L;
    }
    public static int VT_BLOB_OBJECT() {
        return (int)70L;
    }
    public static int VT_CF() {
        return (int)71L;
    }
    public static int VT_CLSID() {
        return (int)72L;
    }
    public static int VT_VERSIONED_STREAM() {
        return (int)73L;
    }
    public static int VT_BSTR_BLOB() {
        return (int)4095L;
    }
    public static int VT_VECTOR() {
        return (int)4096L;
    }
    public static int VT_ARRAY() {
        return (int)8192L;
    }
    public static int VT_BYREF() {
        return (int)16384L;
    }
    public static int VT_RESERVED() {
        return (int)32768L;
    }
    public static int VT_ILLEGAL() {
        return (int)65535L;
    }
    public static int VT_ILLEGALMASKED() {
        return (int)4095L;
    }
    public static int VT_TYPEMASK() {
        return (int)4095L;
    }
    public static int TYSPEC_CLSID() {
        return (int)0L;
    }
    public static int TYSPEC_FILEEXT() {
        return (int)1L;
    }
    public static int TYSPEC_MIMETYPE() {
        return (int)2L;
    }
    public static int TYSPEC_FILENAME() {
        return (int)3L;
    }
    public static int TYSPEC_PROGID() {
        return (int)4L;
    }
    public static int TYSPEC_PACKAGENAME() {
        return (int)5L;
    }
    public static int TYSPEC_OBJECTID() {
        return (int)6L;
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$LAYOUT() {
        return constants$898.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH() {
        return constants$898.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$898.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$898.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$898.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$LAYOUT() {
        return constants$899.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH() {
        return constants$899.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$899.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$899.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$899.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$899.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$899.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec"), x);
    }
    public static MemorySegment GUID_DEVINTERFACE_DISK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$899.GUID_DEVINTERFACE_DISK$SEGMENT,"GUID_DEVINTERFACE_DISK");
    }
    public static MemorySegment GUID_DEVINTERFACE_CDROM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$899.GUID_DEVINTERFACE_CDROM$SEGMENT,"GUID_DEVINTERFACE_CDROM");
    }
    public static MemorySegment GUID_DEVINTERFACE_PARTITION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$899.GUID_DEVINTERFACE_PARTITION$SEGMENT,"GUID_DEVINTERFACE_PARTITION");
    }
    public static MemorySegment GUID_DEVINTERFACE_TAPE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$899.GUID_DEVINTERFACE_TAPE$SEGMENT,"GUID_DEVINTERFACE_TAPE");
    }
    public static MemorySegment GUID_DEVINTERFACE_WRITEONCEDISK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$899.GUID_DEVINTERFACE_WRITEONCEDISK$SEGMENT,"GUID_DEVINTERFACE_WRITEONCEDISK");
    }
    public static MemorySegment GUID_DEVINTERFACE_VOLUME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$900.GUID_DEVINTERFACE_VOLUME$SEGMENT,"GUID_DEVINTERFACE_VOLUME");
    }
    public static MemorySegment GUID_DEVINTERFACE_MEDIUMCHANGER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$900.GUID_DEVINTERFACE_MEDIUMCHANGER$SEGMENT,"GUID_DEVINTERFACE_MEDIUMCHANGER");
    }
    public static MemorySegment GUID_DEVINTERFACE_FLOPPY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$900.GUID_DEVINTERFACE_FLOPPY$SEGMENT,"GUID_DEVINTERFACE_FLOPPY");
    }
    public static MemorySegment GUID_DEVINTERFACE_CDCHANGER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$900.GUID_DEVINTERFACE_CDCHANGER$SEGMENT,"GUID_DEVINTERFACE_CDCHANGER");
    }
    public static MemorySegment GUID_DEVINTERFACE_STORAGEPORT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$900.GUID_DEVINTERFACE_STORAGEPORT$SEGMENT,"GUID_DEVINTERFACE_STORAGEPORT");
    }
    public static MemorySegment GUID_DEVINTERFACE_VMLUN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$900.GUID_DEVINTERFACE_VMLUN$SEGMENT,"GUID_DEVINTERFACE_VMLUN");
    }
    public static MemorySegment GUID_DEVINTERFACE_SES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$901.GUID_DEVINTERFACE_SES$SEGMENT,"GUID_DEVINTERFACE_SES");
    }
    public static MemorySegment GUID_DEVINTERFACE_SERVICE_VOLUME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$901.GUID_DEVINTERFACE_SERVICE_VOLUME$SEGMENT,"GUID_DEVINTERFACE_SERVICE_VOLUME");
    }
    public static MemorySegment GUID_DEVINTERFACE_HIDDEN_VOLUME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$901.GUID_DEVINTERFACE_HIDDEN_VOLUME$SEGMENT,"GUID_DEVINTERFACE_HIDDEN_VOLUME");
    }
    public static MemorySegment GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$901.GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$SEGMENT,"GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB");
    }
    public static MemorySegment GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$901.GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$SEGMENT,"GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE");
    }
    public static MemorySegment GUID_SCM_PD_HEALTH_NOTIFICATION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$901.GUID_SCM_PD_HEALTH_NOTIFICATION$SEGMENT,"GUID_SCM_PD_HEALTH_NOTIFICATION");
    }
    public static MemorySegment GUID_SCM_PD_PASSTHROUGH_INVDIMM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$902.GUID_SCM_PD_PASSTHROUGH_INVDIMM$SEGMENT,"GUID_SCM_PD_PASSTHROUGH_INVDIMM");
    }
    public static MemorySegment GUID_DEVINTERFACE_COMPORT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$902.GUID_DEVINTERFACE_COMPORT$SEGMENT,"GUID_DEVINTERFACE_COMPORT");
    }
    public static MemorySegment GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$902.GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$SEGMENT,"GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR");
    }
    public static OfAddress PSTORAGE_HOTPLUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMBERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMBER_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_BUS_RESET_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_BREAK_RESERVATION_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPREVENT_MEDIA_REMOVAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLASS_MEDIA_CHANGE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static int DDS_4mm() {
        return (int)32L;
    }
    public static int MiniQic() {
        return (int)33L;
    }
    public static int Travan() {
        return (int)34L;
    }
    public static int QIC() {
        return (int)35L;
    }
    public static int MP_8mm() {
        return (int)36L;
    }
    public static int AME_8mm() {
        return (int)37L;
    }
    public static int AIT1_8mm() {
        return (int)38L;
    }
    public static int DLT() {
        return (int)39L;
    }
    public static int NCTP() {
        return (int)40L;
    }
    public static int IBM_3480() {
        return (int)41L;
    }
    public static int IBM_3490E() {
        return (int)42L;
    }
    public static int IBM_Magstar_3590() {
        return (int)43L;
    }
    public static int IBM_Magstar_MP() {
        return (int)44L;
    }
    public static int STK_DATA_D3() {
        return (int)45L;
    }
    public static int SONY_DTF() {
        return (int)46L;
    }
    public static int DV_6mm() {
        return (int)47L;
    }
    public static int DMI() {
        return (int)48L;
    }
    public static int SONY_D2() {
        return (int)49L;
    }
    public static int CLEANER_CARTRIDGE() {
        return (int)50L;
    }
    public static int CD_ROM() {
        return (int)51L;
    }
    public static int CD_R() {
        return (int)52L;
    }
    public static int CD_RW() {
        return (int)53L;
    }
    public static int DVD_ROM() {
        return (int)54L;
    }
    public static int DVD_R() {
        return (int)55L;
    }
    public static int DVD_RW() {
        return (int)56L;
    }
    public static int MO_3_RW() {
        return (int)57L;
    }
    public static int MO_5_WO() {
        return (int)58L;
    }
    public static int MO_5_RW() {
        return (int)59L;
    }
    public static int MO_5_LIMDOW() {
        return (int)60L;
    }
    public static int PC_5_WO() {
        return (int)61L;
    }
    public static int PC_5_RW() {
        return (int)62L;
    }
    public static int PD_5_RW() {
        return (int)63L;
    }
    public static int ABL_5_WO() {
        return (int)64L;
    }
    public static int PINNACLE_APEX_5_RW() {
        return (int)65L;
    }
    public static int SONY_12_WO() {
        return (int)66L;
    }
    public static int PHILIPS_12_WO() {
        return (int)67L;
    }
    public static int HITACHI_12_WO() {
        return (int)68L;
    }
    public static int CYGNET_12_WO() {
        return (int)69L;
    }
    public static int KODAK_14_WO() {
        return (int)70L;
    }
    public static int MO_NFR_525() {
        return (int)71L;
    }
    public static int NIKON_12_RW() {
        return (int)72L;
    }
    public static int IOMEGA_ZIP() {
        return (int)73L;
    }
    public static int IOMEGA_JAZ() {
        return (int)74L;
    }
    public static int SYQUEST_EZ135() {
        return (int)75L;
    }
    public static int SYQUEST_EZFLYER() {
        return (int)76L;
    }
    public static int SYQUEST_SYJET() {
        return (int)77L;
    }
    public static int AVATAR_F2() {
        return (int)78L;
    }
    public static int MP2_8mm() {
        return (int)79L;
    }
    public static int DST_S() {
        return (int)80L;
    }
    public static int DST_M() {
        return (int)81L;
    }
    public static int DST_L() {
        return (int)82L;
    }
    public static int VXATape_1() {
        return (int)83L;
    }
    public static int VXATape_2() {
        return (int)84L;
    }
    public static int STK_9840() {
        return (int)85L;
    }
    public static int LTO_Ultrium() {
        return (int)86L;
    }
    public static int LTO_Accelis() {
        return (int)87L;
    }
    public static int DVD_RAM() {
        return (int)88L;
    }
    public static int AIT_8mm() {
        return (int)89L;
    }
    public static int ADR_1() {
        return (int)90L;
    }
    public static int ADR_2() {
        return (int)91L;
    }
    public static int STK_9940() {
        return (int)92L;
    }
    public static int SAIT() {
        return (int)93L;
    }
    public static int VXATape() {
        return (int)94L;
    }
    public static OfAddress PSTORAGE_MEDIA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int BusTypeUnknown() {
        return (int)0L;
    }
    public static int BusTypeScsi() {
        return (int)1L;
    }
    public static int BusTypeAtapi() {
        return (int)2L;
    }
    public static int BusTypeAta() {
        return (int)3L;
    }
    public static int BusType1394() {
        return (int)4L;
    }
    public static int BusTypeSsa() {
        return (int)5L;
    }
    public static int BusTypeFibre() {
        return (int)6L;
    }
    public static int BusTypeUsb() {
        return (int)7L;
    }
    public static int BusTypeRAID() {
        return (int)8L;
    }
    public static int BusTypeiScsi() {
        return (int)9L;
    }
    public static int BusTypeSas() {
        return (int)10L;
    }
    public static int BusTypeSata() {
        return (int)11L;
    }
    public static int BusTypeSd() {
        return (int)12L;
    }
    public static int BusTypeMmc() {
        return (int)13L;
    }
    public static int BusTypeVirtual() {
        return (int)14L;
    }
    public static int BusTypeFileBackedVirtual() {
        return (int)15L;
    }
    public static int BusTypeSpaces() {
        return (int)16L;
    }
    public static int BusTypeNvme() {
        return (int)17L;
    }
    public static int BusTypeSCM() {
        return (int)18L;
    }
    public static int BusTypeUfs() {
        return (int)19L;
    }
    public static int BusTypeMax() {
        return (int)20L;
    }
    public static int BusTypeMaxReserved() {
        return (int)127L;
    }
    public static OfAddress PSTORAGE_BUS_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_MEDIA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_MEDIA_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PREDICT_FAILURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_FAILURE_PREDICTION_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static int PropertyStandardQuery() {
        return (int)0L;
    }
    public static int PropertyExistsQuery() {
        return (int)1L;
    }
    public static int PropertyMaskQuery() {
        return (int)2L;
    }
    public static int PropertyQueryMaxDefined() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_QUERY_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int PropertyStandardSet() {
        return (int)0L;
    }
    public static int PropertyExistsSet() {
        return (int)1L;
    }
    public static int PropertySetMaxDefined() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_SET_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDeviceProperty() {
        return (int)0L;
    }
    public static int StorageAdapterProperty() {
        return (int)1L;
    }
    public static int StorageDeviceIdProperty() {
        return (int)2L;
    }
    public static int StorageDeviceUniqueIdProperty() {
        return (int)3L;
    }
    public static int StorageDeviceWriteCacheProperty() {
        return (int)4L;
    }
    public static int StorageMiniportProperty() {
        return (int)5L;
    }
    public static int StorageAccessAlignmentProperty() {
        return (int)6L;
    }
    public static int StorageDeviceSeekPenaltyProperty() {
        return (int)7L;
    }
    public static int StorageDeviceTrimProperty() {
        return (int)8L;
    }
    public static int StorageDeviceWriteAggregationProperty() {
        return (int)9L;
    }
    public static int StorageDeviceDeviceTelemetryProperty() {
        return (int)10L;
    }
    public static int StorageDeviceLBProvisioningProperty() {
        return (int)11L;
    }
    public static int StorageDevicePowerProperty() {
        return (int)12L;
    }
    public static int StorageDeviceCopyOffloadProperty() {
        return (int)13L;
    }
    public static int StorageDeviceResiliencyProperty() {
        return (int)14L;
    }
    public static int StorageDeviceMediumProductType() {
        return (int)15L;
    }
    public static int StorageAdapterRpmbProperty() {
        return (int)16L;
    }
    public static int StorageAdapterCryptoProperty() {
        return (int)17L;
    }
    public static int StorageDeviceIoCapabilityProperty() {
        return (int)48L;
    }
    public static int StorageAdapterProtocolSpecificProperty() {
        return (int)49L;
    }
    public static int StorageDeviceProtocolSpecificProperty() {
        return (int)50L;
    }
    public static int StorageAdapterTemperatureProperty() {
        return (int)51L;
    }
    public static int StorageDeviceTemperatureProperty() {
        return (int)52L;
    }
    public static int StorageAdapterPhysicalTopologyProperty() {
        return (int)53L;
    }
    public static int StorageDevicePhysicalTopologyProperty() {
        return (int)54L;
    }
    public static int StorageDeviceAttributesProperty() {
        return (int)55L;
    }
    public static int StorageDeviceManagementStatus() {
        return (int)56L;
    }
    public static int StorageAdapterSerialNumberProperty() {
        return (int)57L;
    }
    public static int StorageDeviceLocationProperty() {
        return (int)58L;
    }
    public static int StorageDeviceNumaProperty() {
        return (int)59L;
    }
    public static int StorageDeviceZonedDeviceProperty() {
        return (int)60L;
    }
    public static int StorageDeviceUnsafeShutdownCount() {
        return (int)61L;
    }
    public static int StorageDeviceEnduranceProperty() {
        return (int)62L;
    }
    public static OfAddress PSTORAGE_PROPERTY_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROPERTY_QUERY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROPERTY_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DESCRIPTOR_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ADAPTER_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StoragePortCodeSetReserved() {
        return (int)0L;
    }
    public static int StoragePortCodeSetStorport() {
        return (int)1L;
    }
    public static int StoragePortCodeSetSCSIport() {
        return (int)2L;
    }
    public static int StoragePortCodeSetSpaceport() {
        return (int)3L;
    }
    public static int StoragePortCodeSetATAport() {
        return (int)4L;
    }
    public static int StoragePortCodeSetUSBport() {
        return (int)5L;
    }
    public static int StoragePortCodeSetSBP2port() {
        return (int)6L;
    }
    public static int StoragePortCodeSetSDport() {
        return (int)7L;
    }
    public static OfAddress PSTORAGE_PORT_CODE_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_MINIPORT_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdCodeSetReserved() {
        return (int)0L;
    }
    public static int StorageIdCodeSetBinary() {
        return (int)1L;
    }
    public static int StorageIdCodeSetAscii() {
        return (int)2L;
    }
    public static int StorageIdCodeSetUtf8() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_IDENTIFIER_CODE_SET = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdTypeVendorSpecific() {
        return (int)0L;
    }
    public static int StorageIdTypeVendorId() {
        return (int)1L;
    }
    public static int StorageIdTypeEUI64() {
        return (int)2L;
    }
    public static int StorageIdTypeFCPHName() {
        return (int)3L;
    }
    public static int StorageIdTypePortRelative() {
        return (int)4L;
    }
    public static int StorageIdTypeTargetPortGroup() {
        return (int)5L;
    }
    public static int StorageIdTypeLogicalUnitGroup() {
        return (int)6L;
    }
    public static int StorageIdTypeMD5LogicalUnitIdentifier() {
        return (int)7L;
    }
    public static int StorageIdTypeScsiNameString() {
        return (int)8L;
    }
    public static OfAddress PSTORAGE_IDENTIFIER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdNAAFormatIEEEExtended() {
        return (int)2L;
    }
    public static int StorageIdNAAFormatIEEERegistered() {
        return (int)3L;
    }
    public static int StorageIdNAAFormatIEEEERegisteredExtended() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_ID_NAA_FORMAT = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdAssocDevice() {
        return (int)0L;
    }
    public static int StorageIdAssocPort() {
        return (int)1L;
    }
    public static int StorageIdAssocTarget() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_ASSOCIATION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_IDENTIFIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_ID_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_SEEK_PENALTY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_WRITE_AGGREGATION_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_TRIM_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_LB_PROVISIONING_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_LB_PROVISIONING_MAP_RESOURCES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_POWER_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_COPY_OFFLOAD_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageRpmbFrameTypeUnknown() {
        return (int)0L;
    }
    public static int StorageRpmbFrameTypeStandard() {
        return (int)1L;
    }
    public static int StorageRpmbFrameTypeMax() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_RPMB_FRAME_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_RPMB_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageCryptoAlgorithmUnknown() {
        return (int)0L;
    }
    public static int StorageCryptoAlgorithmXTSAES() {
        return (int)1L;
    }
    public static int StorageCryptoAlgorithmBitlockerAESCBC() {
        return (int)2L;
    }
    public static int StorageCryptoAlgorithmAESECB() {
        return (int)3L;
    }
    public static int StorageCryptoAlgorithmESSIVAESCBC() {
        return (int)4L;
    }
    public static int StorageCryptoAlgorithmMax() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_CRYPTO_ALGORITHM_ID = Constants$root.C_POINTER$LAYOUT;
    public static int StorageCryptoKeySizeUnknown() {
        return (int)0L;
    }
    public static int StorageCryptoKeySize128Bits() {
        return (int)1L;
    }
}


