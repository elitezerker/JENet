// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$43 {

    static final FunctionDescriptor _abnormal_termination$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT);
    static final MethodHandle _abnormal_termination$MH = RuntimeHelper.downcallHandle(
        "_abnormal_termination",
        constants$43._abnormal_termination$FUNC
    );
    static final FunctionDescriptor __pctype_func$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle __pctype_func$MH = RuntimeHelper.downcallHandle(
        "__pctype_func",
        constants$43.__pctype_func$FUNC
    );
    static final FunctionDescriptor __pwctype_func$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle __pwctype_func$MH = RuntimeHelper.downcallHandle(
        "__pwctype_func",
        constants$43.__pwctype_func$FUNC
    );
    static final FunctionDescriptor iswalnum$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle iswalnum$MH = RuntimeHelper.downcallHandle(
        "iswalnum",
        constants$43.iswalnum$FUNC
    );
    static final FunctionDescriptor iswalpha$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle iswalpha$MH = RuntimeHelper.downcallHandle(
        "iswalpha",
        constants$43.iswalpha$FUNC
    );
    static final FunctionDescriptor iswascii$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle iswascii$MH = RuntimeHelper.downcallHandle(
        "iswascii",
        constants$43.iswascii$FUNC
    );
}


