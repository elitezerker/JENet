// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetPacket {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("referenceCount"),
        Constants$root.C_LONG$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("dataLength"),
        Constants$root.C_POINTER$LAYOUT.withName("freeCallback"),
        Constants$root.C_POINTER$LAYOUT.withName("userData")
    ).withName("_ENetPacket");
    public static MemoryLayout $LAYOUT() {
        return _ENetPacket.$struct$LAYOUT;
    }
    static final VarHandle referenceCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("referenceCount"));
    public static VarHandle referenceCount$VH() {
        return _ENetPacket.referenceCount$VH;
    }
    public static long referenceCount$get(MemorySegment seg) {
        return (long)_ENetPacket.referenceCount$VH.get(seg);
    }
    public static void referenceCount$set( MemorySegment seg, long x) {
        _ENetPacket.referenceCount$VH.set(seg, x);
    }
    public static long referenceCount$get(MemorySegment seg, long index) {
        return (long)_ENetPacket.referenceCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void referenceCount$set(MemorySegment seg, long index, long x) {
        _ENetPacket.referenceCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return _ENetPacket.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)_ENetPacket.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        _ENetPacket.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)_ENetPacket.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        _ENetPacket.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return _ENetPacket.data$VH;
    }
    public static MemoryAddress data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetPacket.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, MemoryAddress x) {
        _ENetPacket.data$VH.set(seg, x);
    }
    public static MemoryAddress data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetPacket.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetPacket.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dataLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dataLength"));
    public static VarHandle dataLength$VH() {
        return _ENetPacket.dataLength$VH;
    }
    public static long dataLength$get(MemorySegment seg) {
        return (long)_ENetPacket.dataLength$VH.get(seg);
    }
    public static void dataLength$set( MemorySegment seg, long x) {
        _ENetPacket.dataLength$VH.set(seg, x);
    }
    public static long dataLength$get(MemorySegment seg, long index) {
        return (long)_ENetPacket.dataLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dataLength$set(MemorySegment seg, long index, long x) {
        _ENetPacket.dataLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle freeCallback$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("freeCallback"));
    public static VarHandle freeCallback$VH() {
        return _ENetPacket.freeCallback$VH;
    }
    public static MemoryAddress freeCallback$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetPacket.freeCallback$VH.get(seg);
    }
    public static void freeCallback$set( MemorySegment seg, MemoryAddress x) {
        _ENetPacket.freeCallback$VH.set(seg, x);
    }
    public static MemoryAddress freeCallback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetPacket.freeCallback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void freeCallback$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetPacket.freeCallback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ENetPacketFreeCallback freeCallback (MemorySegment segment, MemorySession session) {
        return ENetPacketFreeCallback.ofAddress(freeCallback$get(segment), session);
    }
    static final VarHandle userData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("userData"));
    public static VarHandle userData$VH() {
        return _ENetPacket.userData$VH;
    }
    public static MemoryAddress userData$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetPacket.userData$VH.get(seg);
    }
    public static void userData$set( MemorySegment seg, MemoryAddress x) {
        _ENetPacket.userData$VH.set(seg, x);
    }
    public static MemoryAddress userData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetPacket.userData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void userData$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetPacket.userData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


