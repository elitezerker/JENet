// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$2 {

    static final FunctionDescriptor _free_base$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle _free_base$MH = RuntimeHelper.downcallHandle(
        "_free_base",
        constants$2._free_base$FUNC
    );
    static final FunctionDescriptor free$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle free$MH = RuntimeHelper.downcallHandle(
        "free",
        constants$2.free$FUNC
    );
    static final FunctionDescriptor _malloc_base$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle _malloc_base$MH = RuntimeHelper.downcallHandle(
        "_malloc_base",
        constants$2._malloc_base$FUNC
    );
    static final FunctionDescriptor malloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle malloc$MH = RuntimeHelper.downcallHandle(
        "malloc",
        constants$2.malloc$FUNC
    );
    static final FunctionDescriptor _msize_base$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle _msize_base$MH = RuntimeHelper.downcallHandle(
        "_msize_base",
        constants$2._msize_base$FUNC
    );
    static final FunctionDescriptor _msize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle _msize$MH = RuntimeHelper.downcallHandle(
        "_msize",
        constants$2._msize$FUNC
    );
}


