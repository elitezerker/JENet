// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetProtocolCommandHeader {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("command"),
        Constants$root.C_CHAR$LAYOUT.withName("channelID"),
        Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
    ).withName("_ENetProtocolCommandHeader");
    public static MemoryLayout $LAYOUT() {
        return _ENetProtocolCommandHeader.$struct$LAYOUT;
    }
    static final VarHandle command$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("command"));
    public static VarHandle command$VH() {
        return _ENetProtocolCommandHeader.command$VH;
    }
    public static byte command$get(MemorySegment seg) {
        return (byte)_ENetProtocolCommandHeader.command$VH.get(seg);
    }
    public static void command$set( MemorySegment seg, byte x) {
        _ENetProtocolCommandHeader.command$VH.set(seg, x);
    }
    public static byte command$get(MemorySegment seg, long index) {
        return (byte)_ENetProtocolCommandHeader.command$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void command$set(MemorySegment seg, long index, byte x) {
        _ENetProtocolCommandHeader.command$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle channelID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("channelID"));
    public static VarHandle channelID$VH() {
        return _ENetProtocolCommandHeader.channelID$VH;
    }
    public static byte channelID$get(MemorySegment seg) {
        return (byte)_ENetProtocolCommandHeader.channelID$VH.get(seg);
    }
    public static void channelID$set( MemorySegment seg, byte x) {
        _ENetProtocolCommandHeader.channelID$VH.set(seg, x);
    }
    public static byte channelID$get(MemorySegment seg, long index) {
        return (byte)_ENetProtocolCommandHeader.channelID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void channelID$set(MemorySegment seg, long index, byte x) {
        _ENetProtocolCommandHeader.channelID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle reliableSequenceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reliableSequenceNumber"));
    public static VarHandle reliableSequenceNumber$VH() {
        return _ENetProtocolCommandHeader.reliableSequenceNumber$VH;
    }
    public static short reliableSequenceNumber$get(MemorySegment seg) {
        return (short)_ENetProtocolCommandHeader.reliableSequenceNumber$VH.get(seg);
    }
    public static void reliableSequenceNumber$set( MemorySegment seg, short x) {
        _ENetProtocolCommandHeader.reliableSequenceNumber$VH.set(seg, x);
    }
    public static short reliableSequenceNumber$get(MemorySegment seg, long index) {
        return (short)_ENetProtocolCommandHeader.reliableSequenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reliableSequenceNumber$set(MemorySegment seg, long index, short x) {
        _ENetProtocolCommandHeader.reliableSequenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


