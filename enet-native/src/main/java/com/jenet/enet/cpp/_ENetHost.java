// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetHost {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("socket"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("host"),
            Constants$root.C_SHORT$LAYOUT.withName("port"),
            MemoryLayout.paddingLayout(16)
        ).withName("address"),
        Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
        Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth"),
        Constants$root.C_LONG$LAYOUT.withName("bandwidthThrottleEpoch"),
        Constants$root.C_LONG$LAYOUT.withName("mtu"),
        Constants$root.C_LONG$LAYOUT.withName("randomSeed"),
        Constants$root.C_LONG$LAYOUT.withName("recalculateBandwidthLimits"),
        Constants$root.C_POINTER$LAYOUT.withName("peers"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("peerCount"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("channelLimit"),
        Constants$root.C_LONG$LAYOUT.withName("serviceTime"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("next"),
                Constants$root.C_POINTER$LAYOUT.withName("previous")
            ).withName("sentinel")
        ).withName("dispatchQueue"),
        Constants$root.C_LONG$LAYOUT.withName("continueSending"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("packetSize"),
        Constants$root.C_SHORT$LAYOUT.withName("headerFlags"),
        MemoryLayout.sequenceLayout(32, MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("command"),
                Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
            ).withName("header"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("receivedReliableSequenceNumber"),
                Constants$root.C_SHORT$LAYOUT.withName("receivedSentTime")
            ).withName("acknowledge"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("outgoingPeerID"),
                Constants$root.C_CHAR$LAYOUT.withName("incomingSessionID"),
                Constants$root.C_CHAR$LAYOUT.withName("outgoingSessionID"),
                Constants$root.C_LONG$LAYOUT.withName("mtu"),
                Constants$root.C_LONG$LAYOUT.withName("windowSize"),
                Constants$root.C_LONG$LAYOUT.withName("channelCount"),
                Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration"),
                Constants$root.C_LONG$LAYOUT.withName("connectID"),
                Constants$root.C_LONG$LAYOUT.withName("data")
            ).withName("connect"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("outgoingPeerID"),
                Constants$root.C_CHAR$LAYOUT.withName("incomingSessionID"),
                Constants$root.C_CHAR$LAYOUT.withName("outgoingSessionID"),
                Constants$root.C_LONG$LAYOUT.withName("mtu"),
                Constants$root.C_LONG$LAYOUT.withName("windowSize"),
                Constants$root.C_LONG$LAYOUT.withName("channelCount"),
                Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration"),
                Constants$root.C_LONG$LAYOUT.withName("connectID")
            ).withName("verifyConnect"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_LONG$LAYOUT.withName("data")
            ).withName("disconnect"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header")
            ).withName("ping"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength")
            ).withName("sendReliable"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("unreliableSequenceNumber"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength")
            ).withName("sendUnreliable"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("unsequencedGroup"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength")
            ).withName("sendUnsequenced"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_SHORT$LAYOUT.withName("startSequenceNumber"),
                Constants$root.C_SHORT$LAYOUT.withName("dataLength"),
                Constants$root.C_LONG$LAYOUT.withName("fragmentCount"),
                Constants$root.C_LONG$LAYOUT.withName("fragmentNumber"),
                Constants$root.C_LONG$LAYOUT.withName("totalLength"),
                Constants$root.C_LONG$LAYOUT.withName("fragmentOffset")
            ).withName("sendFragment"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
                Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth")
            ).withName("bandwidthLimit"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("command"),
                    Constants$root.C_CHAR$LAYOUT.withName("channelID"),
                    Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
                ).withName("header"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
                Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration")
            ).withName("throttleConfigure")
        ).withName("_ENetProtocol")).withName("commands"),
        MemoryLayout.paddingLayout(48),
        Constants$root.C_LONG_LONG$LAYOUT.withName("commandCount"),
        MemoryLayout.sequenceLayout(65, MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("dataLength"),
            Constants$root.C_POINTER$LAYOUT.withName("data")
        )).withName("buffers"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("bufferCount"),
        Constants$root.C_POINTER$LAYOUT.withName("checksum"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("context"),
            Constants$root.C_POINTER$LAYOUT.withName("compress"),
            Constants$root.C_POINTER$LAYOUT.withName("decompress"),
            Constants$root.C_POINTER$LAYOUT.withName("destroy")
        ).withName("compressor"),
        MemoryLayout.sequenceLayout(2, MemoryLayout.sequenceLayout(4096, Constants$root.C_CHAR$LAYOUT)).withName("packetData"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("host"),
            Constants$root.C_SHORT$LAYOUT.withName("port"),
            MemoryLayout.paddingLayout(16)
        ).withName("receivedAddress"),
        Constants$root.C_POINTER$LAYOUT.withName("receivedData"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("receivedDataLength"),
        Constants$root.C_LONG$LAYOUT.withName("totalSentData"),
        Constants$root.C_LONG$LAYOUT.withName("totalSentPackets"),
        Constants$root.C_LONG$LAYOUT.withName("totalReceivedData"),
        Constants$root.C_LONG$LAYOUT.withName("totalReceivedPackets"),
        Constants$root.C_POINTER$LAYOUT.withName("intercept"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("connectedPeers"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("bandwidthLimitedPeers"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("duplicatePeers"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("maximumPacketSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("maximumWaitingData"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("usingNewPacket")
    ).withName("_ENetHost");
    public static MemoryLayout $LAYOUT() {
        return _ENetHost.$struct$LAYOUT;
    }
    static final VarHandle socket$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("socket"));
    public static VarHandle socket$VH() {
        return _ENetHost.socket$VH;
    }
    public static long socket$get(MemorySegment seg) {
        return (long)_ENetHost.socket$VH.get(seg);
    }
    public static void socket$set( MemorySegment seg, long x) {
        _ENetHost.socket$VH.set(seg, x);
    }
    public static long socket$get(MemorySegment seg, long index) {
        return (long)_ENetHost.socket$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void socket$set(MemorySegment seg, long index, long x) {
        _ENetHost.socket$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment address$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    static final VarHandle incomingBandwidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("incomingBandwidth"));
    public static VarHandle incomingBandwidth$VH() {
        return _ENetHost.incomingBandwidth$VH;
    }
    public static int incomingBandwidth$get(MemorySegment seg) {
        return (int)_ENetHost.incomingBandwidth$VH.get(seg);
    }
    public static void incomingBandwidth$set( MemorySegment seg, int x) {
        _ENetHost.incomingBandwidth$VH.set(seg, x);
    }
    public static int incomingBandwidth$get(MemorySegment seg, long index) {
        return (int)_ENetHost.incomingBandwidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void incomingBandwidth$set(MemorySegment seg, long index, int x) {
        _ENetHost.incomingBandwidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle outgoingBandwidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("outgoingBandwidth"));
    public static VarHandle outgoingBandwidth$VH() {
        return _ENetHost.outgoingBandwidth$VH;
    }
    public static int outgoingBandwidth$get(MemorySegment seg) {
        return (int)_ENetHost.outgoingBandwidth$VH.get(seg);
    }
    public static void outgoingBandwidth$set( MemorySegment seg, int x) {
        _ENetHost.outgoingBandwidth$VH.set(seg, x);
    }
    public static int outgoingBandwidth$get(MemorySegment seg, long index) {
        return (int)_ENetHost.outgoingBandwidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outgoingBandwidth$set(MemorySegment seg, long index, int x) {
        _ENetHost.outgoingBandwidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bandwidthThrottleEpoch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bandwidthThrottleEpoch"));
    public static VarHandle bandwidthThrottleEpoch$VH() {
        return _ENetHost.bandwidthThrottleEpoch$VH;
    }
    public static int bandwidthThrottleEpoch$get(MemorySegment seg) {
        return (int)_ENetHost.bandwidthThrottleEpoch$VH.get(seg);
    }
    public static void bandwidthThrottleEpoch$set( MemorySegment seg, int x) {
        _ENetHost.bandwidthThrottleEpoch$VH.set(seg, x);
    }
    public static int bandwidthThrottleEpoch$get(MemorySegment seg, long index) {
        return (int)_ENetHost.bandwidthThrottleEpoch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bandwidthThrottleEpoch$set(MemorySegment seg, long index, int x) {
        _ENetHost.bandwidthThrottleEpoch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mtu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mtu"));
    public static VarHandle mtu$VH() {
        return _ENetHost.mtu$VH;
    }
    public static int mtu$get(MemorySegment seg) {
        return (int)_ENetHost.mtu$VH.get(seg);
    }
    public static void mtu$set( MemorySegment seg, int x) {
        _ENetHost.mtu$VH.set(seg, x);
    }
    public static int mtu$get(MemorySegment seg, long index) {
        return (int)_ENetHost.mtu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mtu$set(MemorySegment seg, long index, int x) {
        _ENetHost.mtu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle randomSeed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("randomSeed"));
    public static VarHandle randomSeed$VH() {
        return _ENetHost.randomSeed$VH;
    }
    public static int randomSeed$get(MemorySegment seg) {
        return (int)_ENetHost.randomSeed$VH.get(seg);
    }
    public static void randomSeed$set( MemorySegment seg, int x) {
        _ENetHost.randomSeed$VH.set(seg, x);
    }
    public static int randomSeed$get(MemorySegment seg, long index) {
        return (int)_ENetHost.randomSeed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void randomSeed$set(MemorySegment seg, long index, int x) {
        _ENetHost.randomSeed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle recalculateBandwidthLimits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("recalculateBandwidthLimits"));
    public static VarHandle recalculateBandwidthLimits$VH() {
        return _ENetHost.recalculateBandwidthLimits$VH;
    }
    public static int recalculateBandwidthLimits$get(MemorySegment seg) {
        return (int)_ENetHost.recalculateBandwidthLimits$VH.get(seg);
    }
    public static void recalculateBandwidthLimits$set( MemorySegment seg, int x) {
        _ENetHost.recalculateBandwidthLimits$VH.set(seg, x);
    }
    public static int recalculateBandwidthLimits$get(MemorySegment seg, long index) {
        return (int)_ENetHost.recalculateBandwidthLimits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void recalculateBandwidthLimits$set(MemorySegment seg, long index, int x) {
        _ENetHost.recalculateBandwidthLimits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle peers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("peers"));
    public static VarHandle peers$VH() {
        return _ENetHost.peers$VH;
    }
    public static MemoryAddress peers$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetHost.peers$VH.get(seg);
    }
    public static void peers$set( MemorySegment seg, MemoryAddress x) {
        _ENetHost.peers$VH.set(seg, x);
    }
    public static MemoryAddress peers$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetHost.peers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void peers$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetHost.peers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle peerCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("peerCount"));
    public static VarHandle peerCount$VH() {
        return _ENetHost.peerCount$VH;
    }
    public static long peerCount$get(MemorySegment seg) {
        return (long)_ENetHost.peerCount$VH.get(seg);
    }
    public static void peerCount$set( MemorySegment seg, long x) {
        _ENetHost.peerCount$VH.set(seg, x);
    }
    public static long peerCount$get(MemorySegment seg, long index) {
        return (long)_ENetHost.peerCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void peerCount$set(MemorySegment seg, long index, long x) {
        _ENetHost.peerCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle channelLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("channelLimit"));
    public static VarHandle channelLimit$VH() {
        return _ENetHost.channelLimit$VH;
    }
    public static long channelLimit$get(MemorySegment seg) {
        return (long)_ENetHost.channelLimit$VH.get(seg);
    }
    public static void channelLimit$set( MemorySegment seg, long x) {
        _ENetHost.channelLimit$VH.set(seg, x);
    }
    public static long channelLimit$get(MemorySegment seg, long index) {
        return (long)_ENetHost.channelLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void channelLimit$set(MemorySegment seg, long index, long x) {
        _ENetHost.channelLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle serviceTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("serviceTime"));
    public static VarHandle serviceTime$VH() {
        return _ENetHost.serviceTime$VH;
    }
    public static int serviceTime$get(MemorySegment seg) {
        return (int)_ENetHost.serviceTime$VH.get(seg);
    }
    public static void serviceTime$set( MemorySegment seg, int x) {
        _ENetHost.serviceTime$VH.set(seg, x);
    }
    public static int serviceTime$get(MemorySegment seg, long index) {
        return (int)_ENetHost.serviceTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void serviceTime$set(MemorySegment seg, long index, int x) {
        _ENetHost.serviceTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dispatchQueue$slice(MemorySegment seg) {
        return seg.asSlice(72, 16);
    }
    static final VarHandle continueSending$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("continueSending"));
    public static VarHandle continueSending$VH() {
        return _ENetHost.continueSending$VH;
    }
    public static int continueSending$get(MemorySegment seg) {
        return (int)_ENetHost.continueSending$VH.get(seg);
    }
    public static void continueSending$set( MemorySegment seg, int x) {
        _ENetHost.continueSending$VH.set(seg, x);
    }
    public static int continueSending$get(MemorySegment seg, long index) {
        return (int)_ENetHost.continueSending$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void continueSending$set(MemorySegment seg, long index, int x) {
        _ENetHost.continueSending$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetSize"));
    public static VarHandle packetSize$VH() {
        return _ENetHost.packetSize$VH;
    }
    public static long packetSize$get(MemorySegment seg) {
        return (long)_ENetHost.packetSize$VH.get(seg);
    }
    public static void packetSize$set( MemorySegment seg, long x) {
        _ENetHost.packetSize$VH.set(seg, x);
    }
    public static long packetSize$get(MemorySegment seg, long index) {
        return (long)_ENetHost.packetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetSize$set(MemorySegment seg, long index, long x) {
        _ENetHost.packetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle headerFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("headerFlags"));
    public static VarHandle headerFlags$VH() {
        return _ENetHost.headerFlags$VH;
    }
    public static short headerFlags$get(MemorySegment seg) {
        return (short)_ENetHost.headerFlags$VH.get(seg);
    }
    public static void headerFlags$set( MemorySegment seg, short x) {
        _ENetHost.headerFlags$VH.set(seg, x);
    }
    public static short headerFlags$get(MemorySegment seg, long index) {
        return (short)_ENetHost.headerFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void headerFlags$set(MemorySegment seg, long index, short x) {
        _ENetHost.headerFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment commands$slice(MemorySegment seg) {
        return seg.asSlice(106, 1536);
    }
    static final VarHandle commandCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("commandCount"));
    public static VarHandle commandCount$VH() {
        return _ENetHost.commandCount$VH;
    }
    public static long commandCount$get(MemorySegment seg) {
        return (long)_ENetHost.commandCount$VH.get(seg);
    }
    public static void commandCount$set( MemorySegment seg, long x) {
        _ENetHost.commandCount$VH.set(seg, x);
    }
    public static long commandCount$get(MemorySegment seg, long index) {
        return (long)_ENetHost.commandCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void commandCount$set(MemorySegment seg, long index, long x) {
        _ENetHost.commandCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment buffers$slice(MemorySegment seg) {
        return seg.asSlice(1656, 1040);
    }
    static final VarHandle bufferCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bufferCount"));
    public static VarHandle bufferCount$VH() {
        return _ENetHost.bufferCount$VH;
    }
    public static long bufferCount$get(MemorySegment seg) {
        return (long)_ENetHost.bufferCount$VH.get(seg);
    }
    public static void bufferCount$set( MemorySegment seg, long x) {
        _ENetHost.bufferCount$VH.set(seg, x);
    }
    public static long bufferCount$get(MemorySegment seg, long index) {
        return (long)_ENetHost.bufferCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bufferCount$set(MemorySegment seg, long index, long x) {
        _ENetHost.bufferCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle checksum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("checksum"));
    public static VarHandle checksum$VH() {
        return _ENetHost.checksum$VH;
    }
    public static MemoryAddress checksum$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetHost.checksum$VH.get(seg);
    }
    public static void checksum$set( MemorySegment seg, MemoryAddress x) {
        _ENetHost.checksum$VH.set(seg, x);
    }
    public static MemoryAddress checksum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetHost.checksum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void checksum$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetHost.checksum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ENetChecksumCallback checksum (MemorySegment segment, MemorySession session) {
        return ENetChecksumCallback.ofAddress(checksum$get(segment), session);
    }
    public static MemorySegment compressor$slice(MemorySegment seg) {
        return seg.asSlice(2712, 32);
    }
    public static MemorySegment packetData$slice(MemorySegment seg) {
        return seg.asSlice(2744, 8192);
    }
    public static MemorySegment receivedAddress$slice(MemorySegment seg) {
        return seg.asSlice(10936, 8);
    }
    static final VarHandle receivedData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("receivedData"));
    public static VarHandle receivedData$VH() {
        return _ENetHost.receivedData$VH;
    }
    public static MemoryAddress receivedData$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetHost.receivedData$VH.get(seg);
    }
    public static void receivedData$set( MemorySegment seg, MemoryAddress x) {
        _ENetHost.receivedData$VH.set(seg, x);
    }
    public static MemoryAddress receivedData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetHost.receivedData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void receivedData$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetHost.receivedData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle receivedDataLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("receivedDataLength"));
    public static VarHandle receivedDataLength$VH() {
        return _ENetHost.receivedDataLength$VH;
    }
    public static long receivedDataLength$get(MemorySegment seg) {
        return (long)_ENetHost.receivedDataLength$VH.get(seg);
    }
    public static void receivedDataLength$set( MemorySegment seg, long x) {
        _ENetHost.receivedDataLength$VH.set(seg, x);
    }
    public static long receivedDataLength$get(MemorySegment seg, long index) {
        return (long)_ENetHost.receivedDataLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void receivedDataLength$set(MemorySegment seg, long index, long x) {
        _ENetHost.receivedDataLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle totalSentData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("totalSentData"));
    public static VarHandle totalSentData$VH() {
        return _ENetHost.totalSentData$VH;
    }
    public static int totalSentData$get(MemorySegment seg) {
        return (int)_ENetHost.totalSentData$VH.get(seg);
    }
    public static void totalSentData$set( MemorySegment seg, int x) {
        _ENetHost.totalSentData$VH.set(seg, x);
    }
    public static int totalSentData$get(MemorySegment seg, long index) {
        return (int)_ENetHost.totalSentData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void totalSentData$set(MemorySegment seg, long index, int x) {
        _ENetHost.totalSentData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle totalSentPackets$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("totalSentPackets"));
    public static VarHandle totalSentPackets$VH() {
        return _ENetHost.totalSentPackets$VH;
    }
    public static int totalSentPackets$get(MemorySegment seg) {
        return (int)_ENetHost.totalSentPackets$VH.get(seg);
    }
    public static void totalSentPackets$set( MemorySegment seg, int x) {
        _ENetHost.totalSentPackets$VH.set(seg, x);
    }
    public static int totalSentPackets$get(MemorySegment seg, long index) {
        return (int)_ENetHost.totalSentPackets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void totalSentPackets$set(MemorySegment seg, long index, int x) {
        _ENetHost.totalSentPackets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle totalReceivedData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("totalReceivedData"));
    public static VarHandle totalReceivedData$VH() {
        return _ENetHost.totalReceivedData$VH;
    }
    public static int totalReceivedData$get(MemorySegment seg) {
        return (int)_ENetHost.totalReceivedData$VH.get(seg);
    }
    public static void totalReceivedData$set( MemorySegment seg, int x) {
        _ENetHost.totalReceivedData$VH.set(seg, x);
    }
    public static int totalReceivedData$get(MemorySegment seg, long index) {
        return (int)_ENetHost.totalReceivedData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void totalReceivedData$set(MemorySegment seg, long index, int x) {
        _ENetHost.totalReceivedData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle totalReceivedPackets$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("totalReceivedPackets"));
    public static VarHandle totalReceivedPackets$VH() {
        return _ENetHost.totalReceivedPackets$VH;
    }
    public static int totalReceivedPackets$get(MemorySegment seg) {
        return (int)_ENetHost.totalReceivedPackets$VH.get(seg);
    }
    public static void totalReceivedPackets$set( MemorySegment seg, int x) {
        _ENetHost.totalReceivedPackets$VH.set(seg, x);
    }
    public static int totalReceivedPackets$get(MemorySegment seg, long index) {
        return (int)_ENetHost.totalReceivedPackets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void totalReceivedPackets$set(MemorySegment seg, long index, int x) {
        _ENetHost.totalReceivedPackets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle intercept$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("intercept"));
    public static VarHandle intercept$VH() {
        return _ENetHost.intercept$VH;
    }
    public static MemoryAddress intercept$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetHost.intercept$VH.get(seg);
    }
    public static void intercept$set( MemorySegment seg, MemoryAddress x) {
        _ENetHost.intercept$VH.set(seg, x);
    }
    public static MemoryAddress intercept$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetHost.intercept$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void intercept$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetHost.intercept$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ENetInterceptCallback intercept (MemorySegment segment, MemorySession session) {
        return ENetInterceptCallback.ofAddress(intercept$get(segment), session);
    }
    static final VarHandle connectedPeers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("connectedPeers"));
    public static VarHandle connectedPeers$VH() {
        return _ENetHost.connectedPeers$VH;
    }
    public static long connectedPeers$get(MemorySegment seg) {
        return (long)_ENetHost.connectedPeers$VH.get(seg);
    }
    public static void connectedPeers$set( MemorySegment seg, long x) {
        _ENetHost.connectedPeers$VH.set(seg, x);
    }
    public static long connectedPeers$get(MemorySegment seg, long index) {
        return (long)_ENetHost.connectedPeers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void connectedPeers$set(MemorySegment seg, long index, long x) {
        _ENetHost.connectedPeers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bandwidthLimitedPeers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bandwidthLimitedPeers"));
    public static VarHandle bandwidthLimitedPeers$VH() {
        return _ENetHost.bandwidthLimitedPeers$VH;
    }
    public static long bandwidthLimitedPeers$get(MemorySegment seg) {
        return (long)_ENetHost.bandwidthLimitedPeers$VH.get(seg);
    }
    public static void bandwidthLimitedPeers$set( MemorySegment seg, long x) {
        _ENetHost.bandwidthLimitedPeers$VH.set(seg, x);
    }
    public static long bandwidthLimitedPeers$get(MemorySegment seg, long index) {
        return (long)_ENetHost.bandwidthLimitedPeers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bandwidthLimitedPeers$set(MemorySegment seg, long index, long x) {
        _ENetHost.bandwidthLimitedPeers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle duplicatePeers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("duplicatePeers"));
    public static VarHandle duplicatePeers$VH() {
        return _ENetHost.duplicatePeers$VH;
    }
    public static long duplicatePeers$get(MemorySegment seg) {
        return (long)_ENetHost.duplicatePeers$VH.get(seg);
    }
    public static void duplicatePeers$set( MemorySegment seg, long x) {
        _ENetHost.duplicatePeers$VH.set(seg, x);
    }
    public static long duplicatePeers$get(MemorySegment seg, long index) {
        return (long)_ENetHost.duplicatePeers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void duplicatePeers$set(MemorySegment seg, long index, long x) {
        _ENetHost.duplicatePeers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle maximumPacketSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("maximumPacketSize"));
    public static VarHandle maximumPacketSize$VH() {
        return _ENetHost.maximumPacketSize$VH;
    }
    public static long maximumPacketSize$get(MemorySegment seg) {
        return (long)_ENetHost.maximumPacketSize$VH.get(seg);
    }
    public static void maximumPacketSize$set( MemorySegment seg, long x) {
        _ENetHost.maximumPacketSize$VH.set(seg, x);
    }
    public static long maximumPacketSize$get(MemorySegment seg, long index) {
        return (long)_ENetHost.maximumPacketSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void maximumPacketSize$set(MemorySegment seg, long index, long x) {
        _ENetHost.maximumPacketSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle maximumWaitingData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("maximumWaitingData"));
    public static VarHandle maximumWaitingData$VH() {
        return _ENetHost.maximumWaitingData$VH;
    }
    public static long maximumWaitingData$get(MemorySegment seg) {
        return (long)_ENetHost.maximumWaitingData$VH.get(seg);
    }
    public static void maximumWaitingData$set( MemorySegment seg, long x) {
        _ENetHost.maximumWaitingData$VH.set(seg, x);
    }
    public static long maximumWaitingData$get(MemorySegment seg, long index) {
        return (long)_ENetHost.maximumWaitingData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void maximumWaitingData$set(MemorySegment seg, long index, long x) {
        _ENetHost.maximumWaitingData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle usingNewPacket$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("usingNewPacket"));
    public static VarHandle usingNewPacket$VH() {
        return _ENetHost.usingNewPacket$VH;
    }
    public static long usingNewPacket$get(MemorySegment seg) {
        return (long)_ENetHost.usingNewPacket$VH.get(seg);
    }
    public static void usingNewPacket$set( MemorySegment seg, long x) {
        _ENetHost.usingNewPacket$VH.set(seg, x);
    }
    public static long usingNewPacket$get(MemorySegment seg, long index) {
        return (long)_ENetHost.usingNewPacket$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void usingNewPacket$set(MemorySegment seg, long index, long x) {
        _ENetHost.usingNewPacket$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


