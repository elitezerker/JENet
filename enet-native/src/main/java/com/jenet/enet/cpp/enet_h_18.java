// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class enet_h_18 extends enet_h_17 {

    public static MethodHandle IsValidLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$588.IsValidLocale$MH,"IsValidLocale");
    }
    public static int IsValidLocale ( int Locale,  int dwFlags) {
        var mh$ = IsValidLocale$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$588.GetGeoInfoA$MH,"GetGeoInfoA");
    }
    public static int GetGeoInfoA ( int Location,  int GeoType,  Addressable lpGeoData,  int cchData,  short LangId) {
        var mh$ = GetGeoInfoA$MH();
        try {
            return (int)mh$.invokeExact(Location, GeoType, lpGeoData, cchData, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$588.GetGeoInfoW$MH,"GetGeoInfoW");
    }
    public static int GetGeoInfoW ( int Location,  int GeoType,  Addressable lpGeoData,  int cchData,  short LangId) {
        var mh$ = GetGeoInfoW$MH();
        try {
            return (int)mh$.invokeExact(Location, GeoType, lpGeoData, cchData, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$589.GetGeoInfoEx$MH,"GetGeoInfoEx");
    }
    public static int GetGeoInfoEx ( Addressable location,  int geoType,  Addressable geoData,  int geoDataCount) {
        var mh$ = GetGeoInfoEx$MH();
        try {
            return (int)mh$.invokeExact(location, geoType, geoData, geoDataCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$589.EnumSystemGeoID$MH,"EnumSystemGeoID");
    }
    public static int EnumSystemGeoID ( int GeoClass,  int ParentGeoId,  Addressable lpGeoEnumProc) {
        var mh$ = EnumSystemGeoID$MH();
        try {
            return (int)mh$.invokeExact(GeoClass, ParentGeoId, lpGeoEnumProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemGeoNames$MH() {
        return RuntimeHelper.requireNonNull(constants$589.EnumSystemGeoNames$MH,"EnumSystemGeoNames");
    }
    public static int EnumSystemGeoNames ( int geoClass,  Addressable geoEnumProc,  long data) {
        var mh$ = EnumSystemGeoNames$MH();
        try {
            return (int)mh$.invokeExact(geoClass, geoEnumProc, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$589.GetUserGeoID$MH,"GetUserGeoID");
    }
    public static int GetUserGeoID ( int GeoClass) {
        var mh$ = GetUserGeoID$MH();
        try {
            return (int)mh$.invokeExact(GeoClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultGeoName$MH() {
        return RuntimeHelper.requireNonNull(constants$589.GetUserDefaultGeoName$MH,"GetUserDefaultGeoName");
    }
    public static int GetUserDefaultGeoName ( Addressable geoName,  int geoNameCount) {
        var mh$ = GetUserDefaultGeoName$MH();
        try {
            return (int)mh$.invokeExact(geoName, geoNameCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$589.SetUserGeoID$MH,"SetUserGeoID");
    }
    public static int SetUserGeoID ( int GeoId) {
        var mh$ = SetUserGeoID$MH();
        try {
            return (int)mh$.invokeExact(GeoId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserGeoName$MH() {
        return RuntimeHelper.requireNonNull(constants$590.SetUserGeoName$MH,"SetUserGeoName");
    }
    public static int SetUserGeoName ( Addressable geoName) {
        var mh$ = SetUserGeoName$MH();
        try {
            return (int)mh$.invokeExact(geoName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertDefaultLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$590.ConvertDefaultLocale$MH,"ConvertDefaultLocale");
    }
    public static int ConvertDefaultLocale ( int Locale) {
        var mh$ = ConvertDefaultLocale$MH();
        try {
            return (int)mh$.invokeExact(Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$590.GetSystemDefaultUILanguage$MH,"GetSystemDefaultUILanguage");
    }
    public static short GetSystemDefaultUILanguage () {
        var mh$ = GetSystemDefaultUILanguage$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$590.GetThreadLocale$MH,"GetThreadLocale");
    }
    public static int GetThreadLocale () {
        var mh$ = GetThreadLocale$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$590.SetThreadLocale$MH,"SetThreadLocale");
    }
    public static int SetThreadLocale ( int Locale) {
        var mh$ = SetThreadLocale$MH();
        try {
            return (int)mh$.invokeExact(Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$590.GetUserDefaultUILanguage$MH,"GetUserDefaultUILanguage");
    }
    public static short GetUserDefaultUILanguage () {
        var mh$ = GetUserDefaultUILanguage$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLangID$MH() {
        return RuntimeHelper.requireNonNull(constants$591.GetUserDefaultLangID$MH,"GetUserDefaultLangID");
    }
    public static short GetUserDefaultLangID () {
        var mh$ = GetUserDefaultLangID$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLangID$MH() {
        return RuntimeHelper.requireNonNull(constants$591.GetSystemDefaultLangID$MH,"GetSystemDefaultLangID");
    }
    public static short GetSystemDefaultLangID () {
        var mh$ = GetSystemDefaultLangID$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLCID$MH() {
        return RuntimeHelper.requireNonNull(constants$591.GetSystemDefaultLCID$MH,"GetSystemDefaultLCID");
    }
    public static int GetSystemDefaultLCID () {
        var mh$ = GetSystemDefaultLCID$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLCID$MH() {
        return RuntimeHelper.requireNonNull(constants$591.GetUserDefaultLCID$MH,"GetUserDefaultLCID");
    }
    public static int GetUserDefaultLCID () {
        var mh$ = GetUserDefaultLCID$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$591.SetThreadUILanguage$MH,"SetThreadUILanguage");
    }
    public static short SetThreadUILanguage ( short LangId) {
        var mh$ = SetThreadUILanguage$MH();
        try {
            return (short)mh$.invokeExact(LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$591.GetThreadUILanguage$MH,"GetThreadUILanguage");
    }
    public static short GetThreadUILanguage () {
        var mh$ = GetThreadUILanguage$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$592.GetProcessPreferredUILanguages$MH,"GetProcessPreferredUILanguages");
    }
    public static int GetProcessPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = GetProcessPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$592.SetProcessPreferredUILanguages$MH,"SetProcessPreferredUILanguages");
    }
    public static int SetProcessPreferredUILanguages ( int dwFlags,  Addressable pwszLanguagesBuffer,  Addressable pulNumLanguages) {
        var mh$ = SetProcessPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$592.GetUserPreferredUILanguages$MH,"GetUserPreferredUILanguages");
    }
    public static int GetUserPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = GetUserPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$592.GetSystemPreferredUILanguages$MH,"GetSystemPreferredUILanguages");
    }
    public static int GetSystemPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = GetSystemPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$592.GetThreadPreferredUILanguages$MH,"GetThreadPreferredUILanguages");
    }
    public static int GetThreadPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = GetThreadPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$592.SetThreadPreferredUILanguages$MH,"SetThreadPreferredUILanguages");
    }
    public static int SetThreadPreferredUILanguages ( int dwFlags,  Addressable pwszLanguagesBuffer,  Addressable pulNumLanguages) {
        var mh$ = SetThreadPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileMUIInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$593.GetFileMUIInfo$MH,"GetFileMUIInfo");
    }
    public static int GetFileMUIInfo ( int dwFlags,  Addressable pcwszFilePath,  Addressable pFileMUIInfo,  Addressable pcbFileMUIInfo) {
        var mh$ = GetFileMUIInfo$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pcwszFilePath, pFileMUIInfo, pcbFileMUIInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileMUIPath$MH() {
        return RuntimeHelper.requireNonNull(constants$593.GetFileMUIPath$MH,"GetFileMUIPath");
    }
    public static int GetFileMUIPath ( int dwFlags,  Addressable pcwszFilePath,  Addressable pwszLanguage,  Addressable pcchLanguage,  Addressable pwszFileMUIPath,  Addressable pcchFileMUIPath,  Addressable pululEnumerator) {
        var mh$ = GetFileMUIPath$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pcwszFilePath, pwszLanguage, pcchLanguage, pwszFileMUIPath, pcchFileMUIPath, pululEnumerator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUILanguageInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$593.GetUILanguageInfo$MH,"GetUILanguageInfo");
    }
    public static int GetUILanguageInfo ( int dwFlags,  Addressable pwmszLanguage,  Addressable pwszFallbackLanguages,  Addressable pcchFallbackLanguages,  Addressable pAttributes) {
        var mh$ = GetUILanguageInfo$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pwmszLanguage, pwszFallbackLanguages, pcchFallbackLanguages, pAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HSAVEDUILANGUAGES = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetThreadPreferredUILanguages2$MH() {
        return RuntimeHelper.requireNonNull(constants$593.SetThreadPreferredUILanguages2$MH,"SetThreadPreferredUILanguages2");
    }
    public static int SetThreadPreferredUILanguages2 ( int flags,  Addressable languages,  Addressable numLanguagesSet,  Addressable snapshot) {
        var mh$ = SetThreadPreferredUILanguages2$MH();
        try {
            return (int)mh$.invokeExact(flags, languages, numLanguagesSet, snapshot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RestoreThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$593.RestoreThreadPreferredUILanguages$MH,"RestoreThreadPreferredUILanguages");
    }
    public static void RestoreThreadPreferredUILanguages ( Addressable snapshot) {
        var mh$ = RestoreThreadPreferredUILanguages$MH();
        try {
            mh$.invokeExact(snapshot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyUILanguageChange$MH() {
        return RuntimeHelper.requireNonNull(constants$593.NotifyUILanguageChange$MH,"NotifyUILanguageChange");
    }
    public static int NotifyUILanguageChange ( int dwFlags,  Addressable pcwstrNewLanguage,  Addressable pcwstrPreviousLanguage,  int dwReserved,  Addressable pdwStatusRtrn) {
        var mh$ = NotifyUILanguageChange$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pcwstrNewLanguage, pcwstrPreviousLanguage, dwReserved, pdwStatusRtrn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeExA$MH() {
        return RuntimeHelper.requireNonNull(constants$594.GetStringTypeExA$MH,"GetStringTypeExA");
    }
    public static int GetStringTypeExA ( int Locale,  int dwInfoType,  Addressable lpSrcStr,  int cchSrc,  Addressable lpCharType) {
        var mh$ = GetStringTypeExA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$594.GetStringTypeA$MH,"GetStringTypeA");
    }
    public static int GetStringTypeA ( int Locale,  int dwInfoType,  Addressable lpSrcStr,  int cchSrc,  Addressable lpCharType) {
        var mh$ = GetStringTypeA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FoldStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$594.FoldStringA$MH,"FoldStringA");
    }
    public static int FoldStringA ( int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest) {
        var mh$ = FoldStringA$MH();
        try {
            return (int)mh$.invokeExact(dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesA$MH() {
        return RuntimeHelper.requireNonNull(constants$594.EnumSystemLocalesA$MH,"EnumSystemLocalesA");
    }
    public static int EnumSystemLocalesA ( Addressable lpLocaleEnumProc,  int dwFlags) {
        var mh$ = EnumSystemLocalesA$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesW$MH() {
        return RuntimeHelper.requireNonNull(constants$594.EnumSystemLocalesW$MH,"EnumSystemLocalesW");
    }
    public static int EnumSystemLocalesW ( Addressable lpLocaleEnumProc,  int dwFlags) {
        var mh$ = EnumSystemLocalesW$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLanguageGroupsA$MH() {
        return RuntimeHelper.requireNonNull(constants$594.EnumSystemLanguageGroupsA$MH,"EnumSystemLanguageGroupsA");
    }
    public static int EnumSystemLanguageGroupsA ( Addressable lpLanguageGroupEnumProc,  int dwFlags,  long lParam) {
        var mh$ = EnumSystemLanguageGroupsA$MH();
        try {
            return (int)mh$.invokeExact(lpLanguageGroupEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLanguageGroupsW$MH() {
        return RuntimeHelper.requireNonNull(constants$595.EnumSystemLanguageGroupsW$MH,"EnumSystemLanguageGroupsW");
    }
    public static int EnumSystemLanguageGroupsW ( Addressable lpLanguageGroupEnumProc,  int dwFlags,  long lParam) {
        var mh$ = EnumSystemLanguageGroupsW$MH();
        try {
            return (int)mh$.invokeExact(lpLanguageGroupEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumLanguageGroupLocalesA$MH() {
        return RuntimeHelper.requireNonNull(constants$595.EnumLanguageGroupLocalesA$MH,"EnumLanguageGroupLocalesA");
    }
    public static int EnumLanguageGroupLocalesA ( Addressable lpLangGroupLocaleEnumProc,  int LanguageGroup,  int dwFlags,  long lParam) {
        var mh$ = EnumLanguageGroupLocalesA$MH();
        try {
            return (int)mh$.invokeExact(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumLanguageGroupLocalesW$MH() {
        return RuntimeHelper.requireNonNull(constants$595.EnumLanguageGroupLocalesW$MH,"EnumLanguageGroupLocalesW");
    }
    public static int EnumLanguageGroupLocalesW ( Addressable lpLangGroupLocaleEnumProc,  int LanguageGroup,  int dwFlags,  long lParam) {
        var mh$ = EnumLanguageGroupLocalesW$MH();
        try {
            return (int)mh$.invokeExact(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumUILanguagesA$MH() {
        return RuntimeHelper.requireNonNull(constants$595.EnumUILanguagesA$MH,"EnumUILanguagesA");
    }
    public static int EnumUILanguagesA ( Addressable lpUILanguageEnumProc,  int dwFlags,  long lParam) {
        var mh$ = EnumUILanguagesA$MH();
        try {
            return (int)mh$.invokeExact(lpUILanguageEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumUILanguagesW$MH() {
        return RuntimeHelper.requireNonNull(constants$595.EnumUILanguagesW$MH,"EnumUILanguagesW");
    }
    public static int EnumUILanguagesW ( Addressable lpUILanguageEnumProc,  int dwFlags,  long lParam) {
        var mh$ = EnumUILanguagesW$MH();
        try {
            return (int)mh$.invokeExact(lpUILanguageEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemCodePagesA$MH() {
        return RuntimeHelper.requireNonNull(constants$595.EnumSystemCodePagesA$MH,"EnumSystemCodePagesA");
    }
    public static int EnumSystemCodePagesA ( Addressable lpCodePageEnumProc,  int dwFlags) {
        var mh$ = EnumSystemCodePagesA$MH();
        try {
            return (int)mh$.invokeExact(lpCodePageEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemCodePagesW$MH() {
        return RuntimeHelper.requireNonNull(constants$596.EnumSystemCodePagesW$MH,"EnumSystemCodePagesW");
    }
    public static int EnumSystemCodePagesW ( Addressable lpCodePageEnumProc,  int dwFlags) {
        var mh$ = EnumSystemCodePagesW$MH();
        try {
            return (int)mh$.invokeExact(lpCodePageEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToAscii$MH() {
        return RuntimeHelper.requireNonNull(constants$596.IdnToAscii$MH,"IdnToAscii");
    }
    public static int IdnToAscii ( int dwFlags,  Addressable lpUnicodeCharStr,  int cchUnicodeChar,  Addressable lpASCIICharStr,  int cchASCIIChar) {
        var mh$ = IdnToAscii$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpASCIICharStr, cchASCIIChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$596.IdnToUnicode$MH,"IdnToUnicode");
    }
    public static int IdnToUnicode ( int dwFlags,  Addressable lpASCIICharStr,  int cchASCIIChar,  Addressable lpUnicodeCharStr,  int cchUnicodeChar) {
        var mh$ = IdnToUnicode$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpASCIICharStr, cchASCIIChar, lpUnicodeCharStr, cchUnicodeChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToNameprepUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$596.IdnToNameprepUnicode$MH,"IdnToNameprepUnicode");
    }
    public static int IdnToNameprepUnicode ( int dwFlags,  Addressable lpUnicodeCharStr,  int cchUnicodeChar,  Addressable lpNameprepCharStr,  int cchNameprepChar) {
        var mh$ = IdnToNameprepUnicode$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpNameprepCharStr, cchNameprepChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NormalizeString$MH() {
        return RuntimeHelper.requireNonNull(constants$596.NormalizeString$MH,"NormalizeString");
    }
    public static int NormalizeString ( int NormForm,  Addressable lpSrcString,  int cwSrcLength,  Addressable lpDstString,  int cwDstLength) {
        var mh$ = NormalizeString$MH();
        try {
            return (int)mh$.invokeExact(NormForm, lpSrcString, cwSrcLength, lpDstString, cwDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsNormalizedString$MH() {
        return RuntimeHelper.requireNonNull(constants$596.IsNormalizedString$MH,"IsNormalizedString");
    }
    public static int IsNormalizedString ( int NormForm,  Addressable lpString,  int cwLength) {
        var mh$ = IsNormalizedString$MH();
        try {
            return (int)mh$.invokeExact(NormForm, lpString, cwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerifyScripts$MH() {
        return RuntimeHelper.requireNonNull(constants$597.VerifyScripts$MH,"VerifyScripts");
    }
    public static int VerifyScripts ( int dwFlags,  Addressable lpLocaleScripts,  int cchLocaleScripts,  Addressable lpTestScripts,  int cchTestScripts) {
        var mh$ = VerifyScripts$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpLocaleScripts, cchLocaleScripts, lpTestScripts, cchTestScripts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringScripts$MH() {
        return RuntimeHelper.requireNonNull(constants$597.GetStringScripts$MH,"GetStringScripts");
    }
    public static int GetStringScripts ( int dwFlags,  Addressable lpString,  int cchString,  Addressable lpScripts,  int cchScripts) {
        var mh$ = GetStringScripts$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpString, cchString, lpScripts, cchScripts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocaleInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$597.GetLocaleInfoEx$MH,"GetLocaleInfoEx");
    }
    public static int GetLocaleInfoEx ( Addressable lpLocaleName,  int LCType,  Addressable lpLCData,  int cchData) {
        var mh$ = GetLocaleInfoEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, LCType, lpLCData, cchData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCalendarInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$597.GetCalendarInfoEx$MH,"GetCalendarInfoEx");
    }
    public static int GetCalendarInfoEx ( Addressable lpLocaleName,  int Calendar,  Addressable lpReserved,  int CalType,  Addressable lpCalData,  int cchData,  Addressable lpValue) {
        var mh$ = GetCalendarInfoEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, Calendar, lpReserved, CalType, lpCalData, cchData, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$597.GetNumberFormatEx$MH,"GetNumberFormatEx");
    }
    public static int GetNumberFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpNumberStr,  int cchNumber) {
        var mh$ = GetNumberFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrencyFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$597.GetCurrencyFormatEx$MH,"GetCurrencyFormatEx");
    }
    public static int GetCurrencyFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpCurrencyStr,  int cchCurrency) {
        var mh$ = GetCurrencyFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$598.GetUserDefaultLocaleName$MH,"GetUserDefaultLocaleName");
    }
    public static int GetUserDefaultLocaleName ( Addressable lpLocaleName,  int cchLocaleName) {
        var mh$ = GetUserDefaultLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$598.GetSystemDefaultLocaleName$MH,"GetSystemDefaultLocaleName");
    }
    public static int GetSystemDefaultLocaleName ( Addressable lpLocaleName,  int cchLocaleName) {
        var mh$ = GetSystemDefaultLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsNLSDefinedString$MH() {
        return RuntimeHelper.requireNonNull(constants$598.IsNLSDefinedString$MH,"IsNLSDefinedString");
    }
    public static int IsNLSDefinedString ( int Function,  int dwFlags,  Addressable lpVersionInformation,  Addressable lpString,  int cchStr) {
        var mh$ = IsNLSDefinedString$MH();
        try {
            return (int)mh$.invokeExact(Function, dwFlags, lpVersionInformation, lpString, cchStr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNLSVersionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$598.GetNLSVersionEx$MH,"GetNLSVersionEx");
    }
    public static int GetNLSVersionEx ( int function,  Addressable lpLocaleName,  Addressable lpVersionInformation) {
        var mh$ = GetNLSVersionEx$MH();
        try {
            return (int)mh$.invokeExact(function, lpLocaleName, lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidNLSVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$598.IsValidNLSVersion$MH,"IsValidNLSVersion");
    }
    public static int IsValidNLSVersion ( int function,  Addressable lpLocaleName,  Addressable lpVersionInformation) {
        var mh$ = IsValidNLSVersion$MH();
        try {
            return (int)mh$.invokeExact(function, lpLocaleName, lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNLSStringEx$MH() {
        return RuntimeHelper.requireNonNull(constants$598.FindNLSStringEx$MH,"FindNLSStringEx");
    }
    public static int FindNLSStringEx ( Addressable lpLocaleName,  int dwFindNLSStringFlags,  Addressable lpStringSource,  int cchSource,  Addressable lpStringValue,  int cchValue,  Addressable pcchFound,  Addressable lpVersionInformation,  Addressable lpReserved,  long sortHandle) {
        var mh$ = FindNLSStringEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound, lpVersionInformation, lpReserved, sortHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCMapStringEx$MH() {
        return RuntimeHelper.requireNonNull(constants$599.LCMapStringEx$MH,"LCMapStringEx");
    }
    public static int LCMapStringEx ( Addressable lpLocaleName,  int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest,  Addressable lpVersionInformation,  Addressable lpReserved,  long sortHandle) {
        var mh$ = LCMapStringEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest, lpVersionInformation, lpReserved, sortHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$599.IsValidLocaleName$MH,"IsValidLocaleName");
    }
    public static int IsValidLocaleName ( Addressable lpLocaleName) {
        var mh$ = IsValidLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoExEx$MH() {
        return RuntimeHelper.requireNonNull(constants$599.EnumCalendarInfoExEx$MH,"EnumCalendarInfoExEx");
    }
    public static int EnumCalendarInfoExEx ( Addressable pCalInfoEnumProcExEx,  Addressable lpLocaleName,  int Calendar,  Addressable lpReserved,  int CalType,  long lParam) {
        var mh$ = EnumCalendarInfoExEx$MH();
        try {
            return (int)mh$.invokeExact(pCalInfoEnumProcExEx, lpLocaleName, Calendar, lpReserved, CalType, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsExEx$MH() {
        return RuntimeHelper.requireNonNull(constants$600.EnumDateFormatsExEx$MH,"EnumDateFormatsExEx");
    }
    public static int EnumDateFormatsExEx ( Addressable lpDateFmtEnumProcExEx,  Addressable lpLocaleName,  int dwFlags,  long lParam) {
        var mh$ = EnumDateFormatsExEx$MH();
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProcExEx, lpLocaleName, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumTimeFormatsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$600.EnumTimeFormatsEx$MH,"EnumTimeFormatsEx");
    }
    public static int EnumTimeFormatsEx ( Addressable lpTimeFmtEnumProcEx,  Addressable lpLocaleName,  int dwFlags,  long lParam) {
        var mh$ = EnumTimeFormatsEx$MH();
        try {
            return (int)mh$.invokeExact(lpTimeFmtEnumProcEx, lpLocaleName, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesEx$MH() {
        return RuntimeHelper.requireNonNull(constants$601.EnumSystemLocalesEx$MH,"EnumSystemLocalesEx");
    }
    public static int EnumSystemLocalesEx ( Addressable lpLocaleEnumProcEx,  int dwFlags,  long lParam,  Addressable lpReserved) {
        var mh$ = EnumSystemLocalesEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProcEx, dwFlags, lParam, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResolveLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$601.ResolveLocaleName$MH,"ResolveLocaleName");
    }
    public static int ResolveLocaleName ( Addressable lpNameToResolve,  Addressable lpLocaleName,  int cchLocaleName) {
        var mh$ = ResolveLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpNameToResolve, lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCOORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSMALL_RECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKEY_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOUSE_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWINDOW_BUFFER_SIZE_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMENU_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFOCUS_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PINPUT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHAR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONSOLE_FONT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HPCON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AllocConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$601.AllocConsole$MH,"AllocConsole");
    }
    public static int AllocConsole () {
        var mh$ = AllocConsole$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$601.FreeConsole$MH,"FreeConsole");
    }
    public static int FreeConsole () {
        var mh$ = FreeConsole$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AttachConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$601.AttachConsole$MH,"AttachConsole");
    }
    public static int AttachConsole ( int dwProcessId) {
        var mh$ = AttachConsole$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCP$MH() {
        return RuntimeHelper.requireNonNull(constants$602.GetConsoleCP$MH,"GetConsoleCP");
    }
    public static int GetConsoleCP () {
        var mh$ = GetConsoleCP$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOutputCP$MH() {
        return RuntimeHelper.requireNonNull(constants$602.GetConsoleOutputCP$MH,"GetConsoleOutputCP");
    }
    public static int GetConsoleOutputCP () {
        var mh$ = GetConsoleOutputCP$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$602.GetConsoleMode$MH,"GetConsoleMode");
    }
    public static int GetConsoleMode ( Addressable hConsoleHandle,  Addressable lpMode) {
        var mh$ = GetConsoleMode$MH();
        try {
            return (int)mh$.invokeExact(hConsoleHandle, lpMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$602.SetConsoleMode$MH,"SetConsoleMode");
    }
    public static int SetConsoleMode ( Addressable hConsoleHandle,  int dwMode) {
        var mh$ = SetConsoleMode$MH();
        try {
            return (int)mh$.invokeExact(hConsoleHandle, dwMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberOfConsoleInputEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$602.GetNumberOfConsoleInputEvents$MH,"GetNumberOfConsoleInputEvents");
    }
    public static int GetNumberOfConsoleInputEvents ( Addressable hConsoleInput,  Addressable lpNumberOfEvents) {
        var mh$ = GetNumberOfConsoleInputEvents$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpNumberOfEvents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$602.ReadConsoleInputA$MH,"ReadConsoleInputA");
    }
    public static int ReadConsoleInputA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = ReadConsoleInputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$603.ReadConsoleInputW$MH,"ReadConsoleInputW");
    }
    public static int ReadConsoleInputW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = ReadConsoleInputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$603.PeekConsoleInputA$MH,"PeekConsoleInputA");
    }
    public static int PeekConsoleInputA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = PeekConsoleInputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$603.PeekConsoleInputW$MH,"PeekConsoleInputW");
    }
    public static int PeekConsoleInputW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = PeekConsoleInputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_READCONSOLE_CONTROL = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ReadConsoleA$MH() {
        return RuntimeHelper.requireNonNull(constants$603.ReadConsoleA$MH,"ReadConsoleA");
    }
    public static int ReadConsoleA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nNumberOfCharsToRead,  Addressable lpNumberOfCharsRead,  Addressable pInputControl) {
        var mh$ = ReadConsoleA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleW$MH() {
        return RuntimeHelper.requireNonNull(constants$603.ReadConsoleW$MH,"ReadConsoleW");
    }
    public static int ReadConsoleW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nNumberOfCharsToRead,  Addressable lpNumberOfCharsRead,  Addressable pInputControl) {
        var mh$ = ReadConsoleW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleA$MH() {
        return RuntimeHelper.requireNonNull(constants$603.WriteConsoleA$MH,"WriteConsoleA");
    }
    public static int WriteConsoleA ( Addressable hConsoleOutput,  Addressable lpBuffer,  int nNumberOfCharsToWrite,  Addressable lpNumberOfCharsWritten,  Addressable lpReserved) {
        var mh$ = WriteConsoleA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleW$MH() {
        return RuntimeHelper.requireNonNull(constants$604.WriteConsoleW$MH,"WriteConsoleW");
    }
    public static int WriteConsoleW ( Addressable hConsoleOutput,  Addressable lpBuffer,  int nNumberOfCharsToWrite,  Addressable lpNumberOfCharsWritten,  Addressable lpReserved) {
        var mh$ = WriteConsoleW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCtrlHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$604.SetConsoleCtrlHandler$MH,"SetConsoleCtrlHandler");
    }
    public static int SetConsoleCtrlHandler ( Addressable HandlerRoutine,  int Add) {
        var mh$ = SetConsoleCtrlHandler$MH();
        try {
            return (int)mh$.invokeExact(HandlerRoutine, Add);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$604.CreatePseudoConsole$MH,"CreatePseudoConsole");
    }
    public static int CreatePseudoConsole ( MemorySegment size,  Addressable hInput,  Addressable hOutput,  int dwFlags,  Addressable phPC) {
        var mh$ = CreatePseudoConsole$MH();
        try {
            return (int)mh$.invokeExact(size, hInput, hOutput, dwFlags, phPC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResizePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$604.ResizePseudoConsole$MH,"ResizePseudoConsole");
    }
    public static int ResizePseudoConsole ( Addressable hPC,  MemorySegment size) {
        var mh$ = ResizePseudoConsole$MH();
        try {
            return (int)mh$.invokeExact(hPC, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClosePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$605.ClosePseudoConsole$MH,"ClosePseudoConsole");
    }
    public static void ClosePseudoConsole ( Addressable hPC) {
        var mh$ = ClosePseudoConsole$MH();
        try {
            mh$.invokeExact(hPC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$605.FillConsoleOutputCharacterA$MH,"FillConsoleOutputCharacterA");
    }
    public static int FillConsoleOutputCharacterA ( Addressable hConsoleOutput,  byte cCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = FillConsoleOutputCharacterA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$605.FillConsoleOutputCharacterW$MH,"FillConsoleOutputCharacterW");
    }
    public static int FillConsoleOutputCharacterW ( Addressable hConsoleOutput,  short cCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = FillConsoleOutputCharacterW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$605.FillConsoleOutputAttribute$MH,"FillConsoleOutputAttribute");
    }
    public static int FillConsoleOutputAttribute ( Addressable hConsoleOutput,  short wAttribute,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfAttrsWritten) {
        var mh$ = FillConsoleOutputAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, wAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenerateConsoleCtrlEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$605.GenerateConsoleCtrlEvent$MH,"GenerateConsoleCtrlEvent");
    }
    public static int GenerateConsoleCtrlEvent ( int dwCtrlEvent,  int dwProcessGroupId) {
        var mh$ = GenerateConsoleCtrlEvent$MH();
        try {
            return (int)mh$.invokeExact(dwCtrlEvent, dwProcessGroupId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateConsoleScreenBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$605.CreateConsoleScreenBuffer$MH,"CreateConsoleScreenBuffer");
    }
    public static MemoryAddress CreateConsoleScreenBuffer ( int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwFlags,  Addressable lpScreenBufferData) {
        var mh$ = CreateConsoleScreenBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlags, lpScreenBufferData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleActiveScreenBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$606.SetConsoleActiveScreenBuffer$MH,"SetConsoleActiveScreenBuffer");
    }
    public static int SetConsoleActiveScreenBuffer ( Addressable hConsoleOutput) {
        var mh$ = SetConsoleActiveScreenBuffer$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushConsoleInputBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$606.FlushConsoleInputBuffer$MH,"FlushConsoleInputBuffer");
    }
    public static int FlushConsoleInputBuffer ( Addressable hConsoleInput) {
        var mh$ = FlushConsoleInputBuffer$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCP$MH() {
        return RuntimeHelper.requireNonNull(constants$606.SetConsoleCP$MH,"SetConsoleCP");
    }
    public static int SetConsoleCP ( int wCodePageID) {
        var mh$ = SetConsoleCP$MH();
        try {
            return (int)mh$.invokeExact(wCodePageID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleOutputCP$MH() {
        return RuntimeHelper.requireNonNull(constants$606.SetConsoleOutputCP$MH,"SetConsoleOutputCP");
    }
    public static int SetConsoleOutputCP ( int wCodePageID) {
        var mh$ = SetConsoleOutputCP$MH();
        try {
            return (int)mh$.invokeExact(wCodePageID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_CURSOR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleCursorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$606.GetConsoleCursorInfo$MH,"GetConsoleCursorInfo");
    }
    public static int GetConsoleCursorInfo ( Addressable hConsoleOutput,  Addressable lpConsoleCursorInfo) {
        var mh$ = GetConsoleCursorInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleCursorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCursorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$606.SetConsoleCursorInfo$MH,"SetConsoleCursorInfo");
    }
    public static int SetConsoleCursorInfo ( Addressable hConsoleOutput,  Addressable lpConsoleCursorInfo) {
        var mh$ = SetConsoleCursorInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleCursorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_SCREEN_BUFFER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleScreenBufferInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$607.GetConsoleScreenBufferInfo$MH,"GetConsoleScreenBufferInfo");
    }
    public static int GetConsoleScreenBufferInfo ( Addressable hConsoleOutput,  Addressable lpConsoleScreenBufferInfo) {
        var mh$ = GetConsoleScreenBufferInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_SCREEN_BUFFER_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleScreenBufferInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$607.GetConsoleScreenBufferInfoEx$MH,"GetConsoleScreenBufferInfoEx");
    }
    public static int GetConsoleScreenBufferInfoEx ( Addressable hConsoleOutput,  Addressable lpConsoleScreenBufferInfoEx) {
        var mh$ = GetConsoleScreenBufferInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleScreenBufferInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$607.SetConsoleScreenBufferInfoEx$MH,"SetConsoleScreenBufferInfoEx");
    }
    public static int SetConsoleScreenBufferInfoEx ( Addressable hConsoleOutput,  Addressable lpConsoleScreenBufferInfoEx) {
        var mh$ = SetConsoleScreenBufferInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleScreenBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$607.SetConsoleScreenBufferSize$MH,"SetConsoleScreenBufferSize");
    }
    public static int SetConsoleScreenBufferSize ( Addressable hConsoleOutput,  MemorySegment dwSize) {
        var mh$ = SetConsoleScreenBufferSize$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCursorPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$607.SetConsoleCursorPosition$MH,"SetConsoleCursorPosition");
    }
    public static int SetConsoleCursorPosition ( Addressable hConsoleOutput,  MemorySegment dwCursorPosition) {
        var mh$ = SetConsoleCursorPosition$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwCursorPosition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLargestConsoleWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$607.GetLargestConsoleWindowSize$MH,"GetLargestConsoleWindowSize");
    }
    public static MemorySegment GetLargestConsoleWindowSize ( SegmentAllocator allocator,  Addressable hConsoleOutput) {
        var mh$ = GetLargestConsoleWindowSize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, hConsoleOutput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleTextAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$608.SetConsoleTextAttribute$MH,"SetConsoleTextAttribute");
    }
    public static int SetConsoleTextAttribute ( Addressable hConsoleOutput,  short wAttributes) {
        var mh$ = SetConsoleTextAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, wAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleWindowInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$608.SetConsoleWindowInfo$MH,"SetConsoleWindowInfo");
    }
    public static int SetConsoleWindowInfo ( Addressable hConsoleOutput,  int bAbsolute,  Addressable lpConsoleWindow) {
        var mh$ = SetConsoleWindowInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bAbsolute, lpConsoleWindow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$608.WriteConsoleOutputCharacterA$MH,"WriteConsoleOutputCharacterA");
    }
    public static int WriteConsoleOutputCharacterA ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = WriteConsoleOutputCharacterA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$608.WriteConsoleOutputCharacterW$MH,"WriteConsoleOutputCharacterW");
    }
    public static int WriteConsoleOutputCharacterW ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = WriteConsoleOutputCharacterW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$608.WriteConsoleOutputAttribute$MH,"WriteConsoleOutputAttribute");
    }
    public static int WriteConsoleOutputAttribute ( Addressable hConsoleOutput,  Addressable lpAttribute,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfAttrsWritten) {
        var mh$ = WriteConsoleOutputAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$608.ReadConsoleOutputCharacterA$MH,"ReadConsoleOutputCharacterA");
    }
    public static int ReadConsoleOutputCharacterA ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwReadCoord,  Addressable lpNumberOfCharsRead) {
        var mh$ = ReadConsoleOutputCharacterA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$609.ReadConsoleOutputCharacterW$MH,"ReadConsoleOutputCharacterW");
    }
    public static int ReadConsoleOutputCharacterW ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwReadCoord,  Addressable lpNumberOfCharsRead) {
        var mh$ = ReadConsoleOutputCharacterW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$609.ReadConsoleOutputAttribute$MH,"ReadConsoleOutputAttribute");
    }
    public static int ReadConsoleOutputAttribute ( Addressable hConsoleOutput,  Addressable lpAttribute,  int nLength,  MemorySegment dwReadCoord,  Addressable lpNumberOfAttrsRead) {
        var mh$ = ReadConsoleOutputAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpAttribute, nLength, dwReadCoord, lpNumberOfAttrsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$609.WriteConsoleInputA$MH,"WriteConsoleInputA");
    }
    public static int WriteConsoleInputA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsWritten) {
        var mh$ = WriteConsoleInputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$609.WriteConsoleInputW$MH,"WriteConsoleInputW");
    }
    public static int WriteConsoleInputW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsWritten) {
        var mh$ = WriteConsoleInputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollConsoleScreenBufferA$MH() {
        return RuntimeHelper.requireNonNull(constants$609.ScrollConsoleScreenBufferA$MH,"ScrollConsoleScreenBufferA");
    }
    public static int ScrollConsoleScreenBufferA ( Addressable hConsoleOutput,  Addressable lpScrollRectangle,  Addressable lpClipRectangle,  MemorySegment dwDestinationOrigin,  Addressable lpFill) {
        var mh$ = ScrollConsoleScreenBufferA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollConsoleScreenBufferW$MH() {
        return RuntimeHelper.requireNonNull(constants$609.ScrollConsoleScreenBufferW$MH,"ScrollConsoleScreenBufferW");
    }
    public static int ScrollConsoleScreenBufferW ( Addressable hConsoleOutput,  Addressable lpScrollRectangle,  Addressable lpClipRectangle,  MemorySegment dwDestinationOrigin,  Addressable lpFill) {
        var mh$ = ScrollConsoleScreenBufferW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputA$MH() {
        return RuntimeHelper.requireNonNull(constants$610.WriteConsoleOutputA$MH,"WriteConsoleOutputA");
    }
    public static int WriteConsoleOutputA ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpWriteRegion) {
        var mh$ = WriteConsoleOutputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputW$MH() {
        return RuntimeHelper.requireNonNull(constants$610.WriteConsoleOutputW$MH,"WriteConsoleOutputW");
    }
    public static int WriteConsoleOutputW ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpWriteRegion) {
        var mh$ = WriteConsoleOutputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputA$MH() {
        return RuntimeHelper.requireNonNull(constants$610.ReadConsoleOutputA$MH,"ReadConsoleOutputA");
    }
    public static int ReadConsoleOutputA ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpReadRegion) {
        var mh$ = ReadConsoleOutputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputW$MH() {
        return RuntimeHelper.requireNonNull(constants$610.ReadConsoleOutputW$MH,"ReadConsoleOutputW");
    }
    public static int ReadConsoleOutputW ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpReadRegion) {
        var mh$ = ReadConsoleOutputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$610.GetConsoleTitleA$MH,"GetConsoleTitleA");
    }
    public static int GetConsoleTitleA ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = GetConsoleTitleA$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$610.GetConsoleTitleW$MH,"GetConsoleTitleW");
    }
    public static int GetConsoleTitleW ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = GetConsoleTitleW$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOriginalTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$611.GetConsoleOriginalTitleA$MH,"GetConsoleOriginalTitleA");
    }
    public static int GetConsoleOriginalTitleA ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = GetConsoleOriginalTitleA$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOriginalTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$611.GetConsoleOriginalTitleW$MH,"GetConsoleOriginalTitleW");
    }
    public static int GetConsoleOriginalTitleW ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = GetConsoleOriginalTitleW$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$611.SetConsoleTitleA$MH,"SetConsoleTitleA");
    }
    public static int SetConsoleTitleA ( Addressable lpConsoleTitle) {
        var mh$ = SetConsoleTitleA$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$611.SetConsoleTitleW$MH,"SetConsoleTitleW");
    }
    public static int SetConsoleTitleW ( Addressable lpConsoleTitle) {
        var mh$ = SetConsoleTitleW$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberOfConsoleMouseButtons$MH() {
        return RuntimeHelper.requireNonNull(constants$611.GetNumberOfConsoleMouseButtons$MH,"GetNumberOfConsoleMouseButtons");
    }
    public static int GetNumberOfConsoleMouseButtons ( Addressable lpNumberOfMouseButtons) {
        var mh$ = GetNumberOfConsoleMouseButtons$MH();
        try {
            return (int)mh$.invokeExact(lpNumberOfMouseButtons);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleFontSize$MH() {
        return RuntimeHelper.requireNonNull(constants$611.GetConsoleFontSize$MH,"GetConsoleFontSize");
    }
    public static MemorySegment GetConsoleFontSize ( SegmentAllocator allocator,  Addressable hConsoleOutput,  int nFont) {
        var mh$ = GetConsoleFontSize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, hConsoleOutput, nFont);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentConsoleFont$MH() {
        return RuntimeHelper.requireNonNull(constants$612.GetCurrentConsoleFont$MH,"GetCurrentConsoleFont");
    }
    public static int GetCurrentConsoleFont ( Addressable hConsoleOutput,  int bMaximumWindow,  Addressable lpConsoleCurrentFont) {
        var mh$ = GetCurrentConsoleFont$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFont);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_FONT_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetCurrentConsoleFontEx$MH() {
        return RuntimeHelper.requireNonNull(constants$612.GetCurrentConsoleFontEx$MH,"GetCurrentConsoleFontEx");
    }
    public static int GetCurrentConsoleFontEx ( Addressable hConsoleOutput,  int bMaximumWindow,  Addressable lpConsoleCurrentFontEx) {
        var mh$ = GetCurrentConsoleFontEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCurrentConsoleFontEx$MH() {
        return RuntimeHelper.requireNonNull(constants$612.SetCurrentConsoleFontEx$MH,"SetCurrentConsoleFontEx");
    }
    public static int SetCurrentConsoleFontEx ( Addressable hConsoleOutput,  int bMaximumWindow,  Addressable lpConsoleCurrentFontEx) {
        var mh$ = SetCurrentConsoleFontEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_SELECTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleSelectionInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$612.GetConsoleSelectionInfo$MH,"GetConsoleSelectionInfo");
    }
    public static int GetConsoleSelectionInfo ( Addressable lpConsoleSelectionInfo) {
        var mh$ = GetConsoleSelectionInfo$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleSelectionInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_HISTORY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleHistoryInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$612.GetConsoleHistoryInfo$MH,"GetConsoleHistoryInfo");
    }
    public static int GetConsoleHistoryInfo ( Addressable lpConsoleHistoryInfo) {
        var mh$ = GetConsoleHistoryInfo$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleHistoryInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleHistoryInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$612.SetConsoleHistoryInfo$MH,"SetConsoleHistoryInfo");
    }
    public static int SetConsoleHistoryInfo ( Addressable lpConsoleHistoryInfo) {
        var mh$ = SetConsoleHistoryInfo$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleHistoryInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$613.GetConsoleDisplayMode$MH,"GetConsoleDisplayMode");
    }
    public static int GetConsoleDisplayMode ( Addressable lpModeFlags) {
        var mh$ = GetConsoleDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(lpModeFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$613.SetConsoleDisplayMode$MH,"SetConsoleDisplayMode");
    }
    public static int SetConsoleDisplayMode ( Addressable hConsoleOutput,  int dwFlags,  Addressable lpNewScreenBufferDimensions) {
        var mh$ = SetConsoleDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwFlags, lpNewScreenBufferDimensions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$613.GetConsoleWindow$MH,"GetConsoleWindow");
    }
    public static MemoryAddress GetConsoleWindow () {
        var mh$ = GetConsoleWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddConsoleAliasA$MH() {
        return RuntimeHelper.requireNonNull(constants$613.AddConsoleAliasA$MH,"AddConsoleAliasA");
    }
    public static int AddConsoleAliasA ( Addressable Source,  Addressable Target,  Addressable ExeName) {
        var mh$ = AddConsoleAliasA$MH();
        try {
            return (int)mh$.invokeExact(Source, Target, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddConsoleAliasW$MH() {
        return RuntimeHelper.requireNonNull(constants$613.AddConsoleAliasW$MH,"AddConsoleAliasW");
    }
    public static int AddConsoleAliasW ( Addressable Source,  Addressable Target,  Addressable ExeName) {
        var mh$ = AddConsoleAliasW$MH();
        try {
            return (int)mh$.invokeExact(Source, Target, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasA$MH() {
        return RuntimeHelper.requireNonNull(constants$613.GetConsoleAliasA$MH,"GetConsoleAliasA");
    }
    public static int GetConsoleAliasA ( Addressable Source,  Addressable TargetBuffer,  int TargetBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleAliasA$MH();
        try {
            return (int)mh$.invokeExact(Source, TargetBuffer, TargetBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasW$MH() {
        return RuntimeHelper.requireNonNull(constants$614.GetConsoleAliasW$MH,"GetConsoleAliasW");
    }
    public static int GetConsoleAliasW ( Addressable Source,  Addressable TargetBuffer,  int TargetBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleAliasW$MH();
        try {
            return (int)mh$.invokeExact(Source, TargetBuffer, TargetBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$614.GetConsoleAliasesLengthA$MH,"GetConsoleAliasesLengthA");
    }
    public static int GetConsoleAliasesLengthA ( Addressable ExeName) {
        var mh$ = GetConsoleAliasesLengthA$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$614.GetConsoleAliasesLengthW$MH,"GetConsoleAliasesLengthW");
    }
    public static int GetConsoleAliasesLengthW ( Addressable ExeName) {
        var mh$ = GetConsoleAliasesLengthW$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$614.GetConsoleAliasExesLengthA$MH,"GetConsoleAliasExesLengthA");
    }
    public static int GetConsoleAliasExesLengthA () {
        var mh$ = GetConsoleAliasExesLengthA$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$614.GetConsoleAliasExesLengthW$MH,"GetConsoleAliasExesLengthW");
    }
    public static int GetConsoleAliasExesLengthW () {
        var mh$ = GetConsoleAliasExesLengthW$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesA$MH() {
        return RuntimeHelper.requireNonNull(constants$614.GetConsoleAliasesA$MH,"GetConsoleAliasesA");
    }
    public static int GetConsoleAliasesA ( Addressable AliasBuffer,  int AliasBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleAliasesA$MH();
        try {
            return (int)mh$.invokeExact(AliasBuffer, AliasBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesW$MH() {
        return RuntimeHelper.requireNonNull(constants$615.GetConsoleAliasesW$MH,"GetConsoleAliasesW");
    }
    public static int GetConsoleAliasesW ( Addressable AliasBuffer,  int AliasBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleAliasesW$MH();
        try {
            return (int)mh$.invokeExact(AliasBuffer, AliasBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesA$MH() {
        return RuntimeHelper.requireNonNull(constants$615.GetConsoleAliasExesA$MH,"GetConsoleAliasExesA");
    }
    public static int GetConsoleAliasExesA ( Addressable ExeNameBuffer,  int ExeNameBufferLength) {
        var mh$ = GetConsoleAliasExesA$MH();
        try {
            return (int)mh$.invokeExact(ExeNameBuffer, ExeNameBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesW$MH() {
        return RuntimeHelper.requireNonNull(constants$615.GetConsoleAliasExesW$MH,"GetConsoleAliasExesW");
    }
    public static int GetConsoleAliasExesW ( Addressable ExeNameBuffer,  int ExeNameBufferLength) {
        var mh$ = GetConsoleAliasExesW$MH();
        try {
            return (int)mh$.invokeExact(ExeNameBuffer, ExeNameBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpungeConsoleCommandHistoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$615.ExpungeConsoleCommandHistoryA$MH,"ExpungeConsoleCommandHistoryA");
    }
    public static void ExpungeConsoleCommandHistoryA ( Addressable ExeName) {
        var mh$ = ExpungeConsoleCommandHistoryA$MH();
        try {
            mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpungeConsoleCommandHistoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$615.ExpungeConsoleCommandHistoryW$MH,"ExpungeConsoleCommandHistoryW");
    }
    public static void ExpungeConsoleCommandHistoryW ( Addressable ExeName) {
        var mh$ = ExpungeConsoleCommandHistoryW$MH();
        try {
            mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleNumberOfCommandsA$MH() {
        return RuntimeHelper.requireNonNull(constants$615.SetConsoleNumberOfCommandsA$MH,"SetConsoleNumberOfCommandsA");
    }
    public static int SetConsoleNumberOfCommandsA ( int Number,  Addressable ExeName) {
        var mh$ = SetConsoleNumberOfCommandsA$MH();
        try {
            return (int)mh$.invokeExact(Number, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleNumberOfCommandsW$MH() {
        return RuntimeHelper.requireNonNull(constants$616.SetConsoleNumberOfCommandsW$MH,"SetConsoleNumberOfCommandsW");
    }
    public static int SetConsoleNumberOfCommandsW ( int Number,  Addressable ExeName) {
        var mh$ = SetConsoleNumberOfCommandsW$MH();
        try {
            return (int)mh$.invokeExact(Number, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$616.GetConsoleCommandHistoryLengthA$MH,"GetConsoleCommandHistoryLengthA");
    }
    public static int GetConsoleCommandHistoryLengthA ( Addressable ExeName) {
        var mh$ = GetConsoleCommandHistoryLengthA$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$616.GetConsoleCommandHistoryLengthW$MH,"GetConsoleCommandHistoryLengthW");
    }
    public static int GetConsoleCommandHistoryLengthW ( Addressable ExeName) {
        var mh$ = GetConsoleCommandHistoryLengthW$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$616.GetConsoleCommandHistoryA$MH,"GetConsoleCommandHistoryA");
    }
    public static int GetConsoleCommandHistoryA ( Addressable Commands,  int CommandBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleCommandHistoryA$MH();
        try {
            return (int)mh$.invokeExact(Commands, CommandBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$616.GetConsoleCommandHistoryW$MH,"GetConsoleCommandHistoryW");
    }
    public static int GetConsoleCommandHistoryW ( Addressable Commands,  int CommandBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleCommandHistoryW$MH();
        try {
            return (int)mh$.invokeExact(Commands, CommandBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleProcessList$MH() {
        return RuntimeHelper.requireNonNull(constants$616.GetConsoleProcessList$MH,"GetConsoleProcessList");
    }
    public static int GetConsoleProcessList ( Addressable lpdwProcessList,  int dwProcessCount) {
        var mh$ = GetConsoleProcessList$MH();
        try {
            return (int)mh$.invokeExact(lpdwProcessList, dwProcessCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerFindFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$617.VerFindFileA$MH,"VerFindFileA");
    }
    public static int VerFindFileA ( int uFlags,  Addressable szFileName,  Addressable szWinDir,  Addressable szAppDir,  Addressable szCurDir,  Addressable puCurDirLen,  Addressable szDestDir,  Addressable puDestDirLen) {
        var mh$ = VerFindFileA$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerFindFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$617.VerFindFileW$MH,"VerFindFileW");
    }
    public static int VerFindFileW ( int uFlags,  Addressable szFileName,  Addressable szWinDir,  Addressable szAppDir,  Addressable szCurDir,  Addressable puCurDirLen,  Addressable szDestDir,  Addressable puDestDirLen) {
        var mh$ = VerFindFileW$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerInstallFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$617.VerInstallFileA$MH,"VerInstallFileA");
    }
    public static int VerInstallFileA ( int uFlags,  Addressable szSrcFileName,  Addressable szDestFileName,  Addressable szSrcDir,  Addressable szDestDir,  Addressable szCurDir,  Addressable szTmpFile,  Addressable puTmpFileLen) {
        var mh$ = VerInstallFileA$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerInstallFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$617.VerInstallFileW$MH,"VerInstallFileW");
    }
    public static int VerInstallFileW ( int uFlags,  Addressable szSrcFileName,  Addressable szDestFileName,  Addressable szSrcDir,  Addressable szDestDir,  Addressable szCurDir,  Addressable szTmpFile,  Addressable puTmpFileLen) {
        var mh$ = VerInstallFileW$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeA$MH() {
        return RuntimeHelper.requireNonNull(constants$617.GetFileVersionInfoSizeA$MH,"GetFileVersionInfoSizeA");
    }
    public static int GetFileVersionInfoSizeA ( Addressable lptstrFilename,  Addressable lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeA$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeW$MH() {
        return RuntimeHelper.requireNonNull(constants$617.GetFileVersionInfoSizeW$MH,"GetFileVersionInfoSizeW");
    }
    public static int GetFileVersionInfoSizeW ( Addressable lptstrFilename,  Addressable lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeW$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$618.GetFileVersionInfoA$MH,"GetFileVersionInfoA");
    }
    public static int GetFileVersionInfoA ( Addressable lptstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = GetFileVersionInfoA$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$618.GetFileVersionInfoW$MH,"GetFileVersionInfoW");
    }
    public static int GetFileVersionInfoW ( Addressable lptstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = GetFileVersionInfoW$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeExA$MH() {
        return RuntimeHelper.requireNonNull(constants$618.GetFileVersionInfoSizeExA$MH,"GetFileVersionInfoSizeExA");
    }
    public static int GetFileVersionInfoSizeExA ( int dwFlags,  Addressable lpwstrFilename,  Addressable lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeExA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeExW$MH() {
        return RuntimeHelper.requireNonNull(constants$618.GetFileVersionInfoSizeExW$MH,"GetFileVersionInfoSizeExW");
    }
    public static int GetFileVersionInfoSizeExW ( int dwFlags,  Addressable lpwstrFilename,  Addressable lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeExW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$618.GetFileVersionInfoExA$MH,"GetFileVersionInfoExA");
    }
    public static int GetFileVersionInfoExA ( int dwFlags,  Addressable lpwstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = GetFileVersionInfoExA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$618.GetFileVersionInfoExW$MH,"GetFileVersionInfoExW");
    }
    public static int GetFileVersionInfoExW ( int dwFlags,  Addressable lpwstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = GetFileVersionInfoExW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerLanguageNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$619.VerLanguageNameA$MH,"VerLanguageNameA");
    }
    public static int VerLanguageNameA ( int wLang,  Addressable szLang,  int cchLang) {
        var mh$ = VerLanguageNameA$MH();
        try {
            return (int)mh$.invokeExact(wLang, szLang, cchLang);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerLanguageNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$619.VerLanguageNameW$MH,"VerLanguageNameW");
    }
    public static int VerLanguageNameW ( int wLang,  Addressable szLang,  int cchLang) {
        var mh$ = VerLanguageNameW$MH();
        try {
            return (int)mh$.invokeExact(wLang, szLang, cchLang);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerQueryValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$619.VerQueryValueA$MH,"VerQueryValueA");
    }
    public static int VerQueryValueA ( Addressable pBlock,  Addressable lpSubBlock,  Addressable lplpBuffer,  Addressable puLen) {
        var mh$ = VerQueryValueA$MH();
        try {
            return (int)mh$.invokeExact(pBlock, lpSubBlock, lplpBuffer, puLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerQueryValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$619.VerQueryValueW$MH,"VerQueryValueW");
    }
    public static int VerQueryValueW ( Addressable pBlock,  Addressable lpSubBlock,  Addressable lplpBuffer,  Addressable puLen) {
        var mh$ = VerQueryValueW$MH();
        try {
            return (int)mh$.invokeExact(pBlock, lpSubBlock, lplpBuffer, puLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt LSTATUS = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PVALCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPVALUEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPVALUEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPVALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROVIDER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVALENTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVALENTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVALENT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegCloseKey$MH() {
        return RuntimeHelper.requireNonNull(constants$620.RegCloseKey$MH,"RegCloseKey");
    }
    public static int RegCloseKey ( Addressable hKey) {
        var mh$ = RegCloseKey$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOverridePredefKey$MH() {
        return RuntimeHelper.requireNonNull(constants$620.RegOverridePredefKey$MH,"RegOverridePredefKey");
    }
    public static int RegOverridePredefKey ( Addressable hKey,  Addressable hNewHKey) {
        var mh$ = RegOverridePredefKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, hNewHKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenUserClassesRoot$MH() {
        return RuntimeHelper.requireNonNull(constants$620.RegOpenUserClassesRoot$MH,"RegOpenUserClassesRoot");
    }
    public static int RegOpenUserClassesRoot ( Addressable hToken,  int dwOptions,  int samDesired,  Addressable phkResult) {
        var mh$ = RegOpenUserClassesRoot$MH();
        try {
            return (int)mh$.invokeExact(hToken, dwOptions, samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenCurrentUser$MH() {
        return RuntimeHelper.requireNonNull(constants$620.RegOpenCurrentUser$MH,"RegOpenCurrentUser");
    }
    public static int RegOpenCurrentUser ( int samDesired,  Addressable phkResult) {
        var mh$ = RegOpenCurrentUser$MH();
        try {
            return (int)mh$.invokeExact(samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDisablePredefinedCache$MH() {
        return RuntimeHelper.requireNonNull(constants$621.RegDisablePredefinedCache$MH,"RegDisablePredefinedCache");
    }
    public static int RegDisablePredefinedCache () {
        var mh$ = RegDisablePredefinedCache$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDisablePredefinedCacheEx$MH() {
        return RuntimeHelper.requireNonNull(constants$621.RegDisablePredefinedCacheEx$MH,"RegDisablePredefinedCacheEx");
    }
    public static int RegDisablePredefinedCacheEx () {
        var mh$ = RegDisablePredefinedCacheEx$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryA$MH() {
        return RuntimeHelper.requireNonNull(constants$621.RegConnectRegistryA$MH,"RegConnectRegistryA");
    }
    public static int RegConnectRegistryA ( Addressable lpMachineName,  Addressable hKey,  Addressable phkResult) {
        var mh$ = RegConnectRegistryA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryW$MH() {
        return RuntimeHelper.requireNonNull(constants$621.RegConnectRegistryW$MH,"RegConnectRegistryW");
    }
    public static int RegConnectRegistryW ( Addressable lpMachineName,  Addressable hKey,  Addressable phkResult) {
        var mh$ = RegConnectRegistryW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryExA$MH() {
        return RuntimeHelper.requireNonNull(constants$621.RegConnectRegistryExA$MH,"RegConnectRegistryExA");
    }
    public static int RegConnectRegistryExA ( Addressable lpMachineName,  Addressable hKey,  int Flags,  Addressable phkResult) {
        var mh$ = RegConnectRegistryExA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, Flags, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryExW$MH() {
        return RuntimeHelper.requireNonNull(constants$621.RegConnectRegistryExW$MH,"RegConnectRegistryExW");
    }
    public static int RegConnectRegistryExW ( Addressable lpMachineName,  Addressable hKey,  int Flags,  Addressable phkResult) {
        var mh$ = RegConnectRegistryExW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, Flags, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$622.RegCreateKeyA$MH,"RegCreateKeyA");
    }
    public static int RegCreateKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RegCreateKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$622.RegCreateKeyW$MH,"RegCreateKeyW");
    }
    public static int RegCreateKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RegCreateKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$622.RegCreateKeyExA$MH,"RegCreateKeyExA");
    }
    public static int RegCreateKeyExA ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition) {
        var mh$ = RegCreateKeyExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$622.RegCreateKeyExW$MH,"RegCreateKeyExW");
    }
    public static int RegCreateKeyExW ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition) {
        var mh$ = RegCreateKeyExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$622.RegCreateKeyTransactedA$MH,"RegCreateKeyTransactedA");
    }
    public static int RegCreateKeyTransactedA ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RegCreateKeyTransactedA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$622.RegCreateKeyTransactedW$MH,"RegCreateKeyTransactedW");
    }
    public static int RegCreateKeyTransactedW ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RegCreateKeyTransactedW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$623.RegDeleteKeyA$MH,"RegDeleteKeyA");
    }
    public static int RegDeleteKeyA ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegDeleteKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$623.RegDeleteKeyW$MH,"RegDeleteKeyW");
    }
    public static int RegDeleteKeyW ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegDeleteKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$623.RegDeleteKeyExA$MH,"RegDeleteKeyExA");
    }
    public static int RegDeleteKeyExA ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved) {
        var mh$ = RegDeleteKeyExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$623.RegDeleteKeyExW$MH,"RegDeleteKeyExW");
    }
    public static int RegDeleteKeyExW ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved) {
        var mh$ = RegDeleteKeyExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$623.RegDeleteKeyTransactedA$MH,"RegDeleteKeyTransactedA");
    }
    public static int RegDeleteKeyTransactedA ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved,  Addressable hTransaction,  Addressable pExtendedParameter) {
        var mh$ = RegDeleteKeyTransactedA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved, hTransaction, pExtendedParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$623.RegDeleteKeyTransactedW$MH,"RegDeleteKeyTransactedW");
    }
    public static int RegDeleteKeyTransactedW ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved,  Addressable hTransaction,  Addressable pExtendedParameter) {
        var mh$ = RegDeleteKeyTransactedW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved, hTransaction, pExtendedParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDisableReflectionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$624.RegDisableReflectionKey$MH,"RegDisableReflectionKey");
    }
    public static int RegDisableReflectionKey ( Addressable hBase) {
        var mh$ = RegDisableReflectionKey$MH();
        try {
            return (int)mh$.invokeExact(hBase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnableReflectionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$624.RegEnableReflectionKey$MH,"RegEnableReflectionKey");
    }
    public static int RegEnableReflectionKey ( Addressable hBase) {
        var mh$ = RegEnableReflectionKey$MH();
        try {
            return (int)mh$.invokeExact(hBase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryReflectionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$624.RegQueryReflectionKey$MH,"RegQueryReflectionKey");
    }
    public static int RegQueryReflectionKey ( Addressable hBase,  Addressable bIsReflectionDisabled) {
        var mh$ = RegQueryReflectionKey$MH();
        try {
            return (int)mh$.invokeExact(hBase, bIsReflectionDisabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$624.RegDeleteValueA$MH,"RegDeleteValueA");
    }
    public static int RegDeleteValueA ( Addressable hKey,  Addressable lpValueName) {
        var mh$ = RegDeleteValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$624.RegDeleteValueW$MH,"RegDeleteValueW");
    }
    public static int RegDeleteValueW ( Addressable hKey,  Addressable lpValueName) {
        var mh$ = RegDeleteValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$624.RegEnumKeyA$MH,"RegEnumKeyA");
    }
    public static int RegEnumKeyA ( Addressable hKey,  int dwIndex,  Addressable lpName,  int cchName) {
        var mh$ = RegEnumKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, cchName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$625.RegEnumKeyW$MH,"RegEnumKeyW");
    }
    public static int RegEnumKeyW ( Addressable hKey,  int dwIndex,  Addressable lpName,  int cchName) {
        var mh$ = RegEnumKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, cchName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$625.RegEnumKeyExA$MH,"RegEnumKeyExA");
    }
    public static int RegEnumKeyExA ( Addressable hKey,  int dwIndex,  Addressable lpName,  Addressable lpcchName,  Addressable lpReserved,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpftLastWriteTime) {
        var mh$ = RegEnumKeyExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, lpcchName, lpReserved, lpClass, lpcchClass, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$625.RegEnumKeyExW$MH,"RegEnumKeyExW");
    }
    public static int RegEnumKeyExW ( Addressable hKey,  int dwIndex,  Addressable lpName,  Addressable lpcchName,  Addressable lpReserved,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpftLastWriteTime) {
        var mh$ = RegEnumKeyExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, lpcchName, lpReserved, lpClass, lpcchClass, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$625.RegEnumValueA$MH,"RegEnumValueA");
    }
    public static int RegEnumValueA ( Addressable hKey,  int dwIndex,  Addressable lpValueName,  Addressable lpcchValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegEnumValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpValueName, lpcchValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$625.RegEnumValueW$MH,"RegEnumValueW");
    }
    public static int RegEnumValueW ( Addressable hKey,  int dwIndex,  Addressable lpValueName,  Addressable lpcchValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegEnumValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpValueName, lpcchValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegFlushKey$MH() {
        return RuntimeHelper.requireNonNull(constants$625.RegFlushKey$MH,"RegFlushKey");
    }
    public static int RegFlushKey ( Addressable hKey) {
        var mh$ = RegFlushKey$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegGetKeySecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$626.RegGetKeySecurity$MH,"RegGetKeySecurity");
    }
    public static int RegGetKeySecurity ( Addressable hKey,  int SecurityInformation,  Addressable pSecurityDescriptor,  Addressable lpcbSecurityDescriptor) {
        var mh$ = RegGetKeySecurity$MH();
        try {
            return (int)mh$.invokeExact(hKey, SecurityInformation, pSecurityDescriptor, lpcbSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$626.RegLoadKeyA$MH,"RegLoadKeyA");
    }
    public static int RegLoadKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpFile) {
        var mh$ = RegLoadKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$626.RegLoadKeyW$MH,"RegLoadKeyW");
    }
    public static int RegLoadKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpFile) {
        var mh$ = RegLoadKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegNotifyChangeKeyValue$MH() {
        return RuntimeHelper.requireNonNull(constants$626.RegNotifyChangeKeyValue$MH,"RegNotifyChangeKeyValue");
    }
    public static int RegNotifyChangeKeyValue ( Addressable hKey,  int bWatchSubtree,  int dwNotifyFilter,  Addressable hEvent,  int fAsynchronous) {
        var mh$ = RegNotifyChangeKeyValue$MH();
        try {
            return (int)mh$.invokeExact(hKey, bWatchSubtree, dwNotifyFilter, hEvent, fAsynchronous);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$626.RegOpenKeyA$MH,"RegOpenKeyA");
    }
    public static int RegOpenKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RegOpenKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$626.RegOpenKeyW$MH,"RegOpenKeyW");
    }
    public static int RegOpenKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RegOpenKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$627.RegOpenKeyExA$MH,"RegOpenKeyExA");
    }
    public static int RegOpenKeyExA ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult) {
        var mh$ = RegOpenKeyExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$627.RegOpenKeyExW$MH,"RegOpenKeyExW");
    }
    public static int RegOpenKeyExW ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult) {
        var mh$ = RegOpenKeyExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$627.RegOpenKeyTransactedA$MH,"RegOpenKeyTransactedA");
    }
    public static int RegOpenKeyTransactedA ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RegOpenKeyTransactedA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$627.RegOpenKeyTransactedW$MH,"RegOpenKeyTransactedW");
    }
    public static int RegOpenKeyTransactedW ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RegOpenKeyTransactedW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryInfoKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$627.RegQueryInfoKeyA$MH,"RegQueryInfoKeyA");
    }
    public static int RegQueryInfoKeyA ( Addressable hKey,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpReserved,  Addressable lpcSubKeys,  Addressable lpcbMaxSubKeyLen,  Addressable lpcbMaxClassLen,  Addressable lpcValues,  Addressable lpcbMaxValueNameLen,  Addressable lpcbMaxValueLen,  Addressable lpcbSecurityDescriptor,  Addressable lpftLastWriteTime) {
        var mh$ = RegQueryInfoKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpClass, lpcchClass, lpReserved, lpcSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues, lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryInfoKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$627.RegQueryInfoKeyW$MH,"RegQueryInfoKeyW");
    }
    public static int RegQueryInfoKeyW ( Addressable hKey,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpReserved,  Addressable lpcSubKeys,  Addressable lpcbMaxSubKeyLen,  Addressable lpcbMaxClassLen,  Addressable lpcValues,  Addressable lpcbMaxValueNameLen,  Addressable lpcbMaxValueLen,  Addressable lpcbSecurityDescriptor,  Addressable lpftLastWriteTime) {
        var mh$ = RegQueryInfoKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpClass, lpcchClass, lpReserved, lpcSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues, lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$628.RegQueryValueA$MH,"RegQueryValueA");
    }
    public static int RegQueryValueA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegQueryValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.RegQueryValueW$MH,"RegQueryValueW");
    }
    public static int RegQueryValueW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegQueryValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryMultipleValuesA$MH() {
        return RuntimeHelper.requireNonNull(constants$628.RegQueryMultipleValuesA$MH,"RegQueryMultipleValuesA");
    }
    public static int RegQueryMultipleValuesA ( Addressable hKey,  Addressable val_list,  int num_vals,  Addressable lpValueBuf,  Addressable ldwTotsize) {
        var mh$ = RegQueryMultipleValuesA$MH();
        try {
            return (int)mh$.invokeExact(hKey, val_list, num_vals, lpValueBuf, ldwTotsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryMultipleValuesW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.RegQueryMultipleValuesW$MH,"RegQueryMultipleValuesW");
    }
    public static int RegQueryMultipleValuesW ( Addressable hKey,  Addressable val_list,  int num_vals,  Addressable lpValueBuf,  Addressable ldwTotsize) {
        var mh$ = RegQueryMultipleValuesW$MH();
        try {
            return (int)mh$.invokeExact(hKey, val_list, num_vals, lpValueBuf, ldwTotsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueExA$MH() {
        return RuntimeHelper.requireNonNull(constants$628.RegQueryValueExA$MH,"RegQueryValueExA");
    }
    public static int RegQueryValueExA ( Addressable hKey,  Addressable lpValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegQueryValueExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueExW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.RegQueryValueExW$MH,"RegQueryValueExW");
    }
    public static int RegQueryValueExW ( Addressable hKey,  Addressable lpValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegQueryValueExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegReplaceKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$629.RegReplaceKeyA$MH,"RegReplaceKeyA");
    }
    public static int RegReplaceKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpNewFile,  Addressable lpOldFile) {
        var mh$ = RegReplaceKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpNewFile, lpOldFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegReplaceKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$629.RegReplaceKeyW$MH,"RegReplaceKeyW");
    }
    public static int RegReplaceKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpNewFile,  Addressable lpOldFile) {
        var mh$ = RegReplaceKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpNewFile, lpOldFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegRestoreKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$629.RegRestoreKeyA$MH,"RegRestoreKeyA");
    }
    public static int RegRestoreKeyA ( Addressable hKey,  Addressable lpFile,  int dwFlags) {
        var mh$ = RegRestoreKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegRestoreKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$629.RegRestoreKeyW$MH,"RegRestoreKeyW");
    }
    public static int RegRestoreKeyW ( Addressable hKey,  Addressable lpFile,  int dwFlags) {
        var mh$ = RegRestoreKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegRenameKey$MH() {
        return RuntimeHelper.requireNonNull(constants$629.RegRenameKey$MH,"RegRenameKey");
    }
    public static int RegRenameKey ( Addressable hKey,  Addressable lpSubKeyName,  Addressable lpNewKeyName) {
        var mh$ = RegRenameKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKeyName, lpNewKeyName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$629.RegSaveKeyA$MH,"RegSaveKeyA");
    }
    public static int RegSaveKeyA ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes) {
        var mh$ = RegSaveKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$630.RegSaveKeyW$MH,"RegSaveKeyW");
    }
    public static int RegSaveKeyW ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes) {
        var mh$ = RegSaveKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetKeySecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$630.RegSetKeySecurity$MH,"RegSetKeySecurity");
    }
    public static int RegSetKeySecurity ( Addressable hKey,  int SecurityInformation,  Addressable pSecurityDescriptor) {
        var mh$ = RegSetKeySecurity$MH();
        try {
            return (int)mh$.invokeExact(hKey, SecurityInformation, pSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$630.RegSetValueA$MH,"RegSetValueA");
    }
    public static int RegSetValueA ( Addressable hKey,  Addressable lpSubKey,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$630.RegSetValueW$MH,"RegSetValueW");
    }
    public static int RegSetValueW ( Addressable hKey,  Addressable lpSubKey,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueExA$MH() {
        return RuntimeHelper.requireNonNull(constants$630.RegSetValueExA$MH,"RegSetValueExA");
    }
    public static int RegSetValueExA ( Addressable hKey,  Addressable lpValueName,  int Reserved,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetValueExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, Reserved, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueExW$MH() {
        return RuntimeHelper.requireNonNull(constants$630.RegSetValueExW$MH,"RegSetValueExW");
    }
    public static int RegSetValueExW ( Addressable hKey,  Addressable lpValueName,  int Reserved,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetValueExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, Reserved, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegUnLoadKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$631.RegUnLoadKeyA$MH,"RegUnLoadKeyA");
    }
    public static int RegUnLoadKeyA ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegUnLoadKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegUnLoadKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$631.RegUnLoadKeyW$MH,"RegUnLoadKeyW");
    }
    public static int RegUnLoadKeyW ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegUnLoadKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$631.RegDeleteKeyValueA$MH,"RegDeleteKeyValueA");
    }
    public static int RegDeleteKeyValueA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName) {
        var mh$ = RegDeleteKeyValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$631.RegDeleteKeyValueW$MH,"RegDeleteKeyValueW");
    }
    public static int RegDeleteKeyValueW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName) {
        var mh$ = RegDeleteKeyValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetKeyValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$631.RegSetKeyValueA$MH,"RegSetKeyValueA");
    }
    public static int RegSetKeyValueA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetKeyValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetKeyValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$631.RegSetKeyValueW$MH,"RegSetKeyValueW");
    }
    public static int RegSetKeyValueW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetKeyValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteTreeA$MH() {
        return RuntimeHelper.requireNonNull(constants$632.RegDeleteTreeA$MH,"RegDeleteTreeA");
    }
    public static int RegDeleteTreeA ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegDeleteTreeA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteTreeW$MH() {
        return RuntimeHelper.requireNonNull(constants$632.RegDeleteTreeW$MH,"RegDeleteTreeW");
    }
    public static int RegDeleteTreeW ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegDeleteTreeW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCopyTreeA$MH() {
        return RuntimeHelper.requireNonNull(constants$632.RegCopyTreeA$MH,"RegCopyTreeA");
    }
    public static int RegCopyTreeA ( Addressable hKeySrc,  Addressable lpSubKey,  Addressable hKeyDest) {
        var mh$ = RegCopyTreeA$MH();
        try {
            return (int)mh$.invokeExact(hKeySrc, lpSubKey, hKeyDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegGetValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$632.RegGetValueA$MH,"RegGetValueA");
    }
    public static int RegGetValueA ( Addressable hkey,  Addressable lpSubKey,  Addressable lpValue,  int dwFlags,  Addressable pdwType,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RegGetValueA$MH();
        try {
            return (int)mh$.invokeExact(hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegGetValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$632.RegGetValueW$MH,"RegGetValueW");
    }
    public static int RegGetValueW ( Addressable hkey,  Addressable lpSubKey,  Addressable lpValue,  int dwFlags,  Addressable pdwType,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RegGetValueW$MH();
        try {
            return (int)mh$.invokeExact(hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCopyTreeW$MH() {
        return RuntimeHelper.requireNonNull(constants$632.RegCopyTreeW$MH,"RegCopyTreeW");
    }
    public static int RegCopyTreeW ( Addressable hKeySrc,  Addressable lpSubKey,  Addressable hKeyDest) {
        var mh$ = RegCopyTreeW$MH();
        try {
            return (int)mh$.invokeExact(hKeySrc, lpSubKey, hKeyDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadMUIStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$633.RegLoadMUIStringA$MH,"RegLoadMUIStringA");
    }
    public static int RegLoadMUIStringA ( Addressable hKey,  Addressable pszValue,  Addressable pszOutBuf,  int cbOutBuf,  Addressable pcbData,  int Flags,  Addressable pszDirectory) {
        var mh$ = RegLoadMUIStringA$MH();
        try {
            return (int)mh$.invokeExact(hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadMUIStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$633.RegLoadMUIStringW$MH,"RegLoadMUIStringW");
    }
    public static int RegLoadMUIStringW ( Addressable hKey,  Addressable pszValue,  Addressable pszOutBuf,  int cbOutBuf,  Addressable pcbData,  int Flags,  Addressable pszDirectory) {
        var mh$ = RegLoadMUIStringW$MH();
        try {
            return (int)mh$.invokeExact(hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadAppKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$633.RegLoadAppKeyA$MH,"RegLoadAppKeyA");
    }
    public static int RegLoadAppKeyA ( Addressable lpFile,  Addressable phkResult,  int samDesired,  int dwOptions,  int Reserved) {
        var mh$ = RegLoadAppKeyA$MH();
        try {
            return (int)mh$.invokeExact(lpFile, phkResult, samDesired, dwOptions, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadAppKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$633.RegLoadAppKeyW$MH,"RegLoadAppKeyW");
    }
    public static int RegLoadAppKeyW ( Addressable lpFile,  Addressable phkResult,  int samDesired,  int dwOptions,  int Reserved) {
        var mh$ = RegLoadAppKeyW$MH();
        try {
            return (int)mh$.invokeExact(lpFile, phkResult, samDesired, dwOptions, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownA$MH() {
        return RuntimeHelper.requireNonNull(constants$633.InitiateSystemShutdownA$MH,"InitiateSystemShutdownA");
    }
    public static int InitiateSystemShutdownA ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown) {
        var mh$ = InitiateSystemShutdownA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownW$MH() {
        return RuntimeHelper.requireNonNull(constants$633.InitiateSystemShutdownW$MH,"InitiateSystemShutdownW");
    }
    public static int InitiateSystemShutdownW ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown) {
        var mh$ = InitiateSystemShutdownW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortSystemShutdownA$MH() {
        return RuntimeHelper.requireNonNull(constants$634.AbortSystemShutdownA$MH,"AbortSystemShutdownA");
    }
    public static int AbortSystemShutdownA ( Addressable lpMachineName) {
        var mh$ = AbortSystemShutdownA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortSystemShutdownW$MH() {
        return RuntimeHelper.requireNonNull(constants$634.AbortSystemShutdownW$MH,"AbortSystemShutdownW");
    }
    public static int AbortSystemShutdownW ( Addressable lpMachineName) {
        var mh$ = AbortSystemShutdownW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownExA$MH() {
        return RuntimeHelper.requireNonNull(constants$634.InitiateSystemShutdownExA$MH,"InitiateSystemShutdownExA");
    }
    public static int InitiateSystemShutdownExA ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown,  int dwReason) {
        var mh$ = InitiateSystemShutdownExA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownExW$MH() {
        return RuntimeHelper.requireNonNull(constants$634.InitiateSystemShutdownExW$MH,"InitiateSystemShutdownExW");
    }
    public static int InitiateSystemShutdownExW ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown,  int dwReason) {
        var mh$ = InitiateSystemShutdownExW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateShutdownA$MH() {
        return RuntimeHelper.requireNonNull(constants$634.InitiateShutdownA$MH,"InitiateShutdownA");
    }
    public static int InitiateShutdownA ( Addressable lpMachineName,  Addressable lpMessage,  int dwGracePeriod,  int dwShutdownFlags,  int dwReason) {
        var mh$ = InitiateShutdownA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateShutdownW$MH() {
        return RuntimeHelper.requireNonNull(constants$634.InitiateShutdownW$MH,"InitiateShutdownW");
    }
    public static int InitiateShutdownW ( Addressable lpMachineName,  Addressable lpMessage,  int dwGracePeriod,  int dwShutdownFlags,  int dwReason) {
        var mh$ = InitiateShutdownW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckForHiberboot$MH() {
        return RuntimeHelper.requireNonNull(constants$635.CheckForHiberboot$MH,"CheckForHiberboot");
    }
    public static int CheckForHiberboot ( Addressable pHiberboot,  byte bClearFlag) {
        var mh$ = CheckForHiberboot$MH();
        try {
            return (int)mh$.invokeExact(pHiberboot, bClearFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$635.RegSaveKeyExA$MH,"RegSaveKeyExA");
    }
    public static int RegSaveKeyExA ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes,  int Flags) {
        var mh$ = RegSaveKeyExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$635.RegSaveKeyExW$MH,"RegSaveKeyExW");
    }
    public static int RegSaveKeyExW ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes,  int Flags) {
        var mh$ = RegSaveKeyExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPNETRESOURCEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNETRESOURCEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNETRESOURCE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetAddConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$635.WNetAddConnectionA$MH,"WNetAddConnectionA");
    }
    public static int WNetAddConnectionA ( Addressable lpRemoteName,  Addressable lpPassword,  Addressable lpLocalName) {
        var mh$ = WNetAddConnectionA$MH();
        try {
            return (int)mh$.invokeExact(lpRemoteName, lpPassword, lpLocalName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$635.WNetAddConnectionW$MH,"WNetAddConnectionW");
    }
    public static int WNetAddConnectionW ( Addressable lpRemoteName,  Addressable lpPassword,  Addressable lpLocalName) {
        var mh$ = WNetAddConnectionW$MH();
        try {
            return (int)mh$.invokeExact(lpRemoteName, lpPassword, lpLocalName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection2A$MH() {
        return RuntimeHelper.requireNonNull(constants$635.WNetAddConnection2A$MH,"WNetAddConnection2A");
    }
    public static int WNetAddConnection2A ( Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = WNetAddConnection2A$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection2W$MH() {
        return RuntimeHelper.requireNonNull(constants$636.WNetAddConnection2W$MH,"WNetAddConnection2W");
    }
    public static int WNetAddConnection2W ( Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = WNetAddConnection2W$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection3A$MH() {
        return RuntimeHelper.requireNonNull(constants$636.WNetAddConnection3A$MH,"WNetAddConnection3A");
    }
    public static int WNetAddConnection3A ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = WNetAddConnection3A$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection3W$MH() {
        return RuntimeHelper.requireNonNull(constants$636.WNetAddConnection3W$MH,"WNetAddConnection3W");
    }
    public static int WNetAddConnection3W ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = WNetAddConnection3W$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection4A$MH() {
        return RuntimeHelper.requireNonNull(constants$636.WNetAddConnection4A$MH,"WNetAddConnection4A");
    }
    public static int WNetAddConnection4A ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions) {
        var mh$ = WNetAddConnection4A$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection4W$MH() {
        return RuntimeHelper.requireNonNull(constants$636.WNetAddConnection4W$MH,"WNetAddConnection4W");
    }
    public static int WNetAddConnection4W ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions) {
        var mh$ = WNetAddConnection4W$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$636.WNetCancelConnectionA$MH,"WNetCancelConnectionA");
    }
    public static int WNetCancelConnectionA ( Addressable lpName,  int fForce) {
        var mh$ = WNetCancelConnectionA$MH();
        try {
            return (int)mh$.invokeExact(lpName, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$637.WNetCancelConnectionW$MH,"WNetCancelConnectionW");
    }
    public static int WNetCancelConnectionW ( Addressable lpName,  int fForce) {
        var mh$ = WNetCancelConnectionW$MH();
        try {
            return (int)mh$.invokeExact(lpName, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnection2A$MH() {
        return RuntimeHelper.requireNonNull(constants$637.WNetCancelConnection2A$MH,"WNetCancelConnection2A");
    }
    public static int WNetCancelConnection2A ( Addressable lpName,  int dwFlags,  int fForce) {
        var mh$ = WNetCancelConnection2A$MH();
        try {
            return (int)mh$.invokeExact(lpName, dwFlags, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnection2W$MH() {
        return RuntimeHelper.requireNonNull(constants$637.WNetCancelConnection2W$MH,"WNetCancelConnection2W");
    }
    public static int WNetCancelConnection2W ( Addressable lpName,  int dwFlags,  int fForce) {
        var mh$ = WNetCancelConnection2W$MH();
        try {
            return (int)mh$.invokeExact(lpName, dwFlags, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$637.WNetGetConnectionA$MH,"WNetGetConnectionA");
    }
    public static int WNetGetConnectionA ( Addressable lpLocalName,  Addressable lpRemoteName,  Addressable lpnLength) {
        var mh$ = WNetGetConnectionA$MH();
        try {
            return (int)mh$.invokeExact(lpLocalName, lpRemoteName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$637.WNetGetConnectionW$MH,"WNetGetConnectionW");
    }
    public static int WNetGetConnectionW ( Addressable lpLocalName,  Addressable lpRemoteName,  Addressable lpnLength) {
        var mh$ = WNetGetConnectionW$MH();
        try {
            return (int)mh$.invokeExact(lpLocalName, lpRemoteName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetRestoreSingleConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$637.WNetRestoreSingleConnectionW$MH,"WNetRestoreSingleConnectionW");
    }
    public static int WNetRestoreSingleConnectionW ( Addressable hwndParent,  Addressable lpDevice,  int fUseUI) {
        var mh$ = WNetRestoreSingleConnectionW$MH();
        try {
            return (int)mh$.invokeExact(hwndParent, lpDevice, fUseUI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$638.WNetUseConnectionA$MH,"WNetUseConnectionA");
    }
    public static int WNetUseConnectionA ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserId,  int dwFlags,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = WNetUseConnectionA$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserId, dwFlags, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$638.WNetUseConnectionW$MH,"WNetUseConnectionW");
    }
    public static int WNetUseConnectionW ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserId,  int dwFlags,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = WNetUseConnectionW$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserId, dwFlags, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnection4A$MH() {
        return RuntimeHelper.requireNonNull(constants$638.WNetUseConnection4A$MH,"WNetUseConnection4A");
    }
    public static int WNetUseConnection4A ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = WNetUseConnection4A$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnection4W$MH() {
        return RuntimeHelper.requireNonNull(constants$638.WNetUseConnection4W$MH,"WNetUseConnection4W");
    }
    public static int WNetUseConnection4W ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = WNetUseConnection4W$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetConnectionDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$638.WNetConnectionDialog$MH,"WNetConnectionDialog");
    }
    public static int WNetConnectionDialog ( Addressable hwnd,  int dwType) {
        var mh$ = WNetConnectionDialog$MH();
        try {
            return (int)mh$.invokeExact(hwnd, dwType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetDisconnectDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$638.WNetDisconnectDialog$MH,"WNetDisconnectDialog");
    }
    public static int WNetDisconnectDialog ( Addressable hwnd,  int dwType) {
        var mh$ = WNetDisconnectDialog$MH();
        try {
            return (int)mh$.invokeExact(hwnd, dwType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPCONNECTDLGSTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCONNECTDLGSTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCONNECTDLGSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetConnectionDialog1A$MH() {
        return RuntimeHelper.requireNonNull(constants$639.WNetConnectionDialog1A$MH,"WNetConnectionDialog1A");
    }
    public static int WNetConnectionDialog1A ( Addressable lpConnDlgStruct) {
        var mh$ = WNetConnectionDialog1A$MH();
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetConnectionDialog1W$MH() {
        return RuntimeHelper.requireNonNull(constants$639.WNetConnectionDialog1W$MH,"WNetConnectionDialog1W");
    }
    public static int WNetConnectionDialog1W ( Addressable lpConnDlgStruct) {
        var mh$ = WNetConnectionDialog1W$MH();
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDISCDLGSTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISCDLGSTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISCDLGSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetDisconnectDialog1A$MH() {
        return RuntimeHelper.requireNonNull(constants$639.WNetDisconnectDialog1A$MH,"WNetDisconnectDialog1A");
    }
    public static int WNetDisconnectDialog1A ( Addressable lpConnDlgStruct) {
        var mh$ = WNetDisconnectDialog1A$MH();
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetDisconnectDialog1W$MH() {
        return RuntimeHelper.requireNonNull(constants$639.WNetDisconnectDialog1W$MH,"WNetDisconnectDialog1W");
    }
    public static int WNetDisconnectDialog1W ( Addressable lpConnDlgStruct) {
        var mh$ = WNetDisconnectDialog1W$MH();
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetOpenEnumA$MH() {
        return RuntimeHelper.requireNonNull(constants$639.WNetOpenEnumA$MH,"WNetOpenEnumA");
    }
    public static int WNetOpenEnumA ( int dwScope,  int dwType,  int dwUsage,  Addressable lpNetResource,  Addressable lphEnum) {
        var mh$ = WNetOpenEnumA$MH();
        try {
            return (int)mh$.invokeExact(dwScope, dwType, dwUsage, lpNetResource, lphEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetOpenEnumW$MH() {
        return RuntimeHelper.requireNonNull(constants$639.WNetOpenEnumW$MH,"WNetOpenEnumW");
    }
    public static int WNetOpenEnumW ( int dwScope,  int dwType,  int dwUsage,  Addressable lpNetResource,  Addressable lphEnum) {
        var mh$ = WNetOpenEnumW$MH();
        try {
            return (int)mh$.invokeExact(dwScope, dwType, dwUsage, lpNetResource, lphEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetEnumResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$640.WNetEnumResourceA$MH,"WNetEnumResourceA");
    }
    public static int WNetEnumResourceA ( Addressable hEnum,  Addressable lpcCount,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = WNetEnumResourceA$MH();
        try {
            return (int)mh$.invokeExact(hEnum, lpcCount, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetEnumResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$640.WNetEnumResourceW$MH,"WNetEnumResourceW");
    }
    public static int WNetEnumResourceW ( Addressable hEnum,  Addressable lpcCount,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = WNetEnumResourceW$MH();
        try {
            return (int)mh$.invokeExact(hEnum, lpcCount, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCloseEnum$MH() {
        return RuntimeHelper.requireNonNull(constants$640.WNetCloseEnum$MH,"WNetCloseEnum");
    }
    public static int WNetCloseEnum ( Addressable hEnum) {
        var mh$ = WNetCloseEnum$MH();
        try {
            return (int)mh$.invokeExact(hEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceParentA$MH() {
        return RuntimeHelper.requireNonNull(constants$640.WNetGetResourceParentA$MH,"WNetGetResourceParentA");
    }
    public static int WNetGetResourceParentA ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer) {
        var mh$ = WNetGetResourceParentA$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceParentW$MH() {
        return RuntimeHelper.requireNonNull(constants$640.WNetGetResourceParentW$MH,"WNetGetResourceParentW");
    }
    public static int WNetGetResourceParentW ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer) {
        var mh$ = WNetGetResourceParentW$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$640.WNetGetResourceInformationA$MH,"WNetGetResourceInformationA");
    }
    public static int WNetGetResourceInformationA ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer,  Addressable lplpSystem) {
        var mh$ = WNetGetResourceInformationA$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer, lplpSystem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$641.WNetGetResourceInformationW$MH,"WNetGetResourceInformationW");
    }
    public static int WNetGetResourceInformationW ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer,  Addressable lplpSystem) {
        var mh$ = WNetGetResourceInformationW$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer, lplpSystem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPUNIVERSAL_NAME_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUNIVERSAL_NAME_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUNIVERSAL_NAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREMOTE_NAME_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREMOTE_NAME_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREMOTE_NAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetGetUniversalNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$641.WNetGetUniversalNameA$MH,"WNetGetUniversalNameA");
    }
    public static int WNetGetUniversalNameA ( Addressable lpLocalPath,  int dwInfoLevel,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = WNetGetUniversalNameA$MH();
        try {
            return (int)mh$.invokeExact(lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetUniversalNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$641.WNetGetUniversalNameW$MH,"WNetGetUniversalNameW");
    }
    public static int WNetGetUniversalNameW ( Addressable lpLocalPath,  int dwInfoLevel,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = WNetGetUniversalNameW$MH();
        try {
            return (int)mh$.invokeExact(lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetUserA$MH() {
        return RuntimeHelper.requireNonNull(constants$641.WNetGetUserA$MH,"WNetGetUserA");
    }
    public static int WNetGetUserA ( Addressable lpName,  Addressable lpUserName,  Addressable lpnLength) {
        var mh$ = WNetGetUserA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpUserName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetUserW$MH() {
        return RuntimeHelper.requireNonNull(constants$641.WNetGetUserW$MH,"WNetGetUserW");
    }
    public static int WNetGetUserW ( Addressable lpName,  Addressable lpUserName,  Addressable lpnLength) {
        var mh$ = WNetGetUserW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpUserName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetProviderNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$641.WNetGetProviderNameA$MH,"WNetGetProviderNameA");
    }
    public static int WNetGetProviderNameA ( int dwNetType,  Addressable lpProviderName,  Addressable lpBufferSize) {
        var mh$ = WNetGetProviderNameA$MH();
        try {
            return (int)mh$.invokeExact(dwNetType, lpProviderName, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetProviderNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$642.WNetGetProviderNameW$MH,"WNetGetProviderNameW");
    }
    public static int WNetGetProviderNameW ( int dwNetType,  Addressable lpProviderName,  Addressable lpBufferSize) {
        var mh$ = WNetGetProviderNameW$MH();
        try {
            return (int)mh$.invokeExact(dwNetType, lpProviderName, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPNETINFOSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetGetNetworkInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$642.WNetGetNetworkInformationA$MH,"WNetGetNetworkInformationA");
    }
    public static int WNetGetNetworkInformationA ( Addressable lpProvider,  Addressable lpNetInfoStruct) {
        var mh$ = WNetGetNetworkInformationA$MH();
        try {
            return (int)mh$.invokeExact(lpProvider, lpNetInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetNetworkInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$642.WNetGetNetworkInformationW$MH,"WNetGetNetworkInformationW");
    }
    public static int WNetGetNetworkInformationW ( Addressable lpProvider,  Addressable lpNetInfoStruct) {
        var mh$ = WNetGetNetworkInformationW$MH();
        try {
            return (int)mh$.invokeExact(lpProvider, lpNetInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetLastErrorA$MH() {
        return RuntimeHelper.requireNonNull(constants$642.WNetGetLastErrorA$MH,"WNetGetLastErrorA");
    }
    public static int WNetGetLastErrorA ( Addressable lpError,  Addressable lpErrorBuf,  int nErrorBufSize,  Addressable lpNameBuf,  int nNameBufSize) {
        var mh$ = WNetGetLastErrorA$MH();
        try {
            return (int)mh$.invokeExact(lpError, lpErrorBuf, nErrorBufSize, lpNameBuf, nNameBufSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetLastErrorW$MH() {
        return RuntimeHelper.requireNonNull(constants$642.WNetGetLastErrorW$MH,"WNetGetLastErrorW");
    }
    public static int WNetGetLastErrorW ( Addressable lpError,  Addressable lpErrorBuf,  int nErrorBufSize,  Addressable lpNameBuf,  int nNameBufSize) {
        var mh$ = WNetGetLastErrorW$MH();
        try {
            return (int)mh$.invokeExact(lpError, lpErrorBuf, nErrorBufSize, lpNameBuf, nNameBufSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPNETCONNECTINFOSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle MultinetGetConnectionPerformanceA$MH() {
        return RuntimeHelper.requireNonNull(constants$642.MultinetGetConnectionPerformanceA$MH,"MultinetGetConnectionPerformanceA");
    }
    public static int MultinetGetConnectionPerformanceA ( Addressable lpNetResource,  Addressable lpNetConnectInfoStruct) {
        var mh$ = MultinetGetConnectionPerformanceA$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpNetConnectInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MultinetGetConnectionPerformanceW$MH() {
        return RuntimeHelper.requireNonNull(constants$643.MultinetGetConnectionPerformanceW$MH,"MultinetGetConnectionPerformanceW");
    }
    public static int MultinetGetConnectionPerformanceW ( Addressable lpNetResource,  Addressable lpNetConnectInfoStruct) {
        var mh$ = MultinetGetConnectionPerformanceW$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpNetConnectInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeSetQualityOfService$MH() {
        return RuntimeHelper.requireNonNull(constants$643.DdeSetQualityOfService$MH,"DdeSetQualityOfService");
    }
    public static int DdeSetQualityOfService ( Addressable hwndClient,  Addressable pqosNew,  Addressable pqosPrev) {
        var mh$ = DdeSetQualityOfService$MH();
        try {
            return (int)mh$.invokeExact(hwndClient, pqosNew, pqosPrev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImpersonateDdeClientWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$643.ImpersonateDdeClientWindow$MH,"ImpersonateDdeClientWindow");
    }
    public static int ImpersonateDdeClientWindow ( Addressable hWndClient,  Addressable hWndServer) {
        var mh$ = ImpersonateDdeClientWindow$MH();
        try {
            return (int)mh$.invokeExact(hWndClient, hWndServer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PackDDElParam$MH() {
        return RuntimeHelper.requireNonNull(constants$643.PackDDElParam$MH,"PackDDElParam");
    }
    public static long PackDDElParam ( int msg,  long uiLo,  long uiHi) {
        var mh$ = PackDDElParam$MH();
        try {
            return (long)mh$.invokeExact(msg, uiLo, uiHi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnpackDDElParam$MH() {
        return RuntimeHelper.requireNonNull(constants$643.UnpackDDElParam$MH,"UnpackDDElParam");
    }
    public static int UnpackDDElParam ( int msg,  long lParam,  Addressable puiLo,  Addressable puiHi) {
        var mh$ = UnpackDDElParam$MH();
        try {
            return (int)mh$.invokeExact(msg, lParam, puiLo, puiHi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeDDElParam$MH() {
        return RuntimeHelper.requireNonNull(constants$643.FreeDDElParam$MH,"FreeDDElParam");
    }
    public static int FreeDDElParam ( int msg,  long lParam) {
        var mh$ = FreeDDElParam$MH();
        try {
            return (int)mh$.invokeExact(msg, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReuseDDElParam$MH() {
        return RuntimeHelper.requireNonNull(constants$644.ReuseDDElParam$MH,"ReuseDDElParam");
    }
    public static long ReuseDDElParam ( long lParam,  int msgIn,  int msgOut,  long uiLo,  long uiHi) {
        var mh$ = ReuseDDElParam$MH();
        try {
            return (long)mh$.invokeExact(lParam, msgIn, msgOut, uiLo, uiHi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCONVLIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCONV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HSZ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HDDEDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHSZPAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONVCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONVINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DdeInitializeA$MH() {
        return RuntimeHelper.requireNonNull(constants$644.DdeInitializeA$MH,"DdeInitializeA");
    }
    public static int DdeInitializeA ( Addressable pidInst,  Addressable pfnCallback,  int afCmd,  int ulRes) {
        var mh$ = DdeInitializeA$MH();
        try {
            return (int)mh$.invokeExact(pidInst, pfnCallback, afCmd, ulRes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeInitializeW$MH() {
        return RuntimeHelper.requireNonNull(constants$645.DdeInitializeW$MH,"DdeInitializeW");
    }
    public static int DdeInitializeW ( Addressable pidInst,  Addressable pfnCallback,  int afCmd,  int ulRes) {
        var mh$ = DdeInitializeW$MH();
        try {
            return (int)mh$.invokeExact(pidInst, pfnCallback, afCmd, ulRes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeUninitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$645.DdeUninitialize$MH,"DdeUninitialize");
    }
    public static int DdeUninitialize ( int idInst) {
        var mh$ = DdeUninitialize$MH();
        try {
            return (int)mh$.invokeExact(idInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeConnectList$MH() {
        return RuntimeHelper.requireNonNull(constants$645.DdeConnectList$MH,"DdeConnectList");
    }
    public static MemoryAddress DdeConnectList ( int idInst,  Addressable hszService,  Addressable hszTopic,  Addressable hConvList,  Addressable pCC) {
        var mh$ = DdeConnectList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, hszService, hszTopic, hConvList, pCC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeQueryNextServer$MH() {
        return RuntimeHelper.requireNonNull(constants$645.DdeQueryNextServer$MH,"DdeQueryNextServer");
    }
    public static MemoryAddress DdeQueryNextServer ( Addressable hConvList,  Addressable hConvPrev) {
        var mh$ = DdeQueryNextServer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hConvList, hConvPrev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeDisconnectList$MH() {
        return RuntimeHelper.requireNonNull(constants$645.DdeDisconnectList$MH,"DdeDisconnectList");
    }
    public static int DdeDisconnectList ( Addressable hConvList) {
        var mh$ = DdeDisconnectList$MH();
        try {
            return (int)mh$.invokeExact(hConvList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeConnect$MH() {
        return RuntimeHelper.requireNonNull(constants$645.DdeConnect$MH,"DdeConnect");
    }
    public static MemoryAddress DdeConnect ( int idInst,  Addressable hszService,  Addressable hszTopic,  Addressable pCC) {
        var mh$ = DdeConnect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, hszService, hszTopic, pCC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeDisconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$646.DdeDisconnect$MH,"DdeDisconnect");
    }
    public static int DdeDisconnect ( Addressable hConv) {
        var mh$ = DdeDisconnect$MH();
        try {
            return (int)mh$.invokeExact(hConv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeReconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$646.DdeReconnect$MH,"DdeReconnect");
    }
    public static MemoryAddress DdeReconnect ( Addressable hConv) {
        var mh$ = DdeReconnect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hConv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeQueryConvInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$646.DdeQueryConvInfo$MH,"DdeQueryConvInfo");
    }
    public static int DdeQueryConvInfo ( Addressable hConv,  int idTransaction,  Addressable pConvInfo) {
        var mh$ = DdeQueryConvInfo$MH();
        try {
            return (int)mh$.invokeExact(hConv, idTransaction, pConvInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeSetUserHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$646.DdeSetUserHandle$MH,"DdeSetUserHandle");
    }
    public static int DdeSetUserHandle ( Addressable hConv,  int id,  long hUser) {
        var mh$ = DdeSetUserHandle$MH();
        try {
            return (int)mh$.invokeExact(hConv, id, hUser);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeAbandonTransaction$MH() {
        return RuntimeHelper.requireNonNull(constants$646.DdeAbandonTransaction$MH,"DdeAbandonTransaction");
    }
    public static int DdeAbandonTransaction ( int idInst,  Addressable hConv,  int idTransaction) {
        var mh$ = DdeAbandonTransaction$MH();
        try {
            return (int)mh$.invokeExact(idInst, hConv, idTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdePostAdvise$MH() {
        return RuntimeHelper.requireNonNull(constants$646.DdePostAdvise$MH,"DdePostAdvise");
    }
    public static int DdePostAdvise ( int idInst,  Addressable hszTopic,  Addressable hszItem) {
        var mh$ = DdePostAdvise$MH();
        try {
            return (int)mh$.invokeExact(idInst, hszTopic, hszItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeEnableCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$647.DdeEnableCallback$MH,"DdeEnableCallback");
    }
    public static int DdeEnableCallback ( int idInst,  Addressable hConv,  int wCmd) {
        var mh$ = DdeEnableCallback$MH();
        try {
            return (int)mh$.invokeExact(idInst, hConv, wCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeImpersonateClient$MH() {
        return RuntimeHelper.requireNonNull(constants$647.DdeImpersonateClient$MH,"DdeImpersonateClient");
    }
    public static int DdeImpersonateClient ( Addressable hConv) {
        var mh$ = DdeImpersonateClient$MH();
        try {
            return (int)mh$.invokeExact(hConv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeNameService$MH() {
        return RuntimeHelper.requireNonNull(constants$647.DdeNameService$MH,"DdeNameService");
    }
    public static MemoryAddress DdeNameService ( int idInst,  Addressable hsz1,  Addressable hsz2,  int afCmd) {
        var mh$ = DdeNameService$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, hsz1, hsz2, afCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeClientTransaction$MH() {
        return RuntimeHelper.requireNonNull(constants$647.DdeClientTransaction$MH,"DdeClientTransaction");
    }
    public static MemoryAddress DdeClientTransaction ( Addressable pData,  int cbData,  Addressable hConv,  Addressable hszItem,  int wFmt,  int wType,  int dwTimeout,  Addressable pdwResult) {
        var mh$ = DdeClientTransaction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pData, cbData, hConv, hszItem, wFmt, wType, dwTimeout, pdwResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeCreateDataHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$647.DdeCreateDataHandle$MH,"DdeCreateDataHandle");
    }
    public static MemoryAddress DdeCreateDataHandle ( int idInst,  Addressable pSrc,  int cb,  int cbOff,  Addressable hszItem,  int wFmt,  int afCmd) {
        var mh$ = DdeCreateDataHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, pSrc, cb, cbOff, hszItem, wFmt, afCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeAddData$MH() {
        return RuntimeHelper.requireNonNull(constants$647.DdeAddData$MH,"DdeAddData");
    }
    public static MemoryAddress DdeAddData ( Addressable hData,  Addressable pSrc,  int cb,  int cbOff) {
        var mh$ = DdeAddData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hData, pSrc, cb, cbOff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeGetData$MH() {
        return RuntimeHelper.requireNonNull(constants$648.DdeGetData$MH,"DdeGetData");
    }
    public static int DdeGetData ( Addressable hData,  Addressable pDst,  int cbMax,  int cbOff) {
        var mh$ = DdeGetData$MH();
        try {
            return (int)mh$.invokeExact(hData, pDst, cbMax, cbOff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeAccessData$MH() {
        return RuntimeHelper.requireNonNull(constants$648.DdeAccessData$MH,"DdeAccessData");
    }
    public static MemoryAddress DdeAccessData ( Addressable hData,  Addressable pcbDataSize) {
        var mh$ = DdeAccessData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hData, pcbDataSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeUnaccessData$MH() {
        return RuntimeHelper.requireNonNull(constants$648.DdeUnaccessData$MH,"DdeUnaccessData");
    }
    public static int DdeUnaccessData ( Addressable hData) {
        var mh$ = DdeUnaccessData$MH();
        try {
            return (int)mh$.invokeExact(hData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeFreeDataHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$648.DdeFreeDataHandle$MH,"DdeFreeDataHandle");
    }
    public static int DdeFreeDataHandle ( Addressable hData) {
        var mh$ = DdeFreeDataHandle$MH();
        try {
            return (int)mh$.invokeExact(hData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeGetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$648.DdeGetLastError$MH,"DdeGetLastError");
    }
    public static int DdeGetLastError ( int idInst) {
        var mh$ = DdeGetLastError$MH();
        try {
            return (int)mh$.invokeExact(idInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeCreateStringHandleA$MH() {
        return RuntimeHelper.requireNonNull(constants$648.DdeCreateStringHandleA$MH,"DdeCreateStringHandleA");
    }
    public static MemoryAddress DdeCreateStringHandleA ( int idInst,  Addressable psz,  int iCodePage) {
        var mh$ = DdeCreateStringHandleA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, psz, iCodePage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeCreateStringHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$649.DdeCreateStringHandleW$MH,"DdeCreateStringHandleW");
    }
    public static MemoryAddress DdeCreateStringHandleW ( int idInst,  Addressable psz,  int iCodePage) {
        var mh$ = DdeCreateStringHandleW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, psz, iCodePage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeQueryStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$649.DdeQueryStringA$MH,"DdeQueryStringA");
    }
    public static int DdeQueryStringA ( int idInst,  Addressable hsz,  Addressable psz,  int cchMax,  int iCodePage) {
        var mh$ = DdeQueryStringA$MH();
        try {
            return (int)mh$.invokeExact(idInst, hsz, psz, cchMax, iCodePage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeQueryStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$649.DdeQueryStringW$MH,"DdeQueryStringW");
    }
    public static int DdeQueryStringW ( int idInst,  Addressable hsz,  Addressable psz,  int cchMax,  int iCodePage) {
        var mh$ = DdeQueryStringW$MH();
        try {
            return (int)mh$.invokeExact(idInst, hsz, psz, cchMax, iCodePage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeFreeStringHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$649.DdeFreeStringHandle$MH,"DdeFreeStringHandle");
    }
    public static int DdeFreeStringHandle ( int idInst,  Addressable hsz) {
        var mh$ = DdeFreeStringHandle$MH();
        try {
            return (int)mh$.invokeExact(idInst, hsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeKeepStringHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$649.DdeKeepStringHandle$MH,"DdeKeepStringHandle");
    }
    public static int DdeKeepStringHandle ( int idInst,  Addressable hsz) {
        var mh$ = DdeKeepStringHandle$MH();
        try {
            return (int)mh$.invokeExact(idInst, hsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeCmpStringHandles$MH() {
        return RuntimeHelper.requireNonNull(constants$649.DdeCmpStringHandles$MH,"DdeCmpStringHandles");
    }
    public static int DdeCmpStringHandles ( Addressable hsz1,  Addressable hsz2) {
        var mh$ = DdeCmpStringHandles$MH();
        try {
            return (int)mh$.invokeExact(hsz1, hsz2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PDDEML_MSG_HOOK_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONMSGSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONCBSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONHSZSTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONHSZSTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONHSZSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONERRSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONLINKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONCONVSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LZStart$MH() {
        return RuntimeHelper.requireNonNull(constants$650.LZStart$MH,"LZStart");
    }
    public static int LZStart () {
        var mh$ = LZStart$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZDone$MH() {
        return RuntimeHelper.requireNonNull(constants$650.LZDone$MH,"LZDone");
    }
    public static void LZDone () {
        var mh$ = LZDone$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyLZFile$MH() {
        return RuntimeHelper.requireNonNull(constants$650.CopyLZFile$MH,"CopyLZFile");
    }
    public static int CopyLZFile ( int hfSource,  int hfDest) {
        var mh$ = CopyLZFile$MH();
        try {
            return (int)mh$.invokeExact(hfSource, hfDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$650.LZCopy$MH,"LZCopy");
    }
    public static int LZCopy ( int hfSource,  int hfDest) {
        var mh$ = LZCopy$MH();
        try {
            return (int)mh$.invokeExact(hfSource, hfDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZInit$MH() {
        return RuntimeHelper.requireNonNull(constants$650.LZInit$MH,"LZInit");
    }
    public static int LZInit ( int hfSource) {
        var mh$ = LZInit$MH();
        try {
            return (int)mh$.invokeExact(hfSource);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExpandedNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$650.GetExpandedNameA$MH,"GetExpandedNameA");
    }
    public static int GetExpandedNameA ( Addressable lpszSource,  Addressable lpszBuffer) {
        var mh$ = GetExpandedNameA$MH();
        try {
            return (int)mh$.invokeExact(lpszSource, lpszBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExpandedNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$651.GetExpandedNameW$MH,"GetExpandedNameW");
    }
    public static int GetExpandedNameW ( Addressable lpszSource,  Addressable lpszBuffer) {
        var mh$ = GetExpandedNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszSource, lpszBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZOpenFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$651.LZOpenFileA$MH,"LZOpenFileA");
    }
    public static int LZOpenFileA ( Addressable lpFileName,  Addressable lpReOpenBuf,  short wStyle) {
        var mh$ = LZOpenFileA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpReOpenBuf, wStyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZOpenFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$651.LZOpenFileW$MH,"LZOpenFileW");
    }
    public static int LZOpenFileW ( Addressable lpFileName,  Addressable lpReOpenBuf,  short wStyle) {
        var mh$ = LZOpenFileW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpReOpenBuf, wStyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZSeek$MH() {
        return RuntimeHelper.requireNonNull(constants$651.LZSeek$MH,"LZSeek");
    }
    public static int LZSeek ( int hFile,  int lOffset,  int iOrigin) {
        var mh$ = LZSeek$MH();
        try {
            return (int)mh$.invokeExact(hFile, lOffset, iOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZRead$MH() {
        return RuntimeHelper.requireNonNull(constants$651.LZRead$MH,"LZRead");
    }
    public static int LZRead ( int hFile,  Addressable lpBuffer,  int cbRead) {
        var mh$ = LZRead$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, cbRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZClose$MH() {
        return RuntimeHelper.requireNonNull(constants$651.LZClose$MH,"LZClose");
    }
    public static void LZClose ( int hFile) {
        var mh$ = LZClose$MH();
        try {
            mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPUINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HDRVR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mciSendCommandA$MH() {
        return RuntimeHelper.requireNonNull(constants$653.mciSendCommandA$MH,"mciSendCommandA");
    }
    public static int mciSendCommandA ( int mciId,  int uMsg,  long dwParam1,  long dwParam2) {
        var mh$ = mciSendCommandA$MH();
        try {
            return (int)mh$.invokeExact(mciId, uMsg, dwParam1, dwParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciSendCommandW$MH() {
        return RuntimeHelper.requireNonNull(constants$653.mciSendCommandW$MH,"mciSendCommandW");
    }
    public static int mciSendCommandW ( int mciId,  int uMsg,  long dwParam1,  long dwParam2) {
        var mh$ = mciSendCommandW$MH();
        try {
            return (int)mh$.invokeExact(mciId, uMsg, dwParam1, dwParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciSendStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$653.mciSendStringA$MH,"mciSendStringA");
    }
    public static int mciSendStringA ( Addressable lpstrCommand,  Addressable lpstrReturnString,  int uReturnLength,  Addressable hwndCallback) {
        var mh$ = mciSendStringA$MH();
        try {
            return (int)mh$.invokeExact(lpstrCommand, lpstrReturnString, uReturnLength, hwndCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciSendStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$653.mciSendStringW$MH,"mciSendStringW");
    }
    public static int mciSendStringW ( Addressable lpstrCommand,  Addressable lpstrReturnString,  int uReturnLength,  Addressable hwndCallback) {
        var mh$ = mciSendStringW$MH();
        try {
            return (int)mh$.invokeExact(lpstrCommand, lpstrReturnString, uReturnLength, hwndCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetDeviceIDA$MH() {
        return RuntimeHelper.requireNonNull(constants$654.mciGetDeviceIDA$MH,"mciGetDeviceIDA");
    }
    public static int mciGetDeviceIDA ( Addressable pszDevice) {
        var mh$ = mciGetDeviceIDA$MH();
        try {
            return (int)mh$.invokeExact(pszDevice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetDeviceIDW$MH() {
        return RuntimeHelper.requireNonNull(constants$654.mciGetDeviceIDW$MH,"mciGetDeviceIDW");
    }
    public static int mciGetDeviceIDW ( Addressable pszDevice) {
        var mh$ = mciGetDeviceIDW$MH();
        try {
            return (int)mh$.invokeExact(pszDevice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetDeviceIDFromElementIDA$MH() {
        return RuntimeHelper.requireNonNull(constants$654.mciGetDeviceIDFromElementIDA$MH,"mciGetDeviceIDFromElementIDA");
    }
    public static int mciGetDeviceIDFromElementIDA ( int dwElementID,  Addressable lpstrType) {
        var mh$ = mciGetDeviceIDFromElementIDA$MH();
        try {
            return (int)mh$.invokeExact(dwElementID, lpstrType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetDeviceIDFromElementIDW$MH() {
        return RuntimeHelper.requireNonNull(constants$654.mciGetDeviceIDFromElementIDW$MH,"mciGetDeviceIDFromElementIDW");
    }
    public static int mciGetDeviceIDFromElementIDW ( int dwElementID,  Addressable lpstrType) {
        var mh$ = mciGetDeviceIDFromElementIDW$MH();
        try {
            return (int)mh$.invokeExact(dwElementID, lpstrType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetErrorStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$654.mciGetErrorStringA$MH,"mciGetErrorStringA");
    }
    public static int mciGetErrorStringA ( int mcierr,  Addressable pszText,  int cchText) {
        var mh$ = mciGetErrorStringA$MH();
        try {
            return (int)mh$.invokeExact(mcierr, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetErrorStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$654.mciGetErrorStringW$MH,"mciGetErrorStringW");
    }
    public static int mciGetErrorStringW ( int mcierr,  Addressable pszText,  int cchText) {
        var mh$ = mciGetErrorStringW$MH();
        try {
            return (int)mh$.invokeExact(mcierr, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciSetYieldProc$MH() {
        return RuntimeHelper.requireNonNull(constants$655.mciSetYieldProc$MH,"mciSetYieldProc");
    }
    public static int mciSetYieldProc ( int mciId,  Addressable fpYieldProc,  int dwYieldData) {
        var mh$ = mciSetYieldProc$MH();
        try {
            return (int)mh$.invokeExact(mciId, fpYieldProc, dwYieldData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetCreatorTask$MH() {
        return RuntimeHelper.requireNonNull(constants$655.mciGetCreatorTask$MH,"mciGetCreatorTask");
    }
    public static MemoryAddress mciGetCreatorTask ( int mciId) {
        var mh$ = mciGetCreatorTask$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mciId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetYieldProc$MH() {
        return RuntimeHelper.requireNonNull(constants$655.mciGetYieldProc$MH,"mciGetYieldProc");
    }
    public static MemoryAddress mciGetYieldProc ( int mciId,  Addressable pdwYieldData) {
        var mh$ = mciGetYieldProc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mciId, pdwYieldData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMCI_GENERIC_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_GENERIC_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SEEK_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SEEK_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_STATUS_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_STATUS_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_INFO_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_INFO_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_INFO_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_GETDEVCAPS_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_GETDEVCAPS_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SYSINFO_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SYSINFO_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SYSINFO_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SYSINFO_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SYSINFO_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SYSINFO_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_BREAK_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_BREAK_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SAVE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SAVE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SAVE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SAVE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SAVE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SAVE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_LOAD_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_LOAD_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_LOAD_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_LOAD_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_LOAD_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_LOAD_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_RECORD_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_VD_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_VD_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_VD_STEP_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_VD_STEP_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_VD_ESCAPE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_VD_ESCAPE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_VD_ESCAPE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_VD_ESCAPE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_VD_ESCAPE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_VD_ESCAPE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_WAVE_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_WAVE_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_WAVE_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_WAVE_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_WAVE_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_WAVE_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_WAVE_DELETE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_WAVE_DELETE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_WAVE_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_WAVE_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SEQ_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SEQ_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_STEP_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_STEP_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_WINDOW_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_WINDOW_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_WINDOW_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_WINDOW_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_WINDOW_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_WINDOW_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_RECT_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_RECT_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_UPDATE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_UPDATE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_WINDOW_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_WINDOW_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_WINDOW_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_WINDOW_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_WINDOW_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_WINDOW_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_RECT_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_RECT_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_SAVE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_SAVE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_SAVE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_SAVE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_SAVE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_SAVE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_LOAD_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_LOAD_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_LOAD_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_LOAD_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_LOAD_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_LOAD_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mciGetDriverData$MH() {
        return RuntimeHelper.requireNonNull(constants$655.mciGetDriverData$MH,"mciGetDriverData");
    }
    public static long mciGetDriverData ( int wDeviceID) {
        var mh$ = mciGetDriverData$MH();
        try {
            return (long)mh$.invokeExact(wDeviceID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciLoadCommandResource$MH() {
        return RuntimeHelper.requireNonNull(constants$655.mciLoadCommandResource$MH,"mciLoadCommandResource");
    }
    public static int mciLoadCommandResource ( Addressable hInstance,  Addressable lpResName,  int wType) {
        var mh$ = mciLoadCommandResource$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpResName, wType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciSetDriverData$MH() {
        return RuntimeHelper.requireNonNull(constants$655.mciSetDriverData$MH,"mciSetDriverData");
    }
    public static int mciSetDriverData ( int wDeviceID,  long dwData) {
        var mh$ = mciSetDriverData$MH();
        try {
            return (int)mh$.invokeExact(wDeviceID, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciDriverYield$MH() {
        return RuntimeHelper.requireNonNull(constants$656.mciDriverYield$MH,"mciDriverYield");
    }
    public static int mciDriverYield ( int wDeviceID) {
        var mh$ = mciDriverYield$MH();
        try {
            return (int)mh$.invokeExact(wDeviceID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciDriverNotify$MH() {
        return RuntimeHelper.requireNonNull(constants$656.mciDriverNotify$MH,"mciDriverNotify");
    }
    public static int mciDriverNotify ( Addressable hwndCallback,  int wDeviceID,  int uStatus) {
        var mh$ = mciDriverNotify$MH();
        try {
            return (int)mh$.invokeExact(hwndCallback, wDeviceID, uStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciFreeCommandResource$MH() {
        return RuntimeHelper.requireNonNull(constants$656.mciFreeCommandResource$MH,"mciFreeCommandResource");
    }
    public static int mciFreeCommandResource ( int wTable) {
        var mh$ = mciFreeCommandResource$MH();
        try {
            return (int)mh$.invokeExact(wTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PDRVCONFIGINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDRVCONFIGINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRVCONFIGINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRVCONFIGINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDRVCONFIGINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRVCONFIGINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CloseDriver$MH() {
        return RuntimeHelper.requireNonNull(constants$656.CloseDriver$MH,"CloseDriver");
    }
    public static long CloseDriver ( Addressable hDriver,  long lParam1,  long lParam2) {
        var mh$ = CloseDriver$MH();
        try {
            return (long)mh$.invokeExact(hDriver, lParam1, lParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenDriver$MH() {
        return RuntimeHelper.requireNonNull(constants$657.OpenDriver$MH,"OpenDriver");
    }
    public static MemoryAddress OpenDriver ( Addressable szDriverName,  Addressable szSectionName,  long lParam2) {
        var mh$ = OpenDriver$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(szDriverName, szSectionName, lParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendDriverMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$657.SendDriverMessage$MH,"SendDriverMessage");
    }
    public static long SendDriverMessage ( Addressable hDriver,  int message,  long lParam1,  long lParam2) {
        var mh$ = SendDriverMessage$MH();
        try {
            return (long)mh$.invokeExact(hDriver, message, lParam1, lParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrvGetModuleHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$657.DrvGetModuleHandle$MH,"DrvGetModuleHandle");
    }
    public static MemoryAddress DrvGetModuleHandle ( Addressable hDriver) {
        var mh$ = DrvGetModuleHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDriver);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDriverModuleHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$657.GetDriverModuleHandle$MH,"GetDriverModuleHandle");
    }
    public static MemoryAddress GetDriverModuleHandle ( Addressable hDriver) {
        var mh$ = GetDriverModuleHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDriver);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefDriverProc$MH() {
        return RuntimeHelper.requireNonNull(constants$657.DefDriverProc$MH,"DefDriverProc");
    }
    public static long DefDriverProc ( long dwDriverIdentifier,  Addressable hdrvr,  int uMsg,  long lParam1,  long lParam2) {
        var mh$ = DefDriverProc$MH();
        try {
            return (long)mh$.invokeExact(dwDriverIdentifier, hdrvr, uMsg, lParam1, lParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DriverCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$657.DriverCallback$MH,"DriverCallback");
    }
    public static int DriverCallback ( long dwCallback,  int dwFlags,  Addressable hDevice,  int dwMsg,  long dwUser,  long dwParam1,  long dwParam2) {
        var mh$ = DriverCallback$MH();
        try {
            return (int)mh$.invokeExact(dwCallback, dwFlags, hDevice, dwMsg, dwUser, dwParam1, dwParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sndOpenSound$MH() {
        return RuntimeHelper.requireNonNull(constants$658.sndOpenSound$MH,"sndOpenSound");
    }
    public static int sndOpenSound ( Addressable EventName,  Addressable AppName,  int Flags,  Addressable FileHandle) {
        var mh$ = sndOpenSound$MH();
        try {
            return (int)mh$.invokeExact(EventName, AppName, Flags, FileHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmDrvInstall$MH() {
        return RuntimeHelper.requireNonNull(constants$658.mmDrvInstall$MH,"mmDrvInstall");
    }
    public static int mmDrvInstall ( Addressable hDriver,  Addressable wszDrvEntry,  Addressable drvMessage,  int wFlags) {
        var mh$ = mmDrvInstall$MH();
        try {
            return (int)mh$.invokeExact(hDriver, wszDrvEntry, drvMessage, wFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMMIO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMMIOINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMMIOINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMMIOINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMMIOINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMMCKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMMCKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMMCKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMMCKINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mmioStringToFOURCCA$MH() {
        return RuntimeHelper.requireNonNull(constants$659.mmioStringToFOURCCA$MH,"mmioStringToFOURCCA");
    }
    public static int mmioStringToFOURCCA ( Addressable sz,  int uFlags) {
        var mh$ = mmioStringToFOURCCA$MH();
        try {
            return (int)mh$.invokeExact(sz, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioStringToFOURCCW$MH() {
        return RuntimeHelper.requireNonNull(constants$659.mmioStringToFOURCCW$MH,"mmioStringToFOURCCW");
    }
    public static int mmioStringToFOURCCW ( Addressable sz,  int uFlags) {
        var mh$ = mmioStringToFOURCCW$MH();
        try {
            return (int)mh$.invokeExact(sz, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioInstallIOProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$659.mmioInstallIOProcA$MH,"mmioInstallIOProcA");
    }
    public static MemoryAddress mmioInstallIOProcA ( int fccIOProc,  Addressable pIOProc,  int dwFlags) {
        var mh$ = mmioInstallIOProcA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fccIOProc, pIOProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioInstallIOProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$659.mmioInstallIOProcW$MH,"mmioInstallIOProcW");
    }
    public static MemoryAddress mmioInstallIOProcW ( int fccIOProc,  Addressable pIOProc,  int dwFlags) {
        var mh$ = mmioInstallIOProcW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fccIOProc, pIOProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioOpenA$MH() {
        return RuntimeHelper.requireNonNull(constants$660.mmioOpenA$MH,"mmioOpenA");
    }
    public static MemoryAddress mmioOpenA ( Addressable pszFileName,  Addressable pmmioinfo,  int fdwOpen) {
        var mh$ = mmioOpenA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszFileName, pmmioinfo, fdwOpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioOpenW$MH() {
        return RuntimeHelper.requireNonNull(constants$660.mmioOpenW$MH,"mmioOpenW");
    }
    public static MemoryAddress mmioOpenW ( Addressable pszFileName,  Addressable pmmioinfo,  int fdwOpen) {
        var mh$ = mmioOpenW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszFileName, pmmioinfo, fdwOpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioRenameA$MH() {
        return RuntimeHelper.requireNonNull(constants$660.mmioRenameA$MH,"mmioRenameA");
    }
    public static int mmioRenameA ( Addressable pszFileName,  Addressable pszNewFileName,  Addressable pmmioinfo,  int fdwRename) {
        var mh$ = mmioRenameA$MH();
        try {
            return (int)mh$.invokeExact(pszFileName, pszNewFileName, pmmioinfo, fdwRename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioRenameW$MH() {
        return RuntimeHelper.requireNonNull(constants$660.mmioRenameW$MH,"mmioRenameW");
    }
    public static int mmioRenameW ( Addressable pszFileName,  Addressable pszNewFileName,  Addressable pmmioinfo,  int fdwRename) {
        var mh$ = mmioRenameW$MH();
        try {
            return (int)mh$.invokeExact(pszFileName, pszNewFileName, pmmioinfo, fdwRename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioClose$MH() {
        return RuntimeHelper.requireNonNull(constants$660.mmioClose$MH,"mmioClose");
    }
    public static int mmioClose ( Addressable hmmio,  int fuClose) {
        var mh$ = mmioClose$MH();
        try {
            return (int)mh$.invokeExact(hmmio, fuClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioRead$MH() {
        return RuntimeHelper.requireNonNull(constants$660.mmioRead$MH,"mmioRead");
    }
    public static int mmioRead ( Addressable hmmio,  Addressable pch,  int cch) {
        var mh$ = mmioRead$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pch, cch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioWrite$MH() {
        return RuntimeHelper.requireNonNull(constants$661.mmioWrite$MH,"mmioWrite");
    }
    public static int mmioWrite ( Addressable hmmio,  Addressable pch,  int cch) {
        var mh$ = mmioWrite$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pch, cch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioSeek$MH() {
        return RuntimeHelper.requireNonNull(constants$661.mmioSeek$MH,"mmioSeek");
    }
    public static int mmioSeek ( Addressable hmmio,  int lOffset,  int iOrigin) {
        var mh$ = mmioSeek$MH();
        try {
            return (int)mh$.invokeExact(hmmio, lOffset, iOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioGetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$661.mmioGetInfo$MH,"mmioGetInfo");
    }
    public static int mmioGetInfo ( Addressable hmmio,  Addressable pmmioinfo,  int fuInfo) {
        var mh$ = mmioGetInfo$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioSetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$661.mmioSetInfo$MH,"mmioSetInfo");
    }
    public static int mmioSetInfo ( Addressable hmmio,  Addressable pmmioinfo,  int fuInfo) {
        var mh$ = mmioSetInfo$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioSetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$661.mmioSetBuffer$MH,"mmioSetBuffer");
    }
    public static int mmioSetBuffer ( Addressable hmmio,  Addressable pchBuffer,  int cchBuffer,  int fuBuffer) {
        var mh$ = mmioSetBuffer$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pchBuffer, cchBuffer, fuBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$661.mmioFlush$MH,"mmioFlush");
    }
    public static int mmioFlush ( Addressable hmmio,  int fuFlush) {
        var mh$ = mmioFlush$MH();
        try {
            return (int)mh$.invokeExact(hmmio, fuFlush);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioAdvance$MH() {
        return RuntimeHelper.requireNonNull(constants$662.mmioAdvance$MH,"mmioAdvance");
    }
    public static int mmioAdvance ( Addressable hmmio,  Addressable pmmioinfo,  int fuAdvance) {
        var mh$ = mmioAdvance$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuAdvance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioSendMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$662.mmioSendMessage$MH,"mmioSendMessage");
    }
    public static long mmioSendMessage ( Addressable hmmio,  int uMsg,  long lParam1,  long lParam2) {
        var mh$ = mmioSendMessage$MH();
        try {
            return (long)mh$.invokeExact(hmmio, uMsg, lParam1, lParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioDescend$MH() {
        return RuntimeHelper.requireNonNull(constants$662.mmioDescend$MH,"mmioDescend");
    }
    public static int mmioDescend ( Addressable hmmio,  Addressable pmmcki,  Addressable pmmckiParent,  int fuDescend) {
        var mh$ = mmioDescend$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmcki, pmmckiParent, fuDescend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioAscend$MH() {
        return RuntimeHelper.requireNonNull(constants$662.mmioAscend$MH,"mmioAscend");
    }
    public static int mmioAscend ( Addressable hmmio,  Addressable pmmcki,  int fuAscend) {
        var mh$ = mmioAscend$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmcki, fuAscend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioCreateChunk$MH() {
        return RuntimeHelper.requireNonNull(constants$662.mmioCreateChunk$MH,"mmioCreateChunk");
    }
    public static int mmioCreateChunk ( Addressable hmmio,  Addressable pmmcki,  int fuCreate) {
        var mh$ = mmioCreateChunk$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmcki, fuCreate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timeSetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$663.timeSetEvent$MH,"timeSetEvent");
    }
    public static int timeSetEvent ( int uDelay,  int uResolution,  Addressable fptc,  long dwUser,  int fuEvent) {
        var mh$ = timeSetEvent$MH();
        try {
            return (int)mh$.invokeExact(uDelay, uResolution, fptc, dwUser, fuEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timeKillEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$663.timeKillEvent$MH,"timeKillEvent");
    }
    public static int timeKillEvent ( int uTimerID) {
        var mh$ = timeKillEvent$MH();
        try {
            return (int)mh$.invokeExact(uTimerID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sndPlaySoundA$MH() {
        return RuntimeHelper.requireNonNull(constants$663.sndPlaySoundA$MH,"sndPlaySoundA");
    }
    public static int sndPlaySoundA ( Addressable pszSound,  int fuSound) {
        var mh$ = sndPlaySoundA$MH();
        try {
            return (int)mh$.invokeExact(pszSound, fuSound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sndPlaySoundW$MH() {
        return RuntimeHelper.requireNonNull(constants$664.sndPlaySoundW$MH,"sndPlaySoundW");
    }
    public static int sndPlaySoundW ( Addressable pszSound,  int fuSound) {
        var mh$ = sndPlaySoundW$MH();
        try {
            return (int)mh$.invokeExact(pszSound, fuSound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlaySoundA$MH() {
        return RuntimeHelper.requireNonNull(constants$664.PlaySoundA$MH,"PlaySoundA");
    }
    public static int PlaySoundA ( Addressable pszSound,  Addressable hmod,  int fdwSound) {
        var mh$ = PlaySoundA$MH();
        try {
            return (int)mh$.invokeExact(pszSound, hmod, fdwSound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlaySoundW$MH() {
        return RuntimeHelper.requireNonNull(constants$664.PlaySoundW$MH,"PlaySoundW");
    }
    public static int PlaySoundW ( Addressable pszSound,  Addressable hmod,  int fdwSound) {
        var mh$ = PlaySoundW$MH();
        try {
            return (int)mh$.invokeExact(pszSound, hmod, fdwSound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HWAVE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWAVEIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWAVEOUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHWAVEIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHWAVEOUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEINCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEINCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEINCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEINCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEINCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEINCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEINCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEINCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEINCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEINCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEINCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEINCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEINCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEINCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEINCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEINCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEINCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEINCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPCMWAVEFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPCMWAVEFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPCMWAVEFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEFORMATEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEFORMATEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEFORMATEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWAVEFORMATEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle waveOutGetNumDevs$MH() {
        return RuntimeHelper.requireNonNull(constants$665.waveOutGetNumDevs$MH,"waveOutGetNumDevs");
    }
    public static int waveOutGetNumDevs () {
        var mh$ = waveOutGetNumDevs$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutGetDevCapsA$MH() {
        return RuntimeHelper.requireNonNull(constants$665.waveOutGetDevCapsA$MH,"waveOutGetDevCapsA");
    }
    public static int waveOutGetDevCapsA ( long uDeviceID,  Addressable pwoc,  int cbwoc) {
        var mh$ = waveOutGetDevCapsA$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, pwoc, cbwoc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutGetDevCapsW$MH() {
        return RuntimeHelper.requireNonNull(constants$665.waveOutGetDevCapsW$MH,"waveOutGetDevCapsW");
    }
    public static int waveOutGetDevCapsW ( long uDeviceID,  Addressable pwoc,  int cbwoc) {
        var mh$ = waveOutGetDevCapsW$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, pwoc, cbwoc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutGetVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$665.waveOutGetVolume$MH,"waveOutGetVolume");
    }
    public static int waveOutGetVolume ( Addressable hwo,  Addressable pdwVolume) {
        var mh$ = waveOutGetVolume$MH();
        try {
            return (int)mh$.invokeExact(hwo, pdwVolume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutSetVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$665.waveOutSetVolume$MH,"waveOutSetVolume");
    }
    public static int waveOutSetVolume ( Addressable hwo,  int dwVolume) {
        var mh$ = waveOutSetVolume$MH();
        try {
            return (int)mh$.invokeExact(hwo, dwVolume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutGetErrorTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$666.waveOutGetErrorTextA$MH,"waveOutGetErrorTextA");
    }
    public static int waveOutGetErrorTextA ( int mmrError,  Addressable pszText,  int cchText) {
        var mh$ = waveOutGetErrorTextA$MH();
        try {
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutGetErrorTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$666.waveOutGetErrorTextW$MH,"waveOutGetErrorTextW");
    }
    public static int waveOutGetErrorTextW ( int mmrError,  Addressable pszText,  int cchText) {
        var mh$ = waveOutGetErrorTextW$MH();
        try {
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$666.waveOutOpen$MH,"waveOutOpen");
    }
    public static int waveOutOpen ( Addressable phwo,  int uDeviceID,  Addressable pwfx,  long dwCallback,  long dwInstance,  int fdwOpen) {
        var mh$ = waveOutOpen$MH();
        try {
            return (int)mh$.invokeExact(phwo, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutClose$MH() {
        return RuntimeHelper.requireNonNull(constants$666.waveOutClose$MH,"waveOutClose");
    }
    public static int waveOutClose ( Addressable hwo) {
        var mh$ = waveOutClose$MH();
        try {
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutPrepareHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$666.waveOutPrepareHeader$MH,"waveOutPrepareHeader");
    }
    public static int waveOutPrepareHeader ( Addressable hwo,  Addressable pwh,  int cbwh) {
        var mh$ = waveOutPrepareHeader$MH();
        try {
            return (int)mh$.invokeExact(hwo, pwh, cbwh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutUnprepareHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$666.waveOutUnprepareHeader$MH,"waveOutUnprepareHeader");
    }
    public static int waveOutUnprepareHeader ( Addressable hwo,  Addressable pwh,  int cbwh) {
        var mh$ = waveOutUnprepareHeader$MH();
        try {
            return (int)mh$.invokeExact(hwo, pwh, cbwh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutWrite$MH() {
        return RuntimeHelper.requireNonNull(constants$667.waveOutWrite$MH,"waveOutWrite");
    }
    public static int waveOutWrite ( Addressable hwo,  Addressable pwh,  int cbwh) {
        var mh$ = waveOutWrite$MH();
        try {
            return (int)mh$.invokeExact(hwo, pwh, cbwh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutPause$MH() {
        return RuntimeHelper.requireNonNull(constants$667.waveOutPause$MH,"waveOutPause");
    }
    public static int waveOutPause ( Addressable hwo) {
        var mh$ = waveOutPause$MH();
        try {
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutRestart$MH() {
        return RuntimeHelper.requireNonNull(constants$667.waveOutRestart$MH,"waveOutRestart");
    }
    public static int waveOutRestart ( Addressable hwo) {
        var mh$ = waveOutRestart$MH();
        try {
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutReset$MH() {
        return RuntimeHelper.requireNonNull(constants$667.waveOutReset$MH,"waveOutReset");
    }
    public static int waveOutReset ( Addressable hwo) {
        var mh$ = waveOutReset$MH();
        try {
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutBreakLoop$MH() {
        return RuntimeHelper.requireNonNull(constants$667.waveOutBreakLoop$MH,"waveOutBreakLoop");
    }
    public static int waveOutBreakLoop ( Addressable hwo) {
        var mh$ = waveOutBreakLoop$MH();
        try {
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutGetPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$667.waveOutGetPosition$MH,"waveOutGetPosition");
    }
    public static int waveOutGetPosition ( Addressable hwo,  Addressable pmmt,  int cbmmt) {
        var mh$ = waveOutGetPosition$MH();
        try {
            return (int)mh$.invokeExact(hwo, pmmt, cbmmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutGetPitch$MH() {
        return RuntimeHelper.requireNonNull(constants$668.waveOutGetPitch$MH,"waveOutGetPitch");
    }
    public static int waveOutGetPitch ( Addressable hwo,  Addressable pdwPitch) {
        var mh$ = waveOutGetPitch$MH();
        try {
            return (int)mh$.invokeExact(hwo, pdwPitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutSetPitch$MH() {
        return RuntimeHelper.requireNonNull(constants$668.waveOutSetPitch$MH,"waveOutSetPitch");
    }
    public static int waveOutSetPitch ( Addressable hwo,  int dwPitch) {
        var mh$ = waveOutSetPitch$MH();
        try {
            return (int)mh$.invokeExact(hwo, dwPitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutGetPlaybackRate$MH() {
        return RuntimeHelper.requireNonNull(constants$668.waveOutGetPlaybackRate$MH,"waveOutGetPlaybackRate");
    }
    public static int waveOutGetPlaybackRate ( Addressable hwo,  Addressable pdwRate) {
        var mh$ = waveOutGetPlaybackRate$MH();
        try {
            return (int)mh$.invokeExact(hwo, pdwRate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutSetPlaybackRate$MH() {
        return RuntimeHelper.requireNonNull(constants$668.waveOutSetPlaybackRate$MH,"waveOutSetPlaybackRate");
    }
    public static int waveOutSetPlaybackRate ( Addressable hwo,  int dwRate) {
        var mh$ = waveOutSetPlaybackRate$MH();
        try {
            return (int)mh$.invokeExact(hwo, dwRate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutGetID$MH() {
        return RuntimeHelper.requireNonNull(constants$668.waveOutGetID$MH,"waveOutGetID");
    }
    public static int waveOutGetID ( Addressable hwo,  Addressable puDeviceID) {
        var mh$ = waveOutGetID$MH();
        try {
            return (int)mh$.invokeExact(hwo, puDeviceID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveOutMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$668.waveOutMessage$MH,"waveOutMessage");
    }
    public static int waveOutMessage ( Addressable hwo,  int uMsg,  long dw1,  long dw2) {
        var mh$ = waveOutMessage$MH();
        try {
            return (int)mh$.invokeExact(hwo, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInGetNumDevs$MH() {
        return RuntimeHelper.requireNonNull(constants$669.waveInGetNumDevs$MH,"waveInGetNumDevs");
    }
    public static int waveInGetNumDevs () {
        var mh$ = waveInGetNumDevs$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInGetDevCapsA$MH() {
        return RuntimeHelper.requireNonNull(constants$669.waveInGetDevCapsA$MH,"waveInGetDevCapsA");
    }
    public static int waveInGetDevCapsA ( long uDeviceID,  Addressable pwic,  int cbwic) {
        var mh$ = waveInGetDevCapsA$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, pwic, cbwic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInGetDevCapsW$MH() {
        return RuntimeHelper.requireNonNull(constants$669.waveInGetDevCapsW$MH,"waveInGetDevCapsW");
    }
    public static int waveInGetDevCapsW ( long uDeviceID,  Addressable pwic,  int cbwic) {
        var mh$ = waveInGetDevCapsW$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, pwic, cbwic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInGetErrorTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$669.waveInGetErrorTextA$MH,"waveInGetErrorTextA");
    }
    public static int waveInGetErrorTextA ( int mmrError,  Addressable pszText,  int cchText) {
        var mh$ = waveInGetErrorTextA$MH();
        try {
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInGetErrorTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$669.waveInGetErrorTextW$MH,"waveInGetErrorTextW");
    }
    public static int waveInGetErrorTextW ( int mmrError,  Addressable pszText,  int cchText) {
        var mh$ = waveInGetErrorTextW$MH();
        try {
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$669.waveInOpen$MH,"waveInOpen");
    }
    public static int waveInOpen ( Addressable phwi,  int uDeviceID,  Addressable pwfx,  long dwCallback,  long dwInstance,  int fdwOpen) {
        var mh$ = waveInOpen$MH();
        try {
            return (int)mh$.invokeExact(phwi, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInClose$MH() {
        return RuntimeHelper.requireNonNull(constants$670.waveInClose$MH,"waveInClose");
    }
    public static int waveInClose ( Addressable hwi) {
        var mh$ = waveInClose$MH();
        try {
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInPrepareHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$670.waveInPrepareHeader$MH,"waveInPrepareHeader");
    }
    public static int waveInPrepareHeader ( Addressable hwi,  Addressable pwh,  int cbwh) {
        var mh$ = waveInPrepareHeader$MH();
        try {
            return (int)mh$.invokeExact(hwi, pwh, cbwh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInUnprepareHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$670.waveInUnprepareHeader$MH,"waveInUnprepareHeader");
    }
    public static int waveInUnprepareHeader ( Addressable hwi,  Addressable pwh,  int cbwh) {
        var mh$ = waveInUnprepareHeader$MH();
        try {
            return (int)mh$.invokeExact(hwi, pwh, cbwh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInAddBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$670.waveInAddBuffer$MH,"waveInAddBuffer");
    }
    public static int waveInAddBuffer ( Addressable hwi,  Addressable pwh,  int cbwh) {
        var mh$ = waveInAddBuffer$MH();
        try {
            return (int)mh$.invokeExact(hwi, pwh, cbwh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInStart$MH() {
        return RuntimeHelper.requireNonNull(constants$670.waveInStart$MH,"waveInStart");
    }
    public static int waveInStart ( Addressable hwi) {
        var mh$ = waveInStart$MH();
        try {
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInStop$MH() {
        return RuntimeHelper.requireNonNull(constants$670.waveInStop$MH,"waveInStop");
    }
    public static int waveInStop ( Addressable hwi) {
        var mh$ = waveInStop$MH();
        try {
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInReset$MH() {
        return RuntimeHelper.requireNonNull(constants$671.waveInReset$MH,"waveInReset");
    }
    public static int waveInReset ( Addressable hwi) {
        var mh$ = waveInReset$MH();
        try {
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInGetPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$671.waveInGetPosition$MH,"waveInGetPosition");
    }
    public static int waveInGetPosition ( Addressable hwi,  Addressable pmmt,  int cbmmt) {
        var mh$ = waveInGetPosition$MH();
        try {
            return (int)mh$.invokeExact(hwi, pmmt, cbmmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInGetID$MH() {
        return RuntimeHelper.requireNonNull(constants$671.waveInGetID$MH,"waveInGetID");
    }
    public static int waveInGetID ( Addressable hwi,  Addressable puDeviceID) {
        var mh$ = waveInGetID$MH();
        try {
            return (int)mh$.invokeExact(hwi, puDeviceID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle waveInMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$671.waveInMessage$MH,"waveInMessage");
    }
    public static int waveInMessage ( Addressable hwi,  int uMsg,  long dw1,  long dw2) {
        var mh$ = waveInMessage$MH();
        try {
            return (int)mh$.invokeExact(hwi, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HMIDI = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMIDIIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMIDIOUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMIDISTRM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHMIDI = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHMIDIIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHMIDIOUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHMIDISTRM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPATCHARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPKEYARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIOUTCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIOUTCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIOUTCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIOUTCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIOUTCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIOUTCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIOUTCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIOUTCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIOUTCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIOUTCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIOUTCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIOUTCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIOUTCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIOUTCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIOUTCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIOUTCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIOUTCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIOUTCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIINCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIINCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIINCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIINCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIINCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIINCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIINCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIINCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIINCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIINCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIINCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIINCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIINCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIINCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIINCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIINCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIINCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIINCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDIHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMIDIHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIPROPTIMEDIV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIDIPROPTEMPO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle midiOutGetNumDevs$MH() {
        return RuntimeHelper.requireNonNull(constants$672.midiOutGetNumDevs$MH,"midiOutGetNumDevs");
    }
    public static int midiOutGetNumDevs () {
        var mh$ = midiOutGetNumDevs$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiStreamOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$672.midiStreamOpen$MH,"midiStreamOpen");
    }
    public static int midiStreamOpen ( Addressable phms,  Addressable puDeviceID,  int cMidi,  long dwCallback,  long dwInstance,  int fdwOpen) {
        var mh$ = midiStreamOpen$MH();
        try {
            return (int)mh$.invokeExact(phms, puDeviceID, cMidi, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiStreamClose$MH() {
        return RuntimeHelper.requireNonNull(constants$672.midiStreamClose$MH,"midiStreamClose");
    }
    public static int midiStreamClose ( Addressable hms) {
        var mh$ = midiStreamClose$MH();
        try {
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiStreamProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$672.midiStreamProperty$MH,"midiStreamProperty");
    }
    public static int midiStreamProperty ( Addressable hms,  Addressable lppropdata,  int dwProperty) {
        var mh$ = midiStreamProperty$MH();
        try {
            return (int)mh$.invokeExact(hms, lppropdata, dwProperty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiStreamPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$673.midiStreamPosition$MH,"midiStreamPosition");
    }
    public static int midiStreamPosition ( Addressable hms,  Addressable lpmmt,  int cbmmt) {
        var mh$ = midiStreamPosition$MH();
        try {
            return (int)mh$.invokeExact(hms, lpmmt, cbmmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiStreamOut$MH() {
        return RuntimeHelper.requireNonNull(constants$673.midiStreamOut$MH,"midiStreamOut");
    }
    public static int midiStreamOut ( Addressable hms,  Addressable pmh,  int cbmh) {
        var mh$ = midiStreamOut$MH();
        try {
            return (int)mh$.invokeExact(hms, pmh, cbmh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiStreamPause$MH() {
        return RuntimeHelper.requireNonNull(constants$673.midiStreamPause$MH,"midiStreamPause");
    }
    public static int midiStreamPause ( Addressable hms) {
        var mh$ = midiStreamPause$MH();
        try {
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiStreamRestart$MH() {
        return RuntimeHelper.requireNonNull(constants$673.midiStreamRestart$MH,"midiStreamRestart");
    }
    public static int midiStreamRestart ( Addressable hms) {
        var mh$ = midiStreamRestart$MH();
        try {
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiStreamStop$MH() {
        return RuntimeHelper.requireNonNull(constants$673.midiStreamStop$MH,"midiStreamStop");
    }
    public static int midiStreamStop ( Addressable hms) {
        var mh$ = midiStreamStop$MH();
        try {
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiConnect$MH() {
        return RuntimeHelper.requireNonNull(constants$673.midiConnect$MH,"midiConnect");
    }
    public static int midiConnect ( Addressable hmi,  Addressable hmo,  Addressable pReserved) {
        var mh$ = midiConnect$MH();
        try {
            return (int)mh$.invokeExact(hmi, hmo, pReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiDisconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$674.midiDisconnect$MH,"midiDisconnect");
    }
    public static int midiDisconnect ( Addressable hmi,  Addressable hmo,  Addressable pReserved) {
        var mh$ = midiDisconnect$MH();
        try {
            return (int)mh$.invokeExact(hmi, hmo, pReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutGetDevCapsA$MH() {
        return RuntimeHelper.requireNonNull(constants$674.midiOutGetDevCapsA$MH,"midiOutGetDevCapsA");
    }
    public static int midiOutGetDevCapsA ( long uDeviceID,  Addressable pmoc,  int cbmoc) {
        var mh$ = midiOutGetDevCapsA$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, pmoc, cbmoc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutGetDevCapsW$MH() {
        return RuntimeHelper.requireNonNull(constants$674.midiOutGetDevCapsW$MH,"midiOutGetDevCapsW");
    }
    public static int midiOutGetDevCapsW ( long uDeviceID,  Addressable pmoc,  int cbmoc) {
        var mh$ = midiOutGetDevCapsW$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, pmoc, cbmoc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutGetVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$674.midiOutGetVolume$MH,"midiOutGetVolume");
    }
    public static int midiOutGetVolume ( Addressable hmo,  Addressable pdwVolume) {
        var mh$ = midiOutGetVolume$MH();
        try {
            return (int)mh$.invokeExact(hmo, pdwVolume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutSetVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$674.midiOutSetVolume$MH,"midiOutSetVolume");
    }
    public static int midiOutSetVolume ( Addressable hmo,  int dwVolume) {
        var mh$ = midiOutSetVolume$MH();
        try {
            return (int)mh$.invokeExact(hmo, dwVolume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutGetErrorTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$674.midiOutGetErrorTextA$MH,"midiOutGetErrorTextA");
    }
    public static int midiOutGetErrorTextA ( int mmrError,  Addressable pszText,  int cchText) {
        var mh$ = midiOutGetErrorTextA$MH();
        try {
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutGetErrorTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$675.midiOutGetErrorTextW$MH,"midiOutGetErrorTextW");
    }
    public static int midiOutGetErrorTextW ( int mmrError,  Addressable pszText,  int cchText) {
        var mh$ = midiOutGetErrorTextW$MH();
        try {
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$675.midiOutOpen$MH,"midiOutOpen");
    }
    public static int midiOutOpen ( Addressable phmo,  int uDeviceID,  long dwCallback,  long dwInstance,  int fdwOpen) {
        var mh$ = midiOutOpen$MH();
        try {
            return (int)mh$.invokeExact(phmo, uDeviceID, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutClose$MH() {
        return RuntimeHelper.requireNonNull(constants$675.midiOutClose$MH,"midiOutClose");
    }
    public static int midiOutClose ( Addressable hmo) {
        var mh$ = midiOutClose$MH();
        try {
            return (int)mh$.invokeExact(hmo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutPrepareHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$675.midiOutPrepareHeader$MH,"midiOutPrepareHeader");
    }
    public static int midiOutPrepareHeader ( Addressable hmo,  Addressable pmh,  int cbmh) {
        var mh$ = midiOutPrepareHeader$MH();
        try {
            return (int)mh$.invokeExact(hmo, pmh, cbmh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutUnprepareHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$675.midiOutUnprepareHeader$MH,"midiOutUnprepareHeader");
    }
    public static int midiOutUnprepareHeader ( Addressable hmo,  Addressable pmh,  int cbmh) {
        var mh$ = midiOutUnprepareHeader$MH();
        try {
            return (int)mh$.invokeExact(hmo, pmh, cbmh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutShortMsg$MH() {
        return RuntimeHelper.requireNonNull(constants$675.midiOutShortMsg$MH,"midiOutShortMsg");
    }
    public static int midiOutShortMsg ( Addressable hmo,  int dwMsg) {
        var mh$ = midiOutShortMsg$MH();
        try {
            return (int)mh$.invokeExact(hmo, dwMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutLongMsg$MH() {
        return RuntimeHelper.requireNonNull(constants$676.midiOutLongMsg$MH,"midiOutLongMsg");
    }
    public static int midiOutLongMsg ( Addressable hmo,  Addressable pmh,  int cbmh) {
        var mh$ = midiOutLongMsg$MH();
        try {
            return (int)mh$.invokeExact(hmo, pmh, cbmh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutReset$MH() {
        return RuntimeHelper.requireNonNull(constants$676.midiOutReset$MH,"midiOutReset");
    }
    public static int midiOutReset ( Addressable hmo) {
        var mh$ = midiOutReset$MH();
        try {
            return (int)mh$.invokeExact(hmo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutCachePatches$MH() {
        return RuntimeHelper.requireNonNull(constants$676.midiOutCachePatches$MH,"midiOutCachePatches");
    }
    public static int midiOutCachePatches ( Addressable hmo,  int uBank,  Addressable pwpa,  int fuCache) {
        var mh$ = midiOutCachePatches$MH();
        try {
            return (int)mh$.invokeExact(hmo, uBank, pwpa, fuCache);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutCacheDrumPatches$MH() {
        return RuntimeHelper.requireNonNull(constants$676.midiOutCacheDrumPatches$MH,"midiOutCacheDrumPatches");
    }
    public static int midiOutCacheDrumPatches ( Addressable hmo,  int uPatch,  Addressable pwkya,  int fuCache) {
        var mh$ = midiOutCacheDrumPatches$MH();
        try {
            return (int)mh$.invokeExact(hmo, uPatch, pwkya, fuCache);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutGetID$MH() {
        return RuntimeHelper.requireNonNull(constants$676.midiOutGetID$MH,"midiOutGetID");
    }
    public static int midiOutGetID ( Addressable hmo,  Addressable puDeviceID) {
        var mh$ = midiOutGetID$MH();
        try {
            return (int)mh$.invokeExact(hmo, puDeviceID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiOutMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$676.midiOutMessage$MH,"midiOutMessage");
    }
    public static int midiOutMessage ( Addressable hmo,  int uMsg,  long dw1,  long dw2) {
        var mh$ = midiOutMessage$MH();
        try {
            return (int)mh$.invokeExact(hmo, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInGetNumDevs$MH() {
        return RuntimeHelper.requireNonNull(constants$677.midiInGetNumDevs$MH,"midiInGetNumDevs");
    }
    public static int midiInGetNumDevs () {
        var mh$ = midiInGetNumDevs$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInGetDevCapsA$MH() {
        return RuntimeHelper.requireNonNull(constants$677.midiInGetDevCapsA$MH,"midiInGetDevCapsA");
    }
    public static int midiInGetDevCapsA ( long uDeviceID,  Addressable pmic,  int cbmic) {
        var mh$ = midiInGetDevCapsA$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, pmic, cbmic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInGetDevCapsW$MH() {
        return RuntimeHelper.requireNonNull(constants$677.midiInGetDevCapsW$MH,"midiInGetDevCapsW");
    }
    public static int midiInGetDevCapsW ( long uDeviceID,  Addressable pmic,  int cbmic) {
        var mh$ = midiInGetDevCapsW$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, pmic, cbmic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInGetErrorTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$677.midiInGetErrorTextA$MH,"midiInGetErrorTextA");
    }
    public static int midiInGetErrorTextA ( int mmrError,  Addressable pszText,  int cchText) {
        var mh$ = midiInGetErrorTextA$MH();
        try {
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInGetErrorTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$677.midiInGetErrorTextW$MH,"midiInGetErrorTextW");
    }
    public static int midiInGetErrorTextW ( int mmrError,  Addressable pszText,  int cchText) {
        var mh$ = midiInGetErrorTextW$MH();
        try {
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$677.midiInOpen$MH,"midiInOpen");
    }
    public static int midiInOpen ( Addressable phmi,  int uDeviceID,  long dwCallback,  long dwInstance,  int fdwOpen) {
        var mh$ = midiInOpen$MH();
        try {
            return (int)mh$.invokeExact(phmi, uDeviceID, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInClose$MH() {
        return RuntimeHelper.requireNonNull(constants$678.midiInClose$MH,"midiInClose");
    }
    public static int midiInClose ( Addressable hmi) {
        var mh$ = midiInClose$MH();
        try {
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInPrepareHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$678.midiInPrepareHeader$MH,"midiInPrepareHeader");
    }
    public static int midiInPrepareHeader ( Addressable hmi,  Addressable pmh,  int cbmh) {
        var mh$ = midiInPrepareHeader$MH();
        try {
            return (int)mh$.invokeExact(hmi, pmh, cbmh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInUnprepareHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$678.midiInUnprepareHeader$MH,"midiInUnprepareHeader");
    }
    public static int midiInUnprepareHeader ( Addressable hmi,  Addressable pmh,  int cbmh) {
        var mh$ = midiInUnprepareHeader$MH();
        try {
            return (int)mh$.invokeExact(hmi, pmh, cbmh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInAddBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$678.midiInAddBuffer$MH,"midiInAddBuffer");
    }
    public static int midiInAddBuffer ( Addressable hmi,  Addressable pmh,  int cbmh) {
        var mh$ = midiInAddBuffer$MH();
        try {
            return (int)mh$.invokeExact(hmi, pmh, cbmh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInStart$MH() {
        return RuntimeHelper.requireNonNull(constants$678.midiInStart$MH,"midiInStart");
    }
    public static int midiInStart ( Addressable hmi) {
        var mh$ = midiInStart$MH();
        try {
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInStop$MH() {
        return RuntimeHelper.requireNonNull(constants$678.midiInStop$MH,"midiInStop");
    }
    public static int midiInStop ( Addressable hmi) {
        var mh$ = midiInStop$MH();
        try {
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInReset$MH() {
        return RuntimeHelper.requireNonNull(constants$679.midiInReset$MH,"midiInReset");
    }
    public static int midiInReset ( Addressable hmi) {
        var mh$ = midiInReset$MH();
        try {
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInGetID$MH() {
        return RuntimeHelper.requireNonNull(constants$679.midiInGetID$MH,"midiInGetID");
    }
    public static int midiInGetID ( Addressable hmi,  Addressable puDeviceID) {
        var mh$ = midiInGetID$MH();
        try {
            return (int)mh$.invokeExact(hmi, puDeviceID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle midiInMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$679.midiInMessage$MH,"midiInMessage");
    }
    public static int midiInMessage ( Addressable hmi,  int uMsg,  long dw1,  long dw2) {
        var mh$ = midiInMessage$MH();
        try {
            return (int)mh$.invokeExact(hmi, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PAUXCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPAUXCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAUXCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAUXCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPAUXCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAUXCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAUXCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPAUXCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAUXCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAUXCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPAUXCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAUXCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAUXCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPAUXCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAUXCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAUXCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPAUXCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAUXCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle auxGetNumDevs$MH() {
        return RuntimeHelper.requireNonNull(constants$679.auxGetNumDevs$MH,"auxGetNumDevs");
    }
    public static int auxGetNumDevs () {
        var mh$ = auxGetNumDevs$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle auxGetDevCapsA$MH() {
        return RuntimeHelper.requireNonNull(constants$679.auxGetDevCapsA$MH,"auxGetDevCapsA");
    }
    public static int auxGetDevCapsA ( long uDeviceID,  Addressable pac,  int cbac) {
        var mh$ = auxGetDevCapsA$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, pac, cbac);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle auxGetDevCapsW$MH() {
        return RuntimeHelper.requireNonNull(constants$679.auxGetDevCapsW$MH,"auxGetDevCapsW");
    }
    public static int auxGetDevCapsW ( long uDeviceID,  Addressable pac,  int cbac) {
        var mh$ = auxGetDevCapsW$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, pac, cbac);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle auxSetVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$680.auxSetVolume$MH,"auxSetVolume");
    }
    public static int auxSetVolume ( int uDeviceID,  int dwVolume) {
        var mh$ = auxSetVolume$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, dwVolume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle auxGetVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$680.auxGetVolume$MH,"auxGetVolume");
    }
    public static int auxGetVolume ( int uDeviceID,  Addressable pdwVolume) {
        var mh$ = auxGetVolume$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, pdwVolume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle auxOutMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$680.auxOutMessage$MH,"auxOutMessage");
    }
    public static int auxOutMessage ( int uDeviceID,  int uMsg,  long dw1,  long dw2) {
        var mh$ = auxOutMessage$MH();
        try {
            return (int)mh$.invokeExact(uDeviceID, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HMIXEROBJ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHMIXEROBJ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMIXER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHMIXER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mixerGetNumDevs$MH() {
        return RuntimeHelper.requireNonNull(constants$680.mixerGetNumDevs$MH,"mixerGetNumDevs");
    }
    public static int mixerGetNumDevs () {
        var mh$ = mixerGetNumDevs$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMIXERCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mixerGetDevCapsA$MH() {
        return RuntimeHelper.requireNonNull(constants$680.mixerGetDevCapsA$MH,"mixerGetDevCapsA");
    }
    public static int mixerGetDevCapsA ( long uMxId,  Addressable pmxcaps,  int cbmxcaps) {
        var mh$ = mixerGetDevCapsA$MH();
        try {
            return (int)mh$.invokeExact(uMxId, pmxcaps, cbmxcaps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mixerGetDevCapsW$MH() {
        return RuntimeHelper.requireNonNull(constants$680.mixerGetDevCapsW$MH,"mixerGetDevCapsW");
    }
    public static int mixerGetDevCapsW ( long uMxId,  Addressable pmxcaps,  int cbmxcaps) {
        var mh$ = mixerGetDevCapsW$MH();
        try {
            return (int)mh$.invokeExact(uMxId, pmxcaps, cbmxcaps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mixerOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$681.mixerOpen$MH,"mixerOpen");
    }
    public static int mixerOpen ( Addressable phmx,  int uMxId,  long dwCallback,  long dwInstance,  int fdwOpen) {
        var mh$ = mixerOpen$MH();
        try {
            return (int)mh$.invokeExact(phmx, uMxId, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mixerClose$MH() {
        return RuntimeHelper.requireNonNull(constants$681.mixerClose$MH,"mixerClose");
    }
    public static int mixerClose ( Addressable hmx) {
        var mh$ = mixerClose$MH();
        try {
            return (int)mh$.invokeExact(hmx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mixerMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$681.mixerMessage$MH,"mixerMessage");
    }
    public static int mixerMessage ( Addressable hmx,  int uMsg,  long dwParam1,  long dwParam2) {
        var mh$ = mixerMessage$MH();
        try {
            return (int)mh$.invokeExact(hmx, uMsg, dwParam1, dwParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMIXERLINEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERLINEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERLINEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERLINEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERLINE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERLINE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mixerGetLineInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$681.mixerGetLineInfoA$MH,"mixerGetLineInfoA");
    }
    public static int mixerGetLineInfoA ( Addressable hmxobj,  Addressable pmxl,  int fdwInfo) {
        var mh$ = mixerGetLineInfoA$MH();
        try {
            return (int)mh$.invokeExact(hmxobj, pmxl, fdwInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mixerGetLineInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$681.mixerGetLineInfoW$MH,"mixerGetLineInfoW");
    }
    public static int mixerGetLineInfoW ( Addressable hmxobj,  Addressable pmxl,  int fdwInfo) {
        var mh$ = mixerGetLineInfoW$MH();
        try {
            return (int)mh$.invokeExact(hmxobj, pmxl, fdwInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mixerGetID$MH() {
        return RuntimeHelper.requireNonNull(constants$681.mixerGetID$MH,"mixerGetID");
    }
    public static int mixerGetID ( Addressable hmxobj,  Addressable puMxId,  int fdwId) {
        var mh$ = mixerGetID$MH();
        try {
            return (int)mh$.invokeExact(hmxobj, puMxId, fdwId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMIXERCONTROLA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCONTROLA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCONTROLW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCONTROLW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCONTROL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCONTROL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERLINECONTROLSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERLINECONTROLSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERLINECONTROLSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERLINECONTROLSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERLINECONTROLS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERLINECONTROLS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mixerGetLineControlsA$MH() {
        return RuntimeHelper.requireNonNull(constants$682.mixerGetLineControlsA$MH,"mixerGetLineControlsA");
    }
    public static int mixerGetLineControlsA ( Addressable hmxobj,  Addressable pmxlc,  int fdwControls) {
        var mh$ = mixerGetLineControlsA$MH();
        try {
            return (int)mh$.invokeExact(hmxobj, pmxlc, fdwControls);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mixerGetLineControlsW$MH() {
        return RuntimeHelper.requireNonNull(constants$682.mixerGetLineControlsW$MH,"mixerGetLineControlsW");
    }
    public static int mixerGetLineControlsW ( Addressable hmxobj,  Addressable pmxlc,  int fdwControls) {
        var mh$ = mixerGetLineControlsW$MH();
        try {
            return (int)mh$.invokeExact(hmxobj, pmxlc, fdwControls);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMIXERCONTROLDETAILS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCONTROLDETAILS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCONTROLDETAILS_LISTTEXTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCONTROLDETAILS_LISTTEXTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCONTROLDETAILS_LISTTEXTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCONTROLDETAILS_LISTTEXTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCONTROLDETAILS_LISTTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCONTROLDETAILS_LISTTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCONTROLDETAILS_BOOLEAN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCONTROLDETAILS_BOOLEAN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCONTROLDETAILS_SIGNED = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCONTROLDETAILS_SIGNED = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIXERCONTROLDETAILS_UNSIGNED = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMIXERCONTROLDETAILS_UNSIGNED = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mixerGetControlDetailsA$MH() {
        return RuntimeHelper.requireNonNull(constants$682.mixerGetControlDetailsA$MH,"mixerGetControlDetailsA");
    }
    public static int mixerGetControlDetailsA ( Addressable hmxobj,  Addressable pmxcd,  int fdwDetails) {
        var mh$ = mixerGetControlDetailsA$MH();
        try {
            return (int)mh$.invokeExact(hmxobj, pmxcd, fdwDetails);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mixerGetControlDetailsW$MH() {
        return RuntimeHelper.requireNonNull(constants$682.mixerGetControlDetailsW$MH,"mixerGetControlDetailsW");
    }
    public static int mixerGetControlDetailsW ( Addressable hmxobj,  Addressable pmxcd,  int fdwDetails) {
        var mh$ = mixerGetControlDetailsW$MH();
        try {
            return (int)mh$.invokeExact(hmxobj, pmxcd, fdwDetails);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mixerSetControlDetails$MH() {
        return RuntimeHelper.requireNonNull(constants$682.mixerSetControlDetails$MH,"mixerSetControlDetails");
    }
    public static int mixerSetControlDetails ( Addressable hmxobj,  Addressable pmxcd,  int fdwDetails) {
        var mh$ = mixerSetControlDetails$MH();
        try {
            return (int)mh$.invokeExact(hmxobj, pmxcd, fdwDetails);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTIMECAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPTIMECAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTIMECAPS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle timeGetSystemTime$MH() {
        return RuntimeHelper.requireNonNull(constants$682.timeGetSystemTime$MH,"timeGetSystemTime");
    }
    public static int timeGetSystemTime ( Addressable pmmt,  int cbmmt) {
        var mh$ = timeGetSystemTime$MH();
        try {
            return (int)mh$.invokeExact(pmmt, cbmmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timeGetTime$MH() {
        return RuntimeHelper.requireNonNull(constants$683.timeGetTime$MH,"timeGetTime");
    }
    public static int timeGetTime () {
        var mh$ = timeGetTime$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timeGetDevCaps$MH() {
        return RuntimeHelper.requireNonNull(constants$683.timeGetDevCaps$MH,"timeGetDevCaps");
    }
    public static int timeGetDevCaps ( Addressable ptc,  int cbtc) {
        var mh$ = timeGetDevCaps$MH();
        try {
            return (int)mh$.invokeExact(ptc, cbtc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timeBeginPeriod$MH() {
        return RuntimeHelper.requireNonNull(constants$683.timeBeginPeriod$MH,"timeBeginPeriod");
    }
    public static int timeBeginPeriod ( int uPeriod) {
        var mh$ = timeBeginPeriod$MH();
        try {
            return (int)mh$.invokeExact(uPeriod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timeEndPeriod$MH() {
        return RuntimeHelper.requireNonNull(constants$683.timeEndPeriod$MH,"timeEndPeriod");
    }
    public static int timeEndPeriod ( int uPeriod) {
        var mh$ = timeEndPeriod$MH();
        try {
            return (int)mh$.invokeExact(uPeriod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PJOYCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPJOYCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOYCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOYCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPJOYCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOYCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOYCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPJOYCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOYCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOYCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPJOYCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOYCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOYCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPJOYCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOYCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOYCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPJOYCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOYCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOYINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPJOYINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOYINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOYINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPJOYINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPJOYINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle joyGetPosEx$MH() {
        return RuntimeHelper.requireNonNull(constants$683.joyGetPosEx$MH,"joyGetPosEx");
    }
    public static int joyGetPosEx ( int uJoyID,  Addressable pji) {
        var mh$ = joyGetPosEx$MH();
        try {
            return (int)mh$.invokeExact(uJoyID, pji);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle joyGetNumDevs$MH() {
        return RuntimeHelper.requireNonNull(constants$683.joyGetNumDevs$MH,"joyGetNumDevs");
    }
    public static int joyGetNumDevs () {
        var mh$ = joyGetNumDevs$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle joyGetDevCapsA$MH() {
        return RuntimeHelper.requireNonNull(constants$684.joyGetDevCapsA$MH,"joyGetDevCapsA");
    }
    public static int joyGetDevCapsA ( long uJoyID,  Addressable pjc,  int cbjc) {
        var mh$ = joyGetDevCapsA$MH();
        try {
            return (int)mh$.invokeExact(uJoyID, pjc, cbjc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle joyGetDevCapsW$MH() {
        return RuntimeHelper.requireNonNull(constants$684.joyGetDevCapsW$MH,"joyGetDevCapsW");
    }
    public static int joyGetDevCapsW ( long uJoyID,  Addressable pjc,  int cbjc) {
        var mh$ = joyGetDevCapsW$MH();
        try {
            return (int)mh$.invokeExact(uJoyID, pjc, cbjc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle joyGetPos$MH() {
        return RuntimeHelper.requireNonNull(constants$684.joyGetPos$MH,"joyGetPos");
    }
    public static int joyGetPos ( int uJoyID,  Addressable pji) {
        var mh$ = joyGetPos$MH();
        try {
            return (int)mh$.invokeExact(uJoyID, pji);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle joyGetThreshold$MH() {
        return RuntimeHelper.requireNonNull(constants$684.joyGetThreshold$MH,"joyGetThreshold");
    }
    public static int joyGetThreshold ( int uJoyID,  Addressable puThreshold) {
        var mh$ = joyGetThreshold$MH();
        try {
            return (int)mh$.invokeExact(uJoyID, puThreshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle joyReleaseCapture$MH() {
        return RuntimeHelper.requireNonNull(constants$684.joyReleaseCapture$MH,"joyReleaseCapture");
    }
    public static int joyReleaseCapture ( int uJoyID) {
        var mh$ = joyReleaseCapture$MH();
        try {
            return (int)mh$.invokeExact(uJoyID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle joySetCapture$MH() {
        return RuntimeHelper.requireNonNull(constants$684.joySetCapture$MH,"joySetCapture");
    }
    public static int joySetCapture ( Addressable hwnd,  int uJoyID,  int uPeriod,  int fChanged) {
        var mh$ = joySetCapture$MH();
        try {
            return (int)mh$.invokeExact(hwnd, uJoyID, uPeriod, fChanged);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle joySetThreshold$MH() {
        return RuntimeHelper.requireNonNull(constants$685.joySetThreshold$MH,"joySetThreshold");
    }
    public static int joySetThreshold ( int uJoyID,  int uThreshold) {
        var mh$ = joySetThreshold$MH();
        try {
            return (int)mh$.invokeExact(uJoyID, uThreshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle joyConfigChanged$MH() {
        return RuntimeHelper.requireNonNull(constants$685.joyConfigChanged$MH,"joyConfigChanged");
    }
    public static int joyConfigChanged ( int dwFlags) {
        var mh$ = joyConfigChanged$MH();
        try {
            return (int)mh$.invokeExact(dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PNCB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADAPTER_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNAME_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSESSION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSESSION_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLANA_ENUM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFIND_NAME_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFIND_NAME_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACTION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle Netbios$MH() {
        return RuntimeHelper.requireNonNull(constants$685.Netbios$MH,"Netbios");
    }
    public static byte Netbios ( Addressable pncb) {
        var mh$ = Netbios$MH();
        try {
            return (byte)mh$.invokeExact(pncb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress I_RPC_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfInt RPC_STATUS = Constants$root.C_LONG$LAYOUT;
    public static OfAddress RPC_CSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress RPC_WSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress RPC_CWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress RPC_BINDING_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress handle_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress RPC_IF_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRPC_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RpcBindingCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$686.RpcBindingCopy$MH,"RpcBindingCopy");
    }
    public static int RpcBindingCopy ( Addressable SourceBinding,  Addressable DestinationBinding) {
        var mh$ = RpcBindingCopy$MH();
        try {
            return (int)mh$.invokeExact(SourceBinding, DestinationBinding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingFree$MH() {
        return RuntimeHelper.requireNonNull(constants$686.RpcBindingFree$MH,"RpcBindingFree");
    }
    public static int RpcBindingFree ( Addressable Binding) {
        var mh$ = RpcBindingFree$MH();
        try {
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingSetOption$MH() {
        return RuntimeHelper.requireNonNull(constants$686.RpcBindingSetOption$MH,"RpcBindingSetOption");
    }
    public static int RpcBindingSetOption ( Addressable hBinding,  int option,  long optionValue) {
        var mh$ = RpcBindingSetOption$MH();
        try {
            return (int)mh$.invokeExact(hBinding, option, optionValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingInqOption$MH() {
        return RuntimeHelper.requireNonNull(constants$687.RpcBindingInqOption$MH,"RpcBindingInqOption");
    }
    public static int RpcBindingInqOption ( Addressable hBinding,  int option,  Addressable pOptionValue) {
        var mh$ = RpcBindingInqOption$MH();
        try {
            return (int)mh$.invokeExact(hBinding, option, pOptionValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingFromStringBindingA$MH() {
        return RuntimeHelper.requireNonNull(constants$687.RpcBindingFromStringBindingA$MH,"RpcBindingFromStringBindingA");
    }
    public static int RpcBindingFromStringBindingA ( Addressable StringBinding,  Addressable Binding) {
        var mh$ = RpcBindingFromStringBindingA$MH();
        try {
            return (int)mh$.invokeExact(StringBinding, Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingFromStringBindingW$MH() {
        return RuntimeHelper.requireNonNull(constants$687.RpcBindingFromStringBindingW$MH,"RpcBindingFromStringBindingW");
    }
    public static int RpcBindingFromStringBindingW ( Addressable StringBinding,  Addressable Binding) {
        var mh$ = RpcBindingFromStringBindingW$MH();
        try {
            return (int)mh$.invokeExact(StringBinding, Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsGetContextBinding$MH() {
        return RuntimeHelper.requireNonNull(constants$687.RpcSsGetContextBinding$MH,"RpcSsGetContextBinding");
    }
    public static int RpcSsGetContextBinding ( Addressable ContextHandle,  Addressable Binding) {
        var mh$ = RpcSsGetContextBinding$MH();
        try {
            return (int)mh$.invokeExact(ContextHandle, Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingInqObject$MH() {
        return RuntimeHelper.requireNonNull(constants$687.RpcBindingInqObject$MH,"RpcBindingInqObject");
    }
    public static int RpcBindingInqObject ( Addressable Binding,  Addressable ObjectUuid) {
        var mh$ = RpcBindingInqObject$MH();
        try {
            return (int)mh$.invokeExact(Binding, ObjectUuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingReset$MH() {
        return RuntimeHelper.requireNonNull(constants$687.RpcBindingReset$MH,"RpcBindingReset");
    }
    public static int RpcBindingReset ( Addressable Binding) {
        var mh$ = RpcBindingReset$MH();
        try {
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingSetObject$MH() {
        return RuntimeHelper.requireNonNull(constants$688.RpcBindingSetObject$MH,"RpcBindingSetObject");
    }
    public static int RpcBindingSetObject ( Addressable Binding,  Addressable ObjectUuid) {
        var mh$ = RpcBindingSetObject$MH();
        try {
            return (int)mh$.invokeExact(Binding, ObjectUuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtInqDefaultProtectLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$688.RpcMgmtInqDefaultProtectLevel$MH,"RpcMgmtInqDefaultProtectLevel");
    }
    public static int RpcMgmtInqDefaultProtectLevel ( int AuthnSvc,  Addressable AuthnLevel) {
        var mh$ = RpcMgmtInqDefaultProtectLevel$MH();
        try {
            return (int)mh$.invokeExact(AuthnSvc, AuthnLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingToStringBindingA$MH() {
        return RuntimeHelper.requireNonNull(constants$688.RpcBindingToStringBindingA$MH,"RpcBindingToStringBindingA");
    }
    public static int RpcBindingToStringBindingA ( Addressable Binding,  Addressable StringBinding) {
        var mh$ = RpcBindingToStringBindingA$MH();
        try {
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingToStringBindingW$MH() {
        return RuntimeHelper.requireNonNull(constants$688.RpcBindingToStringBindingW$MH,"RpcBindingToStringBindingW");
    }
    public static int RpcBindingToStringBindingW ( Addressable Binding,  Addressable StringBinding) {
        var mh$ = RpcBindingToStringBindingW$MH();
        try {
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcBindingVectorFree$MH() {
        return RuntimeHelper.requireNonNull(constants$688.RpcBindingVectorFree$MH,"RpcBindingVectorFree");
    }
    public static int RpcBindingVectorFree ( Addressable BindingVector) {
        var mh$ = RpcBindingVectorFree$MH();
        try {
            return (int)mh$.invokeExact(BindingVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcStringBindingComposeA$MH() {
        return RuntimeHelper.requireNonNull(constants$688.RpcStringBindingComposeA$MH,"RpcStringBindingComposeA");
    }
    public static int RpcStringBindingComposeA ( Addressable ObjUuid,  Addressable ProtSeq,  Addressable NetworkAddr,  Addressable Endpoint,  Addressable Options,  Addressable StringBinding) {
        var mh$ = RpcStringBindingComposeA$MH();
        try {
            return (int)mh$.invokeExact(ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcStringBindingComposeW$MH() {
        return RuntimeHelper.requireNonNull(constants$689.RpcStringBindingComposeW$MH,"RpcStringBindingComposeW");
    }
    public static int RpcStringBindingComposeW ( Addressable ObjUuid,  Addressable ProtSeq,  Addressable NetworkAddr,  Addressable Endpoint,  Addressable Options,  Addressable StringBinding) {
        var mh$ = RpcStringBindingComposeW$MH();
        try {
            return (int)mh$.invokeExact(ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcStringBindingParseA$MH() {
        return RuntimeHelper.requireNonNull(constants$689.RpcStringBindingParseA$MH,"RpcStringBindingParseA");
    }
    public static int RpcStringBindingParseA ( Addressable StringBinding,  Addressable ObjUuid,  Addressable Protseq,  Addressable NetworkAddr,  Addressable Endpoint,  Addressable NetworkOptions) {
        var mh$ = RpcStringBindingParseA$MH();
        try {
            return (int)mh$.invokeExact(StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcStringBindingParseW$MH() {
        return RuntimeHelper.requireNonNull(constants$689.RpcStringBindingParseW$MH,"RpcStringBindingParseW");
    }
    public static int RpcStringBindingParseW ( Addressable StringBinding,  Addressable ObjUuid,  Addressable Protseq,  Addressable NetworkAddr,  Addressable Endpoint,  Addressable NetworkOptions) {
        var mh$ = RpcStringBindingParseW$MH();
        try {
            return (int)mh$.invokeExact(StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcStringFreeA$MH() {
        return RuntimeHelper.requireNonNull(constants$689.RpcStringFreeA$MH,"RpcStringFreeA");
    }
    public static int RpcStringFreeA ( Addressable String_) {
        var mh$ = RpcStringFreeA$MH();
        try {
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcStringFreeW$MH() {
        return RuntimeHelper.requireNonNull(constants$689.RpcStringFreeW$MH,"RpcStringFreeW");
    }
    public static int RpcStringFreeW ( Addressable String_) {
        var mh$ = RpcStringFreeW$MH();
        try {
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcIfInqId$MH() {
        return RuntimeHelper.requireNonNull(constants$689.RpcIfInqId$MH,"RpcIfInqId");
    }
    public static int RpcIfInqId ( Addressable RpcIfHandle,  Addressable RpcIfId) {
        var mh$ = RpcIfInqId$MH();
        try {
            return (int)mh$.invokeExact(RpcIfHandle, RpcIfId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNetworkIsProtseqValidA$MH() {
        return RuntimeHelper.requireNonNull(constants$690.RpcNetworkIsProtseqValidA$MH,"RpcNetworkIsProtseqValidA");
    }
    public static int RpcNetworkIsProtseqValidA ( Addressable Protseq) {
        var mh$ = RpcNetworkIsProtseqValidA$MH();
        try {
            return (int)mh$.invokeExact(Protseq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNetworkIsProtseqValidW$MH() {
        return RuntimeHelper.requireNonNull(constants$690.RpcNetworkIsProtseqValidW$MH,"RpcNetworkIsProtseqValidW");
    }
    public static int RpcNetworkIsProtseqValidW ( Addressable Protseq) {
        var mh$ = RpcNetworkIsProtseqValidW$MH();
        try {
            return (int)mh$.invokeExact(Protseq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtInqComTimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$690.RpcMgmtInqComTimeout$MH,"RpcMgmtInqComTimeout");
    }
    public static int RpcMgmtInqComTimeout ( Addressable Binding,  Addressable Timeout) {
        var mh$ = RpcMgmtInqComTimeout$MH();
        try {
            return (int)mh$.invokeExact(Binding, Timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtSetComTimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$690.RpcMgmtSetComTimeout$MH,"RpcMgmtSetComTimeout");
    }
    public static int RpcMgmtSetComTimeout ( Addressable Binding,  int Timeout) {
        var mh$ = RpcMgmtSetComTimeout$MH();
        try {
            return (int)mh$.invokeExact(Binding, Timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcMgmtSetCancelTimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$690.RpcMgmtSetCancelTimeout$MH,"RpcMgmtSetCancelTimeout");
    }
    public static int RpcMgmtSetCancelTimeout ( int Timeout) {
        var mh$ = RpcMgmtSetCancelTimeout$MH();
        try {
            return (int)mh$.invokeExact(Timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNetworkInqProtseqsA$MH() {
        return RuntimeHelper.requireNonNull(constants$690.RpcNetworkInqProtseqsA$MH,"RpcNetworkInqProtseqsA");
    }
    public static int RpcNetworkInqProtseqsA ( Addressable ProtseqVector) {
        var mh$ = RpcNetworkInqProtseqsA$MH();
        try {
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcNetworkInqProtseqsW$MH() {
        return RuntimeHelper.requireNonNull(constants$691.RpcNetworkInqProtseqsW$MH,"RpcNetworkInqProtseqsW");
    }
    public static int RpcNetworkInqProtseqsW ( Addressable ProtseqVector) {
        var mh$ = RpcNetworkInqProtseqsW$MH();
        try {
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcObjectInqType$MH() {
        return RuntimeHelper.requireNonNull(constants$691.RpcObjectInqType$MH,"RpcObjectInqType");
    }
    public static int RpcObjectInqType ( Addressable ObjUuid,  Addressable TypeUuid) {
        var mh$ = RpcObjectInqType$MH();
        try {
            return (int)mh$.invokeExact(ObjUuid, TypeUuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcObjectSetInqFn$MH() {
        return RuntimeHelper.requireNonNull(constants$691.RpcObjectSetInqFn$MH,"RpcObjectSetInqFn");
    }
    public static int RpcObjectSetInqFn ( Addressable InquiryFn) {
        var mh$ = RpcObjectSetInqFn$MH();
        try {
            return (int)mh$.invokeExact(InquiryFn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcObjectSetType$MH() {
        return RuntimeHelper.requireNonNull(constants$691.RpcObjectSetType$MH,"RpcObjectSetType");
    }
    public static int RpcObjectSetType ( Addressable ObjUuid,  Addressable TypeUuid) {
        var mh$ = RpcObjectSetType$MH();
        try {
            return (int)mh$.invokeExact(ObjUuid, TypeUuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcProtseqVectorFreeA$MH() {
        return RuntimeHelper.requireNonNull(constants$692.RpcProtseqVectorFreeA$MH,"RpcProtseqVectorFreeA");
    }
    public static int RpcProtseqVectorFreeA ( Addressable ProtseqVector) {
        var mh$ = RpcProtseqVectorFreeA$MH();
        try {
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcProtseqVectorFreeW$MH() {
        return RuntimeHelper.requireNonNull(constants$692.RpcProtseqVectorFreeW$MH,"RpcProtseqVectorFreeW");
    }
    public static int RpcProtseqVectorFreeW ( Addressable ProtseqVector) {
        var mh$ = RpcProtseqVectorFreeW$MH();
        try {
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInqBindings$MH() {
        return RuntimeHelper.requireNonNull(constants$692.RpcServerInqBindings$MH,"RpcServerInqBindings");
    }
    public static int RpcServerInqBindings ( Addressable BindingVector) {
        var mh$ = RpcServerInqBindings$MH();
        try {
            return (int)mh$.invokeExact(BindingVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInqBindingsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$692.RpcServerInqBindingsEx$MH,"RpcServerInqBindingsEx");
    }
    public static int RpcServerInqBindingsEx ( Addressable SecurityDescriptor,  Addressable BindingVector) {
        var mh$ = RpcServerInqBindingsEx$MH();
        try {
            return (int)mh$.invokeExact(SecurityDescriptor, BindingVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerInqIf$MH() {
        return RuntimeHelper.requireNonNull(constants$692.RpcServerInqIf$MH,"RpcServerInqIf");
    }
    public static int RpcServerInqIf ( Addressable IfSpec,  Addressable MgrTypeUuid,  Addressable MgrEpv) {
        var mh$ = RpcServerInqIf$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerListen$MH() {
        return RuntimeHelper.requireNonNull(constants$692.RpcServerListen$MH,"RpcServerListen");
    }
    public static int RpcServerListen ( int MinimumCallThreads,  int MaxCalls,  int DontWait) {
        var mh$ = RpcServerListen$MH();
        try {
            return (int)mh$.invokeExact(MinimumCallThreads, MaxCalls, DontWait);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerRegisterIf$MH() {
        return RuntimeHelper.requireNonNull(constants$693.RpcServerRegisterIf$MH,"RpcServerRegisterIf");
    }
    public static int RpcServerRegisterIf ( Addressable IfSpec,  Addressable MgrTypeUuid,  Addressable MgrEpv) {
        var mh$ = RpcServerRegisterIf$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerRegisterIfEx$MH() {
        return RuntimeHelper.requireNonNull(constants$693.RpcServerRegisterIfEx$MH,"RpcServerRegisterIfEx");
    }
    public static int RpcServerRegisterIfEx ( Addressable IfSpec,  Addressable MgrTypeUuid,  Addressable MgrEpv,  int Flags,  int MaxCalls,  Addressable IfCallback) {
        var mh$ = RpcServerRegisterIfEx$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, IfCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerRegisterIf2$MH() {
        return RuntimeHelper.requireNonNull(constants$694.RpcServerRegisterIf2$MH,"RpcServerRegisterIf2");
    }
    public static int RpcServerRegisterIf2 ( Addressable IfSpec,  Addressable MgrTypeUuid,  Addressable MgrEpv,  int Flags,  int MaxCalls,  int MaxRpcSize,  Addressable IfCallbackFn) {
        var mh$ = RpcServerRegisterIf2$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallbackFn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerRegisterIf3$MH() {
        return RuntimeHelper.requireNonNull(constants$694.RpcServerRegisterIf3$MH,"RpcServerRegisterIf3");
    }
    public static int RpcServerRegisterIf3 ( Addressable IfSpec,  Addressable MgrTypeUuid,  Addressable MgrEpv,  int Flags,  int MaxCalls,  int MaxRpcSize,  Addressable IfCallback,  Addressable SecurityDescriptor) {
        var mh$ = RpcServerRegisterIf3$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallback, SecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUnregisterIf$MH() {
        return RuntimeHelper.requireNonNull(constants$694.RpcServerUnregisterIf$MH,"RpcServerUnregisterIf");
    }
    public static int RpcServerUnregisterIf ( Addressable IfSpec,  Addressable MgrTypeUuid,  int WaitForCallsToComplete) {
        var mh$ = RpcServerUnregisterIf$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, WaitForCallsToComplete);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUnregisterIfEx$MH() {
        return RuntimeHelper.requireNonNull(constants$694.RpcServerUnregisterIfEx$MH,"RpcServerUnregisterIfEx");
    }
    public static int RpcServerUnregisterIfEx ( Addressable IfSpec,  Addressable MgrTypeUuid,  int RundownContextHandles) {
        var mh$ = RpcServerUnregisterIfEx$MH();
        try {
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, RundownContextHandles);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseAllProtseqs$MH() {
        return RuntimeHelper.requireNonNull(constants$695.RpcServerUseAllProtseqs$MH,"RpcServerUseAllProtseqs");
    }
    public static int RpcServerUseAllProtseqs ( int MaxCalls,  Addressable SecurityDescriptor) {
        var mh$ = RpcServerUseAllProtseqs$MH();
        try {
            return (int)mh$.invokeExact(MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseAllProtseqsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$695.RpcServerUseAllProtseqsEx$MH,"RpcServerUseAllProtseqsEx");
    }
    public static int RpcServerUseAllProtseqsEx ( int MaxCalls,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = RpcServerUseAllProtseqsEx$MH();
        try {
            return (int)mh$.invokeExact(MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseAllProtseqsIf$MH() {
        return RuntimeHelper.requireNonNull(constants$695.RpcServerUseAllProtseqsIf$MH,"RpcServerUseAllProtseqsIf");
    }
    public static int RpcServerUseAllProtseqsIf ( int MaxCalls,  Addressable IfSpec,  Addressable SecurityDescriptor) {
        var mh$ = RpcServerUseAllProtseqsIf$MH();
        try {
            return (int)mh$.invokeExact(MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseAllProtseqsIfEx$MH() {
        return RuntimeHelper.requireNonNull(constants$695.RpcServerUseAllProtseqsIfEx$MH,"RpcServerUseAllProtseqsIfEx");
    }
    public static int RpcServerUseAllProtseqsIfEx ( int MaxCalls,  Addressable IfSpec,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = RpcServerUseAllProtseqsIfEx$MH();
        try {
            return (int)mh$.invokeExact(MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseProtseqA$MH() {
        return RuntimeHelper.requireNonNull(constants$695.RpcServerUseProtseqA$MH,"RpcServerUseProtseqA");
    }
    public static int RpcServerUseProtseqA ( Addressable Protseq,  int MaxCalls,  Addressable SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqA$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseProtseqExA$MH() {
        return RuntimeHelper.requireNonNull(constants$695.RpcServerUseProtseqExA$MH,"RpcServerUseProtseqExA");
    }
    public static int RpcServerUseProtseqExA ( Addressable Protseq,  int MaxCalls,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = RpcServerUseProtseqExA$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseProtseqW$MH() {
        return RuntimeHelper.requireNonNull(constants$696.RpcServerUseProtseqW$MH,"RpcServerUseProtseqW");
    }
    public static int RpcServerUseProtseqW ( Addressable Protseq,  int MaxCalls,  Addressable SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqW$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseProtseqExW$MH() {
        return RuntimeHelper.requireNonNull(constants$696.RpcServerUseProtseqExW$MH,"RpcServerUseProtseqExW");
    }
    public static int RpcServerUseProtseqExW ( Addressable Protseq,  int MaxCalls,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = RpcServerUseProtseqExW$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseProtseqEpA$MH() {
        return RuntimeHelper.requireNonNull(constants$696.RpcServerUseProtseqEpA$MH,"RpcServerUseProtseqEpA");
    }
    public static int RpcServerUseProtseqEpA ( Addressable Protseq,  int MaxCalls,  Addressable Endpoint,  Addressable SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqEpA$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseProtseqEpExA$MH() {
        return RuntimeHelper.requireNonNull(constants$696.RpcServerUseProtseqEpExA$MH,"RpcServerUseProtseqEpExA");
    }
    public static int RpcServerUseProtseqEpExA ( Addressable Protseq,  int MaxCalls,  Addressable Endpoint,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = RpcServerUseProtseqEpExA$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseProtseqEpW$MH() {
        return RuntimeHelper.requireNonNull(constants$696.RpcServerUseProtseqEpW$MH,"RpcServerUseProtseqEpW");
    }
    public static int RpcServerUseProtseqEpW ( Addressable Protseq,  int MaxCalls,  Addressable Endpoint,  Addressable SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqEpW$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseProtseqEpExW$MH() {
        return RuntimeHelper.requireNonNull(constants$696.RpcServerUseProtseqEpExW$MH,"RpcServerUseProtseqEpExW");
    }
    public static int RpcServerUseProtseqEpExW ( Addressable Protseq,  int MaxCalls,  Addressable Endpoint,  Addressable SecurityDescriptor,  Addressable Policy) {
        var mh$ = RpcServerUseProtseqEpExW$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcServerUseProtseqIfA$MH() {
        return RuntimeHelper.requireNonNull(constants$697.RpcServerUseProtseqIfA$MH,"RpcServerUseProtseqIfA");
    }
    public static int RpcServerUseProtseqIfA ( Addressable Protseq,  int MaxCalls,  Addressable IfSpec,  Addressable SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqIfA$MH();
        try {
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


