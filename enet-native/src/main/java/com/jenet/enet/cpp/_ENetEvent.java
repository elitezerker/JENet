// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetEvent {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("peer"),
        Constants$root.C_CHAR$LAYOUT.withName("channelID"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_LONG$LAYOUT.withName("data"),
        Constants$root.C_POINTER$LAYOUT.withName("packet")
    ).withName("_ENetEvent");
    public static MemoryLayout $LAYOUT() {
        return _ENetEvent.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _ENetEvent.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)_ENetEvent.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        _ENetEvent.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)_ENetEvent.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        _ENetEvent.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle peer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("peer"));
    public static VarHandle peer$VH() {
        return _ENetEvent.peer$VH;
    }
    public static MemoryAddress peer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetEvent.peer$VH.get(seg);
    }
    public static void peer$set( MemorySegment seg, MemoryAddress x) {
        _ENetEvent.peer$VH.set(seg, x);
    }
    public static MemoryAddress peer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetEvent.peer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void peer$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetEvent.peer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle channelID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("channelID"));
    public static VarHandle channelID$VH() {
        return _ENetEvent.channelID$VH;
    }
    public static byte channelID$get(MemorySegment seg) {
        return (byte)_ENetEvent.channelID$VH.get(seg);
    }
    public static void channelID$set( MemorySegment seg, byte x) {
        _ENetEvent.channelID$VH.set(seg, x);
    }
    public static byte channelID$get(MemorySegment seg, long index) {
        return (byte)_ENetEvent.channelID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void channelID$set(MemorySegment seg, long index, byte x) {
        _ENetEvent.channelID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return _ENetEvent.data$VH;
    }
    public static int data$get(MemorySegment seg) {
        return (int)_ENetEvent.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, int x) {
        _ENetEvent.data$VH.set(seg, x);
    }
    public static int data$get(MemorySegment seg, long index) {
        return (int)_ENetEvent.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, int x) {
        _ENetEvent.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packet$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packet"));
    public static VarHandle packet$VH() {
        return _ENetEvent.packet$VH;
    }
    public static MemoryAddress packet$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetEvent.packet$VH.get(seg);
    }
    public static void packet$set( MemorySegment seg, MemoryAddress x) {
        _ENetEvent.packet$VH.set(seg, x);
    }
    public static MemoryAddress packet$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetEvent.packet$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packet$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetEvent.packet$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


