// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetAddress {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("host"),
        Constants$root.C_SHORT$LAYOUT.withName("port"),
        MemoryLayout.paddingLayout(16)
    ).withName("_ENetAddress");
    public static MemoryLayout $LAYOUT() {
        return _ENetAddress.$struct$LAYOUT;
    }
    static final VarHandle host$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("host"));
    public static VarHandle host$VH() {
        return _ENetAddress.host$VH;
    }
    public static int host$get(MemorySegment seg) {
        return (int)_ENetAddress.host$VH.get(seg);
    }
    public static void host$set( MemorySegment seg, int x) {
        _ENetAddress.host$VH.set(seg, x);
    }
    public static int host$get(MemorySegment seg, long index) {
        return (int)_ENetAddress.host$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void host$set(MemorySegment seg, long index, int x) {
        _ENetAddress.host$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle port$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("port"));
    public static VarHandle port$VH() {
        return _ENetAddress.port$VH;
    }
    public static short port$get(MemorySegment seg) {
        return (short)_ENetAddress.port$VH.get(seg);
    }
    public static void port$set( MemorySegment seg, short x) {
        _ENetAddress.port$VH.set(seg, x);
    }
    public static short port$get(MemorySegment seg, long index) {
        return (short)_ENetAddress.port$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void port$set(MemorySegment seg, long index, short x) {
        _ENetAddress.port$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


