// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetProtocolConnect {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("command"),
            Constants$root.C_CHAR$LAYOUT.withName("channelID"),
            Constants$root.C_SHORT$LAYOUT.withName("reliableSequenceNumber")
        ).withName("header"),
        Constants$root.C_SHORT$LAYOUT.withName("outgoingPeerID"),
        Constants$root.C_CHAR$LAYOUT.withName("incomingSessionID"),
        Constants$root.C_CHAR$LAYOUT.withName("outgoingSessionID"),
        Constants$root.C_LONG$LAYOUT.withName("mtu"),
        Constants$root.C_LONG$LAYOUT.withName("windowSize"),
        Constants$root.C_LONG$LAYOUT.withName("channelCount"),
        Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
        Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth"),
        Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
        Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
        Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration"),
        Constants$root.C_LONG$LAYOUT.withName("connectID"),
        Constants$root.C_LONG$LAYOUT.withName("data")
    ).withName("_ENetProtocolConnect");
    public static MemoryLayout $LAYOUT() {
        return _ENetProtocolConnect.$struct$LAYOUT;
    }
    public static MemorySegment header$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    static final VarHandle outgoingPeerID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("outgoingPeerID"));
    public static VarHandle outgoingPeerID$VH() {
        return _ENetProtocolConnect.outgoingPeerID$VH;
    }
    public static short outgoingPeerID$get(MemorySegment seg) {
        return (short)_ENetProtocolConnect.outgoingPeerID$VH.get(seg);
    }
    public static void outgoingPeerID$set( MemorySegment seg, short x) {
        _ENetProtocolConnect.outgoingPeerID$VH.set(seg, x);
    }
    public static short outgoingPeerID$get(MemorySegment seg, long index) {
        return (short)_ENetProtocolConnect.outgoingPeerID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outgoingPeerID$set(MemorySegment seg, long index, short x) {
        _ENetProtocolConnect.outgoingPeerID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle incomingSessionID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("incomingSessionID"));
    public static VarHandle incomingSessionID$VH() {
        return _ENetProtocolConnect.incomingSessionID$VH;
    }
    public static byte incomingSessionID$get(MemorySegment seg) {
        return (byte)_ENetProtocolConnect.incomingSessionID$VH.get(seg);
    }
    public static void incomingSessionID$set( MemorySegment seg, byte x) {
        _ENetProtocolConnect.incomingSessionID$VH.set(seg, x);
    }
    public static byte incomingSessionID$get(MemorySegment seg, long index) {
        return (byte)_ENetProtocolConnect.incomingSessionID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void incomingSessionID$set(MemorySegment seg, long index, byte x) {
        _ENetProtocolConnect.incomingSessionID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle outgoingSessionID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("outgoingSessionID"));
    public static VarHandle outgoingSessionID$VH() {
        return _ENetProtocolConnect.outgoingSessionID$VH;
    }
    public static byte outgoingSessionID$get(MemorySegment seg) {
        return (byte)_ENetProtocolConnect.outgoingSessionID$VH.get(seg);
    }
    public static void outgoingSessionID$set( MemorySegment seg, byte x) {
        _ENetProtocolConnect.outgoingSessionID$VH.set(seg, x);
    }
    public static byte outgoingSessionID$get(MemorySegment seg, long index) {
        return (byte)_ENetProtocolConnect.outgoingSessionID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outgoingSessionID$set(MemorySegment seg, long index, byte x) {
        _ENetProtocolConnect.outgoingSessionID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mtu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mtu"));
    public static VarHandle mtu$VH() {
        return _ENetProtocolConnect.mtu$VH;
    }
    public static int mtu$get(MemorySegment seg) {
        return (int)_ENetProtocolConnect.mtu$VH.get(seg);
    }
    public static void mtu$set( MemorySegment seg, int x) {
        _ENetProtocolConnect.mtu$VH.set(seg, x);
    }
    public static int mtu$get(MemorySegment seg, long index) {
        return (int)_ENetProtocolConnect.mtu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mtu$set(MemorySegment seg, long index, int x) {
        _ENetProtocolConnect.mtu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle windowSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("windowSize"));
    public static VarHandle windowSize$VH() {
        return _ENetProtocolConnect.windowSize$VH;
    }
    public static int windowSize$get(MemorySegment seg) {
        return (int)_ENetProtocolConnect.windowSize$VH.get(seg);
    }
    public static void windowSize$set( MemorySegment seg, int x) {
        _ENetProtocolConnect.windowSize$VH.set(seg, x);
    }
    public static int windowSize$get(MemorySegment seg, long index) {
        return (int)_ENetProtocolConnect.windowSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void windowSize$set(MemorySegment seg, long index, int x) {
        _ENetProtocolConnect.windowSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle channelCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("channelCount"));
    public static VarHandle channelCount$VH() {
        return _ENetProtocolConnect.channelCount$VH;
    }
    public static int channelCount$get(MemorySegment seg) {
        return (int)_ENetProtocolConnect.channelCount$VH.get(seg);
    }
    public static void channelCount$set( MemorySegment seg, int x) {
        _ENetProtocolConnect.channelCount$VH.set(seg, x);
    }
    public static int channelCount$get(MemorySegment seg, long index) {
        return (int)_ENetProtocolConnect.channelCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void channelCount$set(MemorySegment seg, long index, int x) {
        _ENetProtocolConnect.channelCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle incomingBandwidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("incomingBandwidth"));
    public static VarHandle incomingBandwidth$VH() {
        return _ENetProtocolConnect.incomingBandwidth$VH;
    }
    public static int incomingBandwidth$get(MemorySegment seg) {
        return (int)_ENetProtocolConnect.incomingBandwidth$VH.get(seg);
    }
    public static void incomingBandwidth$set( MemorySegment seg, int x) {
        _ENetProtocolConnect.incomingBandwidth$VH.set(seg, x);
    }
    public static int incomingBandwidth$get(MemorySegment seg, long index) {
        return (int)_ENetProtocolConnect.incomingBandwidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void incomingBandwidth$set(MemorySegment seg, long index, int x) {
        _ENetProtocolConnect.incomingBandwidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle outgoingBandwidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("outgoingBandwidth"));
    public static VarHandle outgoingBandwidth$VH() {
        return _ENetProtocolConnect.outgoingBandwidth$VH;
    }
    public static int outgoingBandwidth$get(MemorySegment seg) {
        return (int)_ENetProtocolConnect.outgoingBandwidth$VH.get(seg);
    }
    public static void outgoingBandwidth$set( MemorySegment seg, int x) {
        _ENetProtocolConnect.outgoingBandwidth$VH.set(seg, x);
    }
    public static int outgoingBandwidth$get(MemorySegment seg, long index) {
        return (int)_ENetProtocolConnect.outgoingBandwidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outgoingBandwidth$set(MemorySegment seg, long index, int x) {
        _ENetProtocolConnect.outgoingBandwidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetThrottleInterval$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetThrottleInterval"));
    public static VarHandle packetThrottleInterval$VH() {
        return _ENetProtocolConnect.packetThrottleInterval$VH;
    }
    public static int packetThrottleInterval$get(MemorySegment seg) {
        return (int)_ENetProtocolConnect.packetThrottleInterval$VH.get(seg);
    }
    public static void packetThrottleInterval$set( MemorySegment seg, int x) {
        _ENetProtocolConnect.packetThrottleInterval$VH.set(seg, x);
    }
    public static int packetThrottleInterval$get(MemorySegment seg, long index) {
        return (int)_ENetProtocolConnect.packetThrottleInterval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetThrottleInterval$set(MemorySegment seg, long index, int x) {
        _ENetProtocolConnect.packetThrottleInterval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetThrottleAcceleration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetThrottleAcceleration"));
    public static VarHandle packetThrottleAcceleration$VH() {
        return _ENetProtocolConnect.packetThrottleAcceleration$VH;
    }
    public static int packetThrottleAcceleration$get(MemorySegment seg) {
        return (int)_ENetProtocolConnect.packetThrottleAcceleration$VH.get(seg);
    }
    public static void packetThrottleAcceleration$set( MemorySegment seg, int x) {
        _ENetProtocolConnect.packetThrottleAcceleration$VH.set(seg, x);
    }
    public static int packetThrottleAcceleration$get(MemorySegment seg, long index) {
        return (int)_ENetProtocolConnect.packetThrottleAcceleration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetThrottleAcceleration$set(MemorySegment seg, long index, int x) {
        _ENetProtocolConnect.packetThrottleAcceleration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetThrottleDeceleration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetThrottleDeceleration"));
    public static VarHandle packetThrottleDeceleration$VH() {
        return _ENetProtocolConnect.packetThrottleDeceleration$VH;
    }
    public static int packetThrottleDeceleration$get(MemorySegment seg) {
        return (int)_ENetProtocolConnect.packetThrottleDeceleration$VH.get(seg);
    }
    public static void packetThrottleDeceleration$set( MemorySegment seg, int x) {
        _ENetProtocolConnect.packetThrottleDeceleration$VH.set(seg, x);
    }
    public static int packetThrottleDeceleration$get(MemorySegment seg, long index) {
        return (int)_ENetProtocolConnect.packetThrottleDeceleration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetThrottleDeceleration$set(MemorySegment seg, long index, int x) {
        _ENetProtocolConnect.packetThrottleDeceleration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle connectID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("connectID"));
    public static VarHandle connectID$VH() {
        return _ENetProtocolConnect.connectID$VH;
    }
    public static int connectID$get(MemorySegment seg) {
        return (int)_ENetProtocolConnect.connectID$VH.get(seg);
    }
    public static void connectID$set( MemorySegment seg, int x) {
        _ENetProtocolConnect.connectID$VH.set(seg, x);
    }
    public static int connectID$get(MemorySegment seg, long index) {
        return (int)_ENetProtocolConnect.connectID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void connectID$set(MemorySegment seg, long index, int x) {
        _ENetProtocolConnect.connectID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return _ENetProtocolConnect.data$VH;
    }
    public static int data$get(MemorySegment seg) {
        return (int)_ENetProtocolConnect.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, int x) {
        _ENetProtocolConnect.data$VH.set(seg, x);
    }
    public static int data$get(MemorySegment seg, long index) {
        return (int)_ENetProtocolConnect.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, int x) {
        _ENetProtocolConnect.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


