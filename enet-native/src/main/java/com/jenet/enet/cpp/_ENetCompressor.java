// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetCompressor {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("context"),
        Constants$root.C_POINTER$LAYOUT.withName("compress"),
        Constants$root.C_POINTER$LAYOUT.withName("decompress"),
        Constants$root.C_POINTER$LAYOUT.withName("destroy")
    ).withName("_ENetCompressor");
    public static MemoryLayout $LAYOUT() {
        return _ENetCompressor.$struct$LAYOUT;
    }
    static final VarHandle context$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("context"));
    public static VarHandle context$VH() {
        return _ENetCompressor.context$VH;
    }
    public static MemoryAddress context$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetCompressor.context$VH.get(seg);
    }
    public static void context$set( MemorySegment seg, MemoryAddress x) {
        _ENetCompressor.context$VH.set(seg, x);
    }
    public static MemoryAddress context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetCompressor.context$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void context$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetCompressor.context$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor compress$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle compress$MH = RuntimeHelper.downcallHandle(
        _ENetCompressor.compress$FUNC
    );
    public interface compress {

        long apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, long _x3, java.lang.foreign.MemoryAddress _x4, long _x5);
        static MemorySegment allocate(compress fi, MemorySession session) {
            return RuntimeHelper.upcallStub(compress.class, fi, _ENetCompressor.compress$FUNC, session);
        }
        static compress ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, long __x3, java.lang.foreign.MemoryAddress __x4, long __x5) -> {
                try {
                    return (long)_ENetCompressor.compress$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, (java.lang.foreign.Addressable)__x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle compress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("compress"));
    public static VarHandle compress$VH() {
        return _ENetCompressor.compress$VH;
    }
    public static MemoryAddress compress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetCompressor.compress$VH.get(seg);
    }
    public static void compress$set( MemorySegment seg, MemoryAddress x) {
        _ENetCompressor.compress$VH.set(seg, x);
    }
    public static MemoryAddress compress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetCompressor.compress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void compress$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetCompressor.compress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static compress compress (MemorySegment segment, MemorySession session) {
        return compress.ofAddress(compress$get(segment), session);
    }
    static final FunctionDescriptor decompress$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle decompress$MH = RuntimeHelper.downcallHandle(
        _ENetCompressor.decompress$FUNC
    );
    public interface decompress {

        long apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, java.lang.foreign.MemoryAddress _x3, long _x4);
        static MemorySegment allocate(decompress fi, MemorySession session) {
            return RuntimeHelper.upcallStub(decompress.class, fi, _ENetCompressor.decompress$FUNC, session);
        }
        static decompress ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, java.lang.foreign.MemoryAddress __x3, long __x4) -> {
                try {
                    return (long)_ENetCompressor.decompress$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle decompress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("decompress"));
    public static VarHandle decompress$VH() {
        return _ENetCompressor.decompress$VH;
    }
    public static MemoryAddress decompress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetCompressor.decompress$VH.get(seg);
    }
    public static void decompress$set( MemorySegment seg, MemoryAddress x) {
        _ENetCompressor.decompress$VH.set(seg, x);
    }
    public static MemoryAddress decompress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetCompressor.decompress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void decompress$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetCompressor.decompress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static decompress decompress (MemorySegment segment, MemorySession session) {
        return decompress.ofAddress(decompress$get(segment), session);
    }
    static final FunctionDescriptor destroy$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle destroy$MH = RuntimeHelper.downcallHandle(
        _ENetCompressor.destroy$FUNC
    );
    public interface destroy {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(destroy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(destroy.class, fi, _ENetCompressor.destroy$FUNC, session);
        }
        static destroy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _ENetCompressor.destroy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle destroy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("destroy"));
    public static VarHandle destroy$VH() {
        return _ENetCompressor.destroy$VH;
    }
    public static MemoryAddress destroy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetCompressor.destroy$VH.get(seg);
    }
    public static void destroy$set( MemorySegment seg, MemoryAddress x) {
        _ENetCompressor.destroy$VH.set(seg, x);
    }
    public static MemoryAddress destroy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetCompressor.destroy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void destroy$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetCompressor.destroy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static destroy destroy (MemorySegment segment, MemorySession session) {
        return destroy.ofAddress(destroy$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


