// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$51 {

    static final FunctionDescriptor _islower_l$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle _islower_l$MH = RuntimeHelper.downcallHandle(
        "_islower_l",
        constants$51._islower_l$FUNC
    );
    static final FunctionDescriptor isdigit$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle isdigit$MH = RuntimeHelper.downcallHandle(
        "isdigit",
        constants$51.isdigit$FUNC
    );
    static final FunctionDescriptor _isdigit_l$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle _isdigit_l$MH = RuntimeHelper.downcallHandle(
        "_isdigit_l",
        constants$51._isdigit_l$FUNC
    );
    static final FunctionDescriptor isxdigit$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle isxdigit$MH = RuntimeHelper.downcallHandle(
        "isxdigit",
        constants$51.isxdigit$FUNC
    );
    static final FunctionDescriptor _isxdigit_l$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle _isxdigit_l$MH = RuntimeHelper.downcallHandle(
        "_isxdigit_l",
        constants$51._isxdigit_l$FUNC
    );
    static final FunctionDescriptor isspace$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle isspace$MH = RuntimeHelper.downcallHandle(
        "isspace",
        constants$51.isspace$FUNC
    );
}


