// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class enet_h_12 extends enet_h_11 {

    public static int IPPORT_TTYLINK() {
        return (int)87L;
    }
    public static int IPPORT_SUPDUP() {
        return (int)95L;
    }
    public static int IPPORT_POP3() {
        return (int)110L;
    }
    public static int IPPORT_NTP() {
        return (int)123L;
    }
    public static int IPPORT_EPMAP() {
        return (int)135L;
    }
    public static int IPPORT_NETBIOS_NS() {
        return (int)137L;
    }
    public static int IPPORT_NETBIOS_DGM() {
        return (int)138L;
    }
    public static int IPPORT_NETBIOS_SSN() {
        return (int)139L;
    }
    public static int IPPORT_IMAP() {
        return (int)143L;
    }
    public static int IPPORT_SNMP() {
        return (int)161L;
    }
    public static int IPPORT_SNMP_TRAP() {
        return (int)162L;
    }
    public static int IPPORT_IMAP3() {
        return (int)220L;
    }
    public static int IPPORT_LDAP() {
        return (int)389L;
    }
    public static int IPPORT_HTTPS() {
        return (int)443L;
    }
    public static int IPPORT_MICROSOFT_DS() {
        return (int)445L;
    }
    public static int IPPORT_EXECSERVER() {
        return (int)512L;
    }
    public static int IPPORT_LOGINSERVER() {
        return (int)513L;
    }
    public static int IPPORT_CMDSERVER() {
        return (int)514L;
    }
    public static int IPPORT_EFSSERVER() {
        return (int)520L;
    }
    public static int IPPORT_BIFFUDP() {
        return (int)512L;
    }
    public static int IPPORT_WHOSERVER() {
        return (int)513L;
    }
    public static int IPPORT_ROUTESERVER() {
        return (int)520L;
    }
    public static int IPPORT_RESERVED() {
        return (int)1024L;
    }
    public static int IPPORT_REGISTERED_MAX() {
        return (int)49151L;
    }
    public static int IPPORT_DYNAMIC_MIN() {
        return (int)49152L;
    }
    public static int IPPORT_DYNAMIC_MAX() {
        return (int)65535L;
    }
    public static int IN_CLASSA_NSHIFT() {
        return (int)24L;
    }
    public static int IN_CLASSA_HOST() {
        return (int)16777215L;
    }
    public static int IN_CLASSA_MAX() {
        return (int)128L;
    }
    public static int IN_CLASSB_NSHIFT() {
        return (int)16L;
    }
    public static int IN_CLASSB_HOST() {
        return (int)65535L;
    }
    public static int IN_CLASSB_MAX() {
        return (int)65536L;
    }
    public static int IN_CLASSC_NSHIFT() {
        return (int)8L;
    }
    public static int IN_CLASSC_HOST() {
        return (int)255L;
    }
    public static int IN_CLASSD_NSHIFT() {
        return (int)28L;
    }
    public static int IN_CLASSD_HOST() {
        return (int)268435455L;
    }
    public static int INADDR_LOOPBACK() {
        return (int)2130706433L;
    }
    public static int IOCPARM_MASK() {
        return (int)127L;
    }
    public static int IOC_VOID() {
        return (int)536870912L;
    }
    public static int IOC_OUT() {
        return (int)1073741824L;
    }
    public static int MSG_TRUNC() {
        return (int)256L;
    }
    public static int MSG_CTRUNC() {
        return (int)512L;
    }
    public static int MSG_BCAST() {
        return (int)1024L;
    }
    public static int MSG_MCAST() {
        return (int)2048L;
    }
    public static int MSG_ERRQUEUE() {
        return (int)4096L;
    }
    public static int AI_PASSIVE() {
        return (int)1L;
    }
    public static int AI_CANONNAME() {
        return (int)2L;
    }
    public static int AI_NUMERICHOST() {
        return (int)4L;
    }
    public static int AI_NUMERICSERV() {
        return (int)8L;
    }
    public static int AI_DNS_ONLY() {
        return (int)16L;
    }
    public static int AI_ALL() {
        return (int)256L;
    }
    public static int AI_ADDRCONFIG() {
        return (int)1024L;
    }
    public static int AI_V4MAPPED() {
        return (int)2048L;
    }
    public static int AI_NON_AUTHORITATIVE() {
        return (int)16384L;
    }
    public static int AI_SECURE() {
        return (int)32768L;
    }
    public static int AI_RETURN_PREFERRED_NAMES() {
        return (int)65536L;
    }
    public static int AI_FQDN() {
        return (int)131072L;
    }
    public static int AI_FILESERVER() {
        return (int)262144L;
    }
    public static int AI_DISABLE_IDN_ENCODING() {
        return (int)524288L;
    }
    public static int AI_RESOLUTION_HANDLE() {
        return (int)1073741824L;
    }
    public static int ADDRINFOEX_VERSION_2() {
        return (int)2L;
    }
    public static int ADDRINFOEX_VERSION_3() {
        return (int)3L;
    }
    public static int ADDRINFOEX_VERSION_4() {
        return (int)4L;
    }
    public static int NI_NOFQDN() {
        return (int)1L;
    }
    public static int NI_NUMERICHOST() {
        return (int)2L;
    }
    public static int NI_NAMEREQD() {
        return (int)4L;
    }
    public static int NI_NUMERICSERV() {
        return (int)8L;
    }
    public static int NI_DGRAM() {
        return (int)16L;
    }
    public static int NI_MAXHOST() {
        return (int)1025L;
    }
    public static int NI_MAXSERV() {
        return (int)32L;
    }
    public static int FD_SETSIZE() {
        return (int)64L;
    }
    public static int IMPLINK_IP() {
        return (int)155L;
    }
    public static int IMPLINK_LOWEXPER() {
        return (int)156L;
    }
    public static int IMPLINK_HIGHEXPER() {
        return (int)158L;
    }
    public static int WSADESCRIPTION_LEN() {
        return (int)256L;
    }
    public static int WSASYS_STATUS_LEN() {
        return (int)128L;
    }
    public static int SO_PROTOCOL_INFOA() {
        return (int)8196L;
    }
    public static int SO_PROTOCOL_INFOW() {
        return (int)8197L;
    }
    public static int PVD_CONFIG() {
        return (int)12289L;
    }
    public static int SOMAXCONN() {
        return (int)2147483647L;
    }
    public static int MSG_OOB() {
        return (int)1L;
    }
    public static int MSG_PEEK() {
        return (int)2L;
    }
    public static int MSG_DONTROUTE() {
        return (int)4L;
    }
    public static int MSG_WAITALL() {
        return (int)8L;
    }
    public static int MSG_PUSH_IMMEDIATE() {
        return (int)32L;
    }
    public static int MSG_PARTIAL() {
        return (int)32768L;
    }
    public static int MSG_INTERRUPT() {
        return (int)16L;
    }
    public static int MSG_MAXIOVLEN() {
        return (int)16L;
    }
    public static int MAXGETHOSTSTRUCT() {
        return (int)1024L;
    }
    public static int FD_READ_BIT() {
        return (int)0L;
    }
    public static int FD_WRITE_BIT() {
        return (int)1L;
    }
    public static int FD_OOB_BIT() {
        return (int)2L;
    }
    public static int FD_ACCEPT_BIT() {
        return (int)3L;
    }
    public static int FD_CONNECT_BIT() {
        return (int)4L;
    }
    public static int FD_CLOSE_BIT() {
        return (int)5L;
    }
    public static int FD_QOS_BIT() {
        return (int)6L;
    }
    public static int FD_GROUP_QOS_BIT() {
        return (int)7L;
    }
    public static int FD_ROUTING_INTERFACE_CHANGE_BIT() {
        return (int)8L;
    }
    public static int FD_ADDRESS_LIST_CHANGE_BIT() {
        return (int)9L;
    }
    public static int FD_MAX_EVENTS() {
        return (int)10L;
    }
    public static int SERVICETYPE_NOTRAFFIC() {
        return (int)0L;
    }
    public static int SERVICETYPE_BESTEFFORT() {
        return (int)1L;
    }
    public static int SERVICETYPE_CONTROLLEDLOAD() {
        return (int)2L;
    }
    public static int SERVICETYPE_GUARANTEED() {
        return (int)3L;
    }
    public static int SERVICETYPE_NETWORK_UNAVAILABLE() {
        return (int)4L;
    }
    public static int SERVICETYPE_GENERAL_INFORMATION() {
        return (int)5L;
    }
    public static int SERVICETYPE_NOCHANGE() {
        return (int)6L;
    }
    public static int SERVICETYPE_NONCONFORMING() {
        return (int)9L;
    }
    public static int SERVICETYPE_NETWORK_CONTROL() {
        return (int)10L;
    }
    public static int SERVICETYPE_QUALITATIVE() {
        return (int)13L;
    }
    public static int SERVICE_NO_QOS_SIGNALING() {
        return (int)1073741824L;
    }
    public static int QOS_GENERAL_ID_BASE() {
        return (int)2000L;
    }
    public static int TC_NONCONF_BORROW() {
        return (int)0L;
    }
    public static int TC_NONCONF_SHAPE() {
        return (int)1L;
    }
    public static int TC_NONCONF_DISCARD() {
        return (int)2L;
    }
    public static int TC_NONCONF_BORROW_PLUS() {
        return (int)3L;
    }
    public static int CF_ACCEPT() {
        return (int)0L;
    }
    public static int CF_REJECT() {
        return (int)1L;
    }
    public static int CF_DEFER() {
        return (int)2L;
    }
    public static int SD_RECEIVE() {
        return (int)0L;
    }
    public static int SD_SEND() {
        return (int)1L;
    }
    public static int SD_BOTH() {
        return (int)2L;
    }
    public static int SG_UNCONSTRAINED_GROUP() {
        return (int)1L;
    }
    public static int SG_CONSTRAINED_GROUP() {
        return (int)2L;
    }
    public static int MAX_PROTOCOL_CHAIN() {
        return (int)7L;
    }
    public static int BASE_PROTOCOL() {
        return (int)1L;
    }
    public static int LAYERED_PROTOCOL() {
        return (int)0L;
    }
    public static int WSAPROTOCOL_LEN() {
        return (int)255L;
    }
    public static int PFL_MULTIPLE_PROTO_ENTRIES() {
        return (int)1L;
    }
    public static int PFL_RECOMMENDED_PROTO_ENTRY() {
        return (int)2L;
    }
    public static int PFL_HIDDEN() {
        return (int)4L;
    }
    public static int PFL_MATCHES_PROTOCOL_ZERO() {
        return (int)8L;
    }
    public static int PFL_NETWORKDIRECT_PROVIDER() {
        return (int)16L;
    }
    public static int XP1_CONNECTIONLESS() {
        return (int)1L;
    }
    public static int XP1_GUARANTEED_DELIVERY() {
        return (int)2L;
    }
    public static int XP1_GUARANTEED_ORDER() {
        return (int)4L;
    }
    public static int XP1_MESSAGE_ORIENTED() {
        return (int)8L;
    }
    public static int XP1_PSEUDO_STREAM() {
        return (int)16L;
    }
    public static int XP1_GRACEFUL_CLOSE() {
        return (int)32L;
    }
    public static int XP1_EXPEDITED_DATA() {
        return (int)64L;
    }
    public static int XP1_CONNECT_DATA() {
        return (int)128L;
    }
    public static int XP1_DISCONNECT_DATA() {
        return (int)256L;
    }
    public static int XP1_SUPPORT_BROADCAST() {
        return (int)512L;
    }
    public static int XP1_SUPPORT_MULTIPOINT() {
        return (int)1024L;
    }
    public static int XP1_MULTIPOINT_CONTROL_PLANE() {
        return (int)2048L;
    }
    public static int XP1_MULTIPOINT_DATA_PLANE() {
        return (int)4096L;
    }
    public static int XP1_QOS_SUPPORTED() {
        return (int)8192L;
    }
    public static int XP1_INTERRUPT() {
        return (int)16384L;
    }
    public static int XP1_UNI_SEND() {
        return (int)32768L;
    }
    public static int XP1_UNI_RECV() {
        return (int)65536L;
    }
    public static int XP1_IFS_HANDLES() {
        return (int)131072L;
    }
    public static int XP1_PARTIAL_MESSAGE() {
        return (int)262144L;
    }
    public static int XP1_SAN_SUPPORT_SDP() {
        return (int)524288L;
    }
    public static int BIGENDIAN() {
        return (int)0L;
    }
    public static int LITTLEENDIAN() {
        return (int)1L;
    }
    public static int SECURITY_PROTOCOL_NONE() {
        return (int)0L;
    }
    public static int JL_SENDER_ONLY() {
        return (int)1L;
    }
    public static int JL_RECEIVER_ONLY() {
        return (int)2L;
    }
    public static int JL_BOTH() {
        return (int)4L;
    }
    public static int WSA_FLAG_OVERLAPPED() {
        return (int)1L;
    }
    public static int WSA_FLAG_MULTIPOINT_C_ROOT() {
        return (int)2L;
    }
    public static int WSA_FLAG_MULTIPOINT_C_LEAF() {
        return (int)4L;
    }
    public static int WSA_FLAG_MULTIPOINT_D_ROOT() {
        return (int)8L;
    }
    public static int WSA_FLAG_MULTIPOINT_D_LEAF() {
        return (int)16L;
    }
    public static int WSA_FLAG_ACCESS_SYSTEM_SECURITY() {
        return (int)64L;
    }
    public static int WSA_FLAG_NO_HANDLE_INHERIT() {
        return (int)128L;
    }
    public static int WSA_FLAG_REGISTERED_IO() {
        return (int)256L;
    }
    public static int TH_NETDEV() {
        return (int)1L;
    }
    public static int TH_TAPI() {
        return (int)2L;
    }
    public static int LUP_DEEP() {
        return (int)1L;
    }
    public static int LUP_CONTAINERS() {
        return (int)2L;
    }
    public static int LUP_NOCONTAINERS() {
        return (int)4L;
    }
    public static int LUP_NEAREST() {
        return (int)8L;
    }
    public static int LUP_RETURN_NAME() {
        return (int)16L;
    }
    public static int LUP_RETURN_TYPE() {
        return (int)32L;
    }
    public static int LUP_RETURN_VERSION() {
        return (int)64L;
    }
    public static int LUP_RETURN_COMMENT() {
        return (int)128L;
    }
    public static int LUP_RETURN_ADDR() {
        return (int)256L;
    }
    public static int LUP_RETURN_BLOB() {
        return (int)512L;
    }
    public static int LUP_RETURN_ALIASES() {
        return (int)1024L;
    }
    public static int LUP_RETURN_QUERY_STRING() {
        return (int)2048L;
    }
    public static int LUP_RETURN_ALL() {
        return (int)4080L;
    }
    public static int LUP_RES_SERVICE() {
        return (int)32768L;
    }
    public static int LUP_FLUSHCACHE() {
        return (int)4096L;
    }
    public static int LUP_FLUSHPREVIOUS() {
        return (int)8192L;
    }
    public static int LUP_NON_AUTHORITATIVE() {
        return (int)16384L;
    }
    public static int LUP_SECURE() {
        return (int)32768L;
    }
    public static int LUP_RETURN_PREFERRED_NAMES() {
        return (int)65536L;
    }
    public static int LUP_DNS_ONLY() {
        return (int)131072L;
    }
    public static int LUP_ADDRCONFIG() {
        return (int)1048576L;
    }
    public static int LUP_DUAL_ADDR() {
        return (int)2097152L;
    }
    public static int LUP_FILESERVER() {
        return (int)4194304L;
    }
    public static int LUP_DISABLE_IDN_ENCODING() {
        return (int)8388608L;
    }
    public static int LUP_API_ANSI() {
        return (int)16777216L;
    }
    public static int RESULT_IS_ALIAS() {
        return (int)1L;
    }
    public static int RESULT_IS_ADDED() {
        return (int)16L;
    }
    public static int RESULT_IS_CHANGED() {
        return (int)32L;
    }
    public static int RESULT_IS_DELETED() {
        return (int)64L;
    }
    public static int POLLRDNORM() {
        return (int)256L;
    }
    public static int POLLRDBAND() {
        return (int)512L;
    }
    public static int POLLPRI() {
        return (int)1024L;
    }
    public static int POLLWRNORM() {
        return (int)16L;
    }
    public static int POLLWRBAND() {
        return (int)32L;
    }
    public static int POLLERR() {
        return (int)1L;
    }
    public static int POLLHUP() {
        return (int)2L;
    }
    public static int POLLNVAL() {
        return (int)4L;
    }
    public static int ENET_VERSION_MAJOR() {
        return (int)1L;
    }
    public static int ENET_VERSION_MINOR() {
        return (int)3L;
    }
    public static int ENET_VERSION_PATCH() {
        return (int)14L;
    }
    public static int ENET_HOST_ANY() {
        return (int)0L;
    }
    public static int ENET_PORT_ANY() {
        return (int)0L;
    }
    public static OfAddress va_list = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle __va_start$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__va_start$MH,"__va_start");
    }
    public static void __va_start ( Addressable x0, Object... x1) {
        var mh$ = __va_start$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __security_init_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__security_init_cookie$MH,"__security_init_cookie");
    }
    public static void __security_init_cookie () {
        var mh$ = __security_init_cookie$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __security_check_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__security_check_cookie$MH,"__security_check_cookie");
    }
    public static void __security_check_cookie ( long _StackCookie) {
        var mh$ = __security_check_cookie$MH();
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __report_gsfailure$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__report_gsfailure$MH,"__report_gsfailure");
    }
    public static void __report_gsfailure ( long _StackCookie) {
        var mh$ = __report_gsfailure$MH();
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __security_cookie$LAYOUT() {
        return constants$0.__security_cookie$LAYOUT;
    }
    public static VarHandle __security_cookie$VH() {
        return constants$0.__security_cookie$VH;
    }
    public static MemorySegment __security_cookie$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT,"__security_cookie");
    }
    public static long __security_cookie$get() {
        return (long) constants$0.__security_cookie$VH.get(RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT, "__security_cookie"));
    }
    public static void __security_cookie$set( long x) {
        constants$0.__security_cookie$VH.set(RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT, "__security_cookie"), x);
    }
    public static MethodHandle _invalid_parameter_noinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$0._invalid_parameter_noinfo$MH,"_invalid_parameter_noinfo");
    }
    public static void _invalid_parameter_noinfo () {
        var mh$ = _invalid_parameter_noinfo$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _invalid_parameter_noinfo_noreturn$MH() {
        return RuntimeHelper.requireNonNull(constants$1._invalid_parameter_noinfo_noreturn$MH,"_invalid_parameter_noinfo_noreturn");
    }
    public static void _invalid_parameter_noinfo_noreturn () {
        var mh$ = _invalid_parameter_noinfo_noreturn$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _invoke_watson$MH() {
        return RuntimeHelper.requireNonNull(constants$1._invoke_watson$MH,"_invoke_watson");
    }
    public static void _invoke_watson ( Addressable _Expression,  Addressable _FunctionName,  Addressable _FileName,  int _LineNo,  long _Reserved) {
        var mh$ = _invoke_watson$MH();
        try {
            mh$.invokeExact(_Expression, _FunctionName, _FileName, _LineNo, _Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt errno_t = Constants$root.C_LONG$LAYOUT;
    public static OfInt __time32_t = Constants$root.C_LONG$LAYOUT;
    public static OfLong __time64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress _locale_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle _calloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$1._calloc_base$MH,"_calloc_base");
    }
    public static MemoryAddress _calloc_base ( long _Count,  long _Size) {
        var mh$ = _calloc_base$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long _Count,  long _Size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _callnewh$MH() {
        return RuntimeHelper.requireNonNull(constants$1._callnewh$MH,"_callnewh");
    }
    public static int _callnewh ( long _Size) {
        var mh$ = _callnewh$MH();
        try {
            return (int)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _expand$MH() {
        return RuntimeHelper.requireNonNull(constants$1._expand$MH,"_expand");
    }
    public static MemoryAddress _expand ( Addressable _Block,  long _Size) {
        var mh$ = _expand$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _free_base$MH() {
        return RuntimeHelper.requireNonNull(constants$2._free_base$MH,"_free_base");
    }
    public static void _free_base ( Addressable _Block) {
        var mh$ = _free_base$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$2.free$MH,"free");
    }
    public static void free ( Addressable _Block) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _malloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$2._malloc_base$MH,"_malloc_base");
    }
    public static MemoryAddress _malloc_base ( long _Size) {
        var mh$ = _malloc_base$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$2.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long _Size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _msize_base$MH() {
        return RuntimeHelper.requireNonNull(constants$2._msize_base$MH,"_msize_base");
    }
    public static long _msize_base ( Addressable _Block) {
        var mh$ = _msize_base$MH();
        try {
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _msize$MH() {
        return RuntimeHelper.requireNonNull(constants$2._msize$MH,"_msize");
    }
    public static long _msize ( Addressable _Block) {
        var mh$ = _msize$MH();
        try {
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _realloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$3._realloc_base$MH,"_realloc_base");
    }
    public static MemoryAddress _realloc_base ( Addressable _Block,  long _Size) {
        var mh$ = _realloc_base$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$3.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable _Block,  long _Size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _recalloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$3._recalloc_base$MH,"_recalloc_base");
    }
    public static MemoryAddress _recalloc_base ( Addressable _Block,  long _Count,  long _Size) {
        var mh$ = _recalloc_base$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$3._recalloc$MH,"_recalloc");
    }
    public static MemoryAddress _recalloc ( Addressable _Block,  long _Count,  long _Size) {
        var mh$ = _recalloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_free$MH() {
        return RuntimeHelper.requireNonNull(constants$3._aligned_free$MH,"_aligned_free");
    }
    public static void _aligned_free ( Addressable _Block) {
        var mh$ = _aligned_free$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$3._aligned_malloc$MH,"_aligned_malloc");
    }
    public static MemoryAddress _aligned_malloc ( long _Size,  long _Alignment) {
        var mh$ = _aligned_malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$4._aligned_offset_malloc$MH,"_aligned_offset_malloc");
    }
    public static MemoryAddress _aligned_offset_malloc ( long _Size,  long _Alignment,  long _Offset) {
        var mh$ = _aligned_offset_malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_msize$MH() {
        return RuntimeHelper.requireNonNull(constants$4._aligned_msize$MH,"_aligned_msize");
    }
    public static long _aligned_msize ( Addressable _Block,  long _Alignment,  long _Offset) {
        var mh$ = _aligned_msize$MH();
        try {
            return (long)mh$.invokeExact(_Block, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$4._aligned_offset_realloc$MH,"_aligned_offset_realloc");
    }
    public static MemoryAddress _aligned_offset_realloc ( Addressable _Block,  long _Size,  long _Alignment,  long _Offset) {
        var mh$ = _aligned_offset_realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$4._aligned_offset_recalloc$MH,"_aligned_offset_recalloc");
    }
    public static MemoryAddress _aligned_offset_recalloc ( Addressable _Block,  long _Count,  long _Size,  long _Alignment,  long _Offset) {
        var mh$ = _aligned_offset_recalloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Count, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$4._aligned_realloc$MH,"_aligned_realloc");
    }
    public static MemoryAddress _aligned_realloc ( Addressable _Block,  long _Size,  long _Alignment) {
        var mh$ = _aligned_realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$4._aligned_recalloc$MH,"_aligned_recalloc");
    }
    public static MemoryAddress _aligned_recalloc ( Addressable _Block,  long _Count,  long _Size,  long _Alignment) {
        var mh$ = _aligned_recalloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Count, _Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong ptrdiff_t$0 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfDouble max_align_t = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle bsearch_s$MH() {
        return RuntimeHelper.requireNonNull(constants$5.bsearch_s$MH,"bsearch_s");
    }
    public static MemoryAddress bsearch_s ( Addressable _Key,  Addressable _Base,  long _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction,  Addressable _Context) {
        var mh$ = bsearch_s$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort_s$MH() {
        return RuntimeHelper.requireNonNull(constants$5.qsort_s$MH,"qsort_s");
    }
    public static void qsort_s ( Addressable _Base,  long _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction,  Addressable _Context) {
        var mh$ = qsort_s$MH();
        try {
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$6.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable _Key,  Addressable _Base,  long _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$6.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable _Base,  long _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lfind_s$MH() {
        return RuntimeHelper.requireNonNull(constants$6._lfind_s$MH,"_lfind_s");
    }
    public static MemoryAddress _lfind_s ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction,  Addressable _Context) {
        var mh$ = _lfind_s$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lfind$MH() {
        return RuntimeHelper.requireNonNull(constants$6._lfind$MH,"_lfind");
    }
    public static MemoryAddress _lfind ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  int _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = _lfind$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lsearch_s$MH() {
        return RuntimeHelper.requireNonNull(constants$6._lsearch_s$MH,"_lsearch_s");
    }
    public static MemoryAddress _lsearch_s ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction,  Addressable _Context) {
        var mh$ = _lsearch_s$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$6._lsearch$MH,"_lsearch");
    }
    public static MemoryAddress _lsearch ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  int _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = _lsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lfind$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lfind$MH,"lfind");
    }
    public static MemoryAddress lfind ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  int _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = lfind$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lsearch$MH,"lsearch");
    }
    public static MemoryAddress lsearch ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  int _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = lsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$7._itow_s$MH,"_itow_s");
    }
    public static int _itow_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _itow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itow$MH() {
        return RuntimeHelper.requireNonNull(constants$7._itow$MH,"_itow");
    }
    public static MemoryAddress _itow ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _itow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$7._ltow_s$MH,"_ltow_s");
    }
    public static int _ltow_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ltow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltow$MH() {
        return RuntimeHelper.requireNonNull(constants$7._ltow$MH,"_ltow");
    }
    public static MemoryAddress _ltow ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ltow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$8._ultow_s$MH,"_ultow_s");
    }
    public static int _ultow_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ultow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultow$MH() {
        return RuntimeHelper.requireNonNull(constants$8._ultow$MH,"_ultow");
    }
    public static MemoryAddress _ultow ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ultow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstod$MH() {
        return RuntimeHelper.requireNonNull(constants$8.wcstod$MH,"wcstod");
    }
    public static double wcstod ( Addressable _String,  Addressable _EndPtr) {
        var mh$ = wcstod$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstod_l$MH() {
        return RuntimeHelper.requireNonNull(constants$8._wcstod_l$MH,"_wcstod_l");
    }
    public static double _wcstod_l ( Addressable _String,  Addressable _EndPtr,  Addressable _Locale) {
        var mh$ = _wcstod_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstol$MH() {
        return RuntimeHelper.requireNonNull(constants$8.wcstol$MH,"wcstol");
    }
    public static int wcstol ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = wcstol$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$8._wcstol_l$MH,"_wcstol_l");
    }
    public static int _wcstol_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoll$MH() {
        return RuntimeHelper.requireNonNull(constants$9.wcstoll$MH,"wcstoll");
    }
    public static long wcstoll ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = wcstoll$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$9._wcstoll_l$MH,"_wcstoll_l");
    }
    public static long _wcstoll_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoul$MH() {
        return RuntimeHelper.requireNonNull(constants$9.wcstoul$MH,"wcstoul");
    }
    public static int wcstoul ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = wcstoul$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoul_l$MH() {
        return RuntimeHelper.requireNonNull(constants$9._wcstoul_l$MH,"_wcstoul_l");
    }
    public static int _wcstoul_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstoul_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoull$MH() {
        return RuntimeHelper.requireNonNull(constants$9.wcstoull$MH,"wcstoull");
    }
    public static long wcstoull ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = wcstoull$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoull_l$MH() {
        return RuntimeHelper.requireNonNull(constants$9._wcstoull_l$MH,"_wcstoull_l");
    }
    public static long _wcstoull_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstoull_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstof$MH() {
        return RuntimeHelper.requireNonNull(constants$10.wcstof$MH,"wcstof");
    }
    public static float wcstof ( Addressable _String,  Addressable _EndPtr) {
        var mh$ = wcstof$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$10._wcstof_l$MH,"_wcstof_l");
    }
    public static float _wcstof_l ( Addressable _String,  Addressable _EndPtr,  Addressable _Locale) {
        var mh$ = _wcstof_l$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtof$MH() {
        return RuntimeHelper.requireNonNull(constants$10._wtof$MH,"_wtof");
    }
    public static double _wtof ( Addressable _String) {
        var mh$ = _wtof$MH();
        try {
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$10._wtof_l$MH,"_wtof_l");
    }
    public static double _wtof_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wtof_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi$MH() {
        return RuntimeHelper.requireNonNull(constants$10._wtoi$MH,"_wtoi");
    }
    public static int _wtoi ( Addressable _String) {
        var mh$ = _wtoi$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi_l$MH() {
        return RuntimeHelper.requireNonNull(constants$10._wtoi_l$MH,"_wtoi_l");
    }
    public static int _wtoi_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wtoi_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtol$MH() {
        return RuntimeHelper.requireNonNull(constants$11._wtol$MH,"_wtol");
    }
    public static int _wtol ( Addressable _String) {
        var mh$ = _wtol$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$11._wtol_l$MH,"_wtol_l");
    }
    public static int _wtol_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wtol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$11._wtoll$MH,"_wtoll");
    }
    public static long _wtoll ( Addressable _String) {
        var mh$ = _wtoll$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$11._wtoll_l$MH,"_wtoll_l");
    }
    public static long _wtoll_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wtoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64tow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$11._i64tow_s$MH,"_i64tow_s");
    }
    public static int _i64tow_s ( long _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _i64tow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64tow$MH() {
        return RuntimeHelper.requireNonNull(constants$11._i64tow$MH,"_i64tow");
    }
    public static MemoryAddress _i64tow ( long _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _i64tow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64tow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$12._ui64tow_s$MH,"_ui64tow_s");
    }
    public static int _ui64tow_s ( long _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ui64tow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64tow$MH() {
        return RuntimeHelper.requireNonNull(constants$12._ui64tow$MH,"_ui64tow");
    }
    public static MemoryAddress _ui64tow ( long _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ui64tow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$12._wtoi64$MH,"_wtoi64");
    }
    public static long _wtoi64 ( Addressable _String) {
        var mh$ = _wtoi64$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$12._wtoi64_l$MH,"_wtoi64_l");
    }
    public static long _wtoi64_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wtoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$12._wcstoi64$MH,"_wcstoi64");
    }
    public static long _wcstoi64 ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = _wcstoi64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$12._wcstoi64_l$MH,"_wcstoi64_l");
    }
    public static long _wcstoi64_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoui64$MH() {
        return RuntimeHelper.requireNonNull(constants$13._wcstoui64$MH,"_wcstoui64");
    }
    public static long _wcstoui64 ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = _wcstoui64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoui64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$13._wcstoui64_l$MH,"_wcstoui64_l");
    }
    public static long _wcstoui64_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstoui64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wfullpath$MH() {
        return RuntimeHelper.requireNonNull(constants$13._wfullpath$MH,"_wfullpath");
    }
    public static MemoryAddress _wfullpath ( Addressable _Buffer,  Addressable _Path,  long _BufferCount) {
        var mh$ = _wfullpath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wmakepath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$13._wmakepath_s$MH,"_wmakepath_s");
    }
    public static int _wmakepath_s ( Addressable _Buffer,  long _BufferCount,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _wmakepath_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wmakepath$MH() {
        return RuntimeHelper.requireNonNull(constants$13._wmakepath$MH,"_wmakepath");
    }
    public static void _wmakepath ( Addressable _Buffer,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _wmakepath$MH();
        try {
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wperror$MH() {
        return RuntimeHelper.requireNonNull(constants$13._wperror$MH,"_wperror");
    }
    public static void _wperror ( Addressable _ErrorMessage) {
        var mh$ = _wperror$MH();
        try {
            mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsplitpath$MH() {
        return RuntimeHelper.requireNonNull(constants$14._wsplitpath$MH,"_wsplitpath");
    }
    public static void _wsplitpath ( Addressable _FullPath,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _wsplitpath$MH();
        try {
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsplitpath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$14._wsplitpath_s$MH,"_wsplitpath_s");
    }
    public static int _wsplitpath_s ( Addressable _FullPath,  Addressable _Drive,  long _DriveCount,  Addressable _Dir,  long _DirCount,  Addressable _Filename,  long _FilenameCount,  Addressable _Ext,  long _ExtCount) {
        var mh$ = _wsplitpath_s$MH();
        try {
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wdupenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$14._wdupenv_s$MH,"_wdupenv_s");
    }
    public static int _wdupenv_s ( Addressable _Buffer,  Addressable _BufferCount,  Addressable _VarName) {
        var mh$ = _wdupenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wgetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$14._wgetenv$MH,"_wgetenv");
    }
    public static MemoryAddress _wgetenv ( Addressable _VarName) {
        var mh$ = _wgetenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wgetenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$14._wgetenv_s$MH,"_wgetenv_s");
    }
    public static int _wgetenv_s ( Addressable _RequiredCount,  Addressable _Buffer,  long _BufferCount,  Addressable _VarName) {
        var mh$ = _wgetenv_s$MH();
        try {
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wputenv$MH() {
        return RuntimeHelper.requireNonNull(constants$14._wputenv$MH,"_wputenv");
    }
    public static int _wputenv ( Addressable _EnvString) {
        var mh$ = _wputenv$MH();
        try {
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wputenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$15._wputenv_s$MH,"_wputenv_s");
    }
    public static int _wputenv_s ( Addressable _Name,  Addressable _Value) {
        var mh$ = _wputenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsearchenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$15._wsearchenv_s$MH,"_wsearchenv_s");
    }
    public static int _wsearchenv_s ( Addressable _Filename,  Addressable _VarName,  Addressable _Buffer,  long _BufferCount) {
        var mh$ = _wsearchenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsearchenv$MH() {
        return RuntimeHelper.requireNonNull(constants$15._wsearchenv$MH,"_wsearchenv");
    }
    public static void _wsearchenv ( Addressable _Filename,  Addressable _VarName,  Addressable _ResultPath) {
        var mh$ = _wsearchenv$MH();
        try {
            mh$.invokeExact(_Filename, _VarName, _ResultPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsystem$MH() {
        return RuntimeHelper.requireNonNull(constants$15._wsystem$MH,"_wsystem");
    }
    public static int _wsystem ( Addressable _Command) {
        var mh$ = _wsystem$MH();
        try {
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _swab$MH() {
        return RuntimeHelper.requireNonNull(constants$15._swab$MH,"_swab");
    }
    public static void _swab ( Addressable _Buf1,  Addressable _Buf2,  int _SizeInBytes) {
        var mh$ = _swab$MH();
        try {
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$15.exit$MH,"exit");
    }
    public static void exit ( int _Code) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exit$MH() {
        return RuntimeHelper.requireNonNull(constants$16._exit$MH,"_exit");
    }
    public static void _exit ( int _Code) {
        var mh$ = _exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$16._Exit$MH,"_Exit");
    }
    public static void _Exit ( int _Code) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$16.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int _Code) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$16.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_abort_behavior$MH() {
        return RuntimeHelper.requireNonNull(constants$16._set_abort_behavior$MH,"_set_abort_behavior");
    }
    public static int _set_abort_behavior ( int _Flags,  int _Mask) {
        var mh$ = _set_abort_behavior$MH();
        try {
            return (int)mh$.invokeExact(_Flags, _Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$17.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable x0) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _onexit$MH() {
        return RuntimeHelper.requireNonNull(constants$17._onexit$MH,"_onexit");
    }
    public static MemoryAddress _onexit ( Addressable _Func) {
        var mh$ = _onexit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$18.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable x0) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_purecall_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$19._set_purecall_handler$MH,"_set_purecall_handler");
    }
    public static MemoryAddress _set_purecall_handler ( Addressable _Handler) {
        var mh$ = _set_purecall_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_purecall_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$19._get_purecall_handler$MH,"_get_purecall_handler");
    }
    public static MemoryAddress _get_purecall_handler () {
        var mh$ = _get_purecall_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$19._set_invalid_parameter_handler$MH,"_set_invalid_parameter_handler");
    }
    public static MemoryAddress _set_invalid_parameter_handler ( Addressable _Handler) {
        var mh$ = _set_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$19._get_invalid_parameter_handler$MH,"_get_invalid_parameter_handler");
    }
    public static MemoryAddress _get_invalid_parameter_handler () {
        var mh$ = _get_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_thread_local_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$19._set_thread_local_invalid_parameter_handler$MH,"_set_thread_local_invalid_parameter_handler");
    }
    public static MemoryAddress _set_thread_local_invalid_parameter_handler ( Addressable _Handler) {
        var mh$ = _set_thread_local_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_thread_local_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$19._get_thread_local_invalid_parameter_handler$MH,"_get_thread_local_invalid_parameter_handler");
    }
    public static MemoryAddress _get_thread_local_invalid_parameter_handler () {
        var mh$ = _get_thread_local_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_error_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$20._set_error_mode$MH,"_set_error_mode");
    }
    public static int _set_error_mode ( int _Mode) {
        var mh$ = _set_error_mode$MH();
        try {
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _errno$MH() {
        return RuntimeHelper.requireNonNull(constants$20._errno$MH,"_errno");
    }
    public static MemoryAddress _errno () {
        var mh$ = _errno$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$20._set_errno$MH,"_set_errno");
    }
    public static int _set_errno ( int _Value) {
        var mh$ = _set_errno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$20._get_errno$MH,"_get_errno");
    }
    public static int _get_errno ( Addressable _Value) {
        var mh$ = _get_errno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$20.__doserrno$MH,"__doserrno");
    }
    public static MemoryAddress __doserrno () {
        var mh$ = __doserrno$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$20._set_doserrno$MH,"_set_doserrno");
    }
    public static int _set_doserrno ( int _Value) {
        var mh$ = _set_doserrno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$21._get_doserrno$MH,"_get_doserrno");
    }
    public static int _get_doserrno ( Addressable _Value) {
        var mh$ = _get_doserrno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sys_errlist$MH() {
        return RuntimeHelper.requireNonNull(constants$21.__sys_errlist$MH,"__sys_errlist");
    }
    public static MemoryAddress __sys_errlist () {
        var mh$ = __sys_errlist$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sys_nerr$MH() {
        return RuntimeHelper.requireNonNull(constants$21.__sys_nerr$MH,"__sys_nerr");
    }
    public static MemoryAddress __sys_nerr () {
        var mh$ = __sys_nerr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$21.perror$MH,"perror");
    }
    public static void perror ( Addressable _ErrMsg) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(_ErrMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__pgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$21.__p__pgmptr$MH,"__p__pgmptr");
    }
    public static MemoryAddress __p__pgmptr () {
        var mh$ = __p__pgmptr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__wpgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$21.__p__wpgmptr$MH,"__p__wpgmptr");
    }
    public static MemoryAddress __p__wpgmptr () {
        var mh$ = __p__wpgmptr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__fmode$MH() {
        return RuntimeHelper.requireNonNull(constants$22.__p__fmode$MH,"__p__fmode");
    }
    public static MemoryAddress __p__fmode () {
        var mh$ = __p__fmode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_pgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$22._get_pgmptr$MH,"_get_pgmptr");
    }
    public static int _get_pgmptr ( Addressable _Value) {
        var mh$ = _get_pgmptr$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_wpgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$22._get_wpgmptr$MH,"_get_wpgmptr");
    }
    public static int _get_wpgmptr ( Addressable _Value) {
        var mh$ = _get_wpgmptr$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_fmode$MH() {
        return RuntimeHelper.requireNonNull(constants$22._set_fmode$MH,"_set_fmode");
    }
    public static int _set_fmode ( int _Mode) {
        var mh$ = _set_fmode$MH();
        try {
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_fmode$MH() {
        return RuntimeHelper.requireNonNull(constants$22._get_fmode$MH,"_get_fmode");
    }
    public static int _get_fmode ( Addressable _PMode) {
        var mh$ = _get_fmode$MH();
        try {
            return (int)mh$.invokeExact(_PMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$22.abs$MH,"abs");
    }
    public static int abs ( int _Number) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$23.labs$MH,"labs");
    }
    public static int labs ( int _Number) {
        var mh$ = labs$MH();
        try {
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$23.llabs$MH,"llabs");
    }
    public static long llabs ( long _Number) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _abs64$MH() {
        return RuntimeHelper.requireNonNull(constants$23._abs64$MH,"_abs64");
    }
    public static long _abs64 ( long _Number) {
        var mh$ = _abs64$MH();
        try {
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _byteswap_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$23._byteswap_ushort$MH,"_byteswap_ushort");
    }
    public static short _byteswap_ushort ( short _Number) {
        var mh$ = _byteswap_ushort$MH();
        try {
            return (short)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _byteswap_ulong$MH() {
        return RuntimeHelper.requireNonNull(constants$23._byteswap_ulong$MH,"_byteswap_ulong");
    }
    public static int _byteswap_ulong ( int _Number) {
        var mh$ = _byteswap_ulong$MH();
        try {
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _byteswap_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$23._byteswap_uint64$MH,"_byteswap_uint64");
    }
    public static long _byteswap_uint64 ( long _Number) {
        var mh$ = _byteswap_uint64$MH();
        try {
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$24.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int _Numerator,  int _Denominator) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  int _Numerator,  int _Denominator) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long _Numerator,  long _Denominator) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl$MH() {
        return RuntimeHelper.requireNonNull(constants$24._rotl$MH,"_rotl");
    }
    public static int _rotl ( int _Value,  int _Shift) {
        var mh$ = _rotl$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lrotl$MH() {
        return RuntimeHelper.requireNonNull(constants$24._lrotl$MH,"_lrotl");
    }
    public static int _lrotl ( int _Value,  int _Shift) {
        var mh$ = _lrotl$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl64$MH() {
        return RuntimeHelper.requireNonNull(constants$24._rotl64$MH,"_rotl64");
    }
    public static long _rotl64 ( long _Value,  int _Shift) {
        var mh$ = _rotl64$MH();
        try {
            return (long)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr$MH() {
        return RuntimeHelper.requireNonNull(constants$25._rotr$MH,"_rotr");
    }
    public static int _rotr ( int _Value,  int _Shift) {
        var mh$ = _rotr$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lrotr$MH() {
        return RuntimeHelper.requireNonNull(constants$25._lrotr$MH,"_lrotr");
    }
    public static int _lrotr ( int _Value,  int _Shift) {
        var mh$ = _lrotr$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr64$MH() {
        return RuntimeHelper.requireNonNull(constants$25._rotr64$MH,"_rotr64");
    }
    public static long _rotr64 ( long _Value,  int _Shift) {
        var mh$ = _rotr64$MH();
        try {
            return (long)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$25.srand$MH,"srand");
    }
    public static void srand ( int _Seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(_Seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$25.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$25.atof$MH,"atof");
    }
    public static double atof ( Addressable _String) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$26.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable _String) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$26.atol$MH,"atol");
    }
    public static int atol ( Addressable _String) {
        var mh$ = atol$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$26.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable _String) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$26._atoi64$MH,"_atoi64");
    }
    public static long _atoi64 ( Addressable _String) {
        var mh$ = _atoi64$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$26._atof_l$MH,"_atof_l");
    }
    public static double _atof_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _atof_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoi_l$MH() {
        return RuntimeHelper.requireNonNull(constants$26._atoi_l$MH,"_atoi_l");
    }
    public static int _atoi_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _atoi_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$27._atol_l$MH,"_atol_l");
    }
    public static int _atol_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _atol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$27._atoll_l$MH,"_atoll_l");
    }
    public static long _atoll_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _atoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$27._atoi64_l$MH,"_atoi64_l");
    }
    public static long _atoi64_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _atoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoflt$MH() {
        return RuntimeHelper.requireNonNull(constants$27._atoflt$MH,"_atoflt");
    }
    public static int _atoflt ( Addressable _Result,  Addressable _String) {
        var mh$ = _atoflt$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atodbl$MH() {
        return RuntimeHelper.requireNonNull(constants$27._atodbl$MH,"_atodbl");
    }
    public static int _atodbl ( Addressable _Result,  Addressable _String) {
        var mh$ = _atodbl$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoldbl$MH() {
        return RuntimeHelper.requireNonNull(constants$27._atoldbl$MH,"_atoldbl");
    }
    public static int _atoldbl ( Addressable _Result,  Addressable _String) {
        var mh$ = _atoldbl$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoflt_l$MH() {
        return RuntimeHelper.requireNonNull(constants$28._atoflt_l$MH,"_atoflt_l");
    }
    public static int _atoflt_l ( Addressable _Result,  Addressable _String,  Addressable _Locale) {
        var mh$ = _atoflt_l$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atodbl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$28._atodbl_l$MH,"_atodbl_l");
    }
    public static int _atodbl_l ( Addressable _Result,  Addressable _String,  Addressable _Locale) {
        var mh$ = _atodbl_l$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoldbl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$28._atoldbl_l$MH,"_atoldbl_l");
    }
    public static int _atoldbl_l ( Addressable _Result,  Addressable _String,  Addressable _Locale) {
        var mh$ = _atoldbl_l$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$28.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable _String,  Addressable _EndPtr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$28._strtof_l$MH,"_strtof_l");
    }
    public static float _strtof_l ( Addressable _String,  Addressable _EndPtr,  Addressable _Locale) {
        var mh$ = _strtof_l$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$28.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable _String,  Addressable _EndPtr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtod_l$MH() {
        return RuntimeHelper.requireNonNull(constants$29._strtod_l$MH,"_strtod_l");
    }
    public static double _strtod_l ( Addressable _String,  Addressable _EndPtr,  Addressable _Locale) {
        var mh$ = _strtod_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$29.strtol$MH,"strtol");
    }
    public static int strtol ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = strtol$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$29._strtol_l$MH,"_strtol_l");
    }
    public static int _strtol_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$29.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$29._strtoll_l$MH,"_strtoll_l");
    }
    public static long _strtoll_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$29.strtoul$MH,"strtoul");
    }
    public static int strtoul ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = strtoul$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoul_l$MH() {
        return RuntimeHelper.requireNonNull(constants$30._strtoul_l$MH,"_strtoul_l");
    }
    public static int _strtoul_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoul_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$30.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoull_l$MH() {
        return RuntimeHelper.requireNonNull(constants$30._strtoull_l$MH,"_strtoull_l");
    }
    public static long _strtoull_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoull_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$30._strtoi64$MH,"_strtoi64");
    }
    public static long _strtoi64 ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = _strtoi64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$30._strtoi64_l$MH,"_strtoi64_l");
    }
    public static long _strtoi64_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoui64$MH() {
        return RuntimeHelper.requireNonNull(constants$30._strtoui64$MH,"_strtoui64");
    }
    public static long _strtoui64 ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = _strtoui64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoui64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$31._strtoui64_l$MH,"_strtoui64_l");
    }
    public static long _strtoui64_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoui64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$31._itoa_s$MH,"_itoa_s");
    }
    public static int _itoa_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _itoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itoa$MH() {
        return RuntimeHelper.requireNonNull(constants$31._itoa$MH,"_itoa");
    }
    public static MemoryAddress _itoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _itoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$31._ltoa_s$MH,"_ltoa_s");
    }
    public static int _ltoa_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ltoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$31._ltoa$MH,"_ltoa");
    }
    public static MemoryAddress _ltoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ltoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$31._ultoa_s$MH,"_ultoa_s");
    }
    public static int _ultoa_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ultoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultoa$MH() {
        return RuntimeHelper.requireNonNull(constants$32._ultoa$MH,"_ultoa");
    }
    public static MemoryAddress _ultoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ultoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64toa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$32._i64toa_s$MH,"_i64toa_s");
    }
    public static int _i64toa_s ( long _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _i64toa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64toa$MH() {
        return RuntimeHelper.requireNonNull(constants$32._i64toa$MH,"_i64toa");
    }
    public static MemoryAddress _i64toa ( long _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _i64toa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64toa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$32._ui64toa_s$MH,"_ui64toa_s");
    }
    public static int _ui64toa_s ( long _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ui64toa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64toa$MH() {
        return RuntimeHelper.requireNonNull(constants$32._ui64toa$MH,"_ui64toa");
    }
    public static MemoryAddress _ui64toa ( long _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ui64toa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ecvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$32._ecvt_s$MH,"_ecvt_s");
    }
    public static int _ecvt_s ( Addressable _Buffer,  long _BufferCount,  double _Value,  int _DigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _ecvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$33._ecvt$MH,"_ecvt");
    }
    public static MemoryAddress _ecvt ( double _Value,  int _DigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fcvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$33._fcvt_s$MH,"_fcvt_s");
    }
    public static int _fcvt_s ( Addressable _Buffer,  long _BufferCount,  double _Value,  int _FractionalDigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _fcvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$33._fcvt$MH,"_fcvt");
    }
    public static MemoryAddress _fcvt ( double _Value,  int _FractionalDigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gcvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$33._gcvt_s$MH,"_gcvt_s");
    }
    public static int _gcvt_s ( Addressable _Buffer,  long _BufferCount,  double _Value,  int _DigitCount) {
        var mh$ = _gcvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$33._gcvt$MH,"_gcvt");
    }
    public static MemoryAddress _gcvt ( double _Value,  int _DigitCount,  Addressable _Buffer) {
        var mh$ = _gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ___mb_cur_max_func$MH() {
        return RuntimeHelper.requireNonNull(constants$33.___mb_cur_max_func$MH,"___mb_cur_max_func");
    }
    public static int ___mb_cur_max_func () {
        var mh$ = ___mb_cur_max_func$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ___mb_cur_max_l_func$MH() {
        return RuntimeHelper.requireNonNull(constants$34.___mb_cur_max_l_func$MH,"___mb_cur_max_l_func");
    }
    public static int ___mb_cur_max_l_func ( Addressable _Locale) {
        var mh$ = ___mb_cur_max_l_func$MH();
        try {
            return (int)mh$.invokeExact(_Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$34.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable _Ch,  long _MaxCount) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(_Ch, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mblen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$34._mblen_l$MH,"_mblen_l");
    }
    public static int _mblen_l ( Addressable _Ch,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mblen_l$MH();
        try {
            return (int)mh$.invokeExact(_Ch, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrlen$MH() {
        return RuntimeHelper.requireNonNull(constants$34._mbstrlen$MH,"_mbstrlen");
    }
    public static long _mbstrlen ( Addressable _String) {
        var mh$ = _mbstrlen$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrlen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$34._mbstrlen_l$MH,"_mbstrlen_l");
    }
    public static long _mbstrlen_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _mbstrlen_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$34._mbstrnlen$MH,"_mbstrnlen");
    }
    public static long _mbstrnlen ( Addressable _String,  long _MaxCount) {
        var mh$ = _mbstrnlen$MH();
        try {
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrnlen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$35._mbstrnlen_l$MH,"_mbstrnlen_l");
    }
    public static long _mbstrnlen_l ( Addressable _String,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mbstrnlen_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$35.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable _DstCh,  Addressable _SrcCh,  long _SrcSizeInBytes) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbtowc_l$MH() {
        return RuntimeHelper.requireNonNull(constants$35._mbtowc_l$MH,"_mbtowc_l");
    }
    public static int _mbtowc_l ( Addressable _DstCh,  Addressable _SrcCh,  long _SrcSizeInBytes,  Addressable _Locale) {
        var mh$ = _mbtowc_l$MH();
        try {
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs_s$MH() {
        return RuntimeHelper.requireNonNull(constants$35.mbstowcs_s$MH,"mbstowcs_s");
    }
    public static int mbstowcs_s ( Addressable _PtNumOfCharConverted,  Addressable _DstBuf,  long _SizeInWords,  Addressable _SrcBuf,  long _MaxCount) {
        var mh$ = mbstowcs_s$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$35.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable _Dest,  Addressable _Source,  long _MaxCount) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstowcs_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$35._mbstowcs_s_l$MH,"_mbstowcs_s_l");
    }
    public static int _mbstowcs_s_l ( Addressable _PtNumOfCharConverted,  Addressable _DstBuf,  long _SizeInWords,  Addressable _SrcBuf,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mbstowcs_s_l$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstowcs_l$MH() {
        return RuntimeHelper.requireNonNull(constants$36._mbstowcs_l$MH,"_mbstowcs_l");
    }
    public static long _mbstowcs_l ( Addressable _Dest,  Addressable _Source,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mbstowcs_l$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$36.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable _MbCh,  short _WCh) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(_MbCh, _WCh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wctomb_l$MH() {
        return RuntimeHelper.requireNonNull(constants$36._wctomb_l$MH,"_wctomb_l");
    }
    public static int _wctomb_l ( Addressable _MbCh,  short _WCh,  Addressable _Locale) {
        var mh$ = _wctomb_l$MH();
        try {
            return (int)mh$.invokeExact(_MbCh, _WCh, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb_s$MH() {
        return RuntimeHelper.requireNonNull(constants$36.wctomb_s$MH,"wctomb_s");
    }
    public static int wctomb_s ( Addressable _SizeConverted,  Addressable _MbCh,  long _SizeInBytes,  short _WCh) {
        var mh$ = wctomb_s$MH();
        try {
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wctomb_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$36._wctomb_s_l$MH,"_wctomb_s_l");
    }
    public static int _wctomb_s_l ( Addressable _SizeConverted,  Addressable _MbCh,  long _SizeInBytes,  short _WCh,  Addressable _Locale) {
        var mh$ = _wctomb_s_l$MH();
        try {
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs_s$MH() {
        return RuntimeHelper.requireNonNull(constants$36.wcstombs_s$MH,"wcstombs_s");
    }
    public static int wcstombs_s ( Addressable _PtNumOfCharConverted,  Addressable _Dst,  long _DstSizeInBytes,  Addressable _Src,  long _MaxCountInBytes) {
        var mh$ = wcstombs_s$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$37.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable _Dest,  Addressable _Source,  long _MaxCount) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstombs_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$37._wcstombs_s_l$MH,"_wcstombs_s_l");
    }
    public static int _wcstombs_s_l ( Addressable _PtNumOfCharConverted,  Addressable _Dst,  long _DstSizeInBytes,  Addressable _Src,  long _MaxCountInBytes,  Addressable _Locale) {
        var mh$ = _wcstombs_s_l$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstombs_l$MH() {
        return RuntimeHelper.requireNonNull(constants$37._wcstombs_l$MH,"_wcstombs_l");
    }
    public static long _wcstombs_l ( Addressable _Dest,  Addressable _Source,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _wcstombs_l$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fullpath$MH() {
        return RuntimeHelper.requireNonNull(constants$37._fullpath$MH,"_fullpath");
    }
    public static MemoryAddress _fullpath ( Addressable _Buffer,  Addressable _Path,  long _BufferCount) {
        var mh$ = _fullpath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _makepath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$37._makepath_s$MH,"_makepath_s");
    }
    public static int _makepath_s ( Addressable _Buffer,  long _BufferCount,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _makepath_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _makepath$MH() {
        return RuntimeHelper.requireNonNull(constants$37._makepath$MH,"_makepath");
    }
    public static void _makepath ( Addressable _Buffer,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _makepath$MH();
        try {
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _splitpath$MH() {
        return RuntimeHelper.requireNonNull(constants$38._splitpath$MH,"_splitpath");
    }
    public static void _splitpath ( Addressable _FullPath,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _splitpath$MH();
        try {
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _splitpath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$38._splitpath_s$MH,"_splitpath_s");
    }
    public static int _splitpath_s ( Addressable _FullPath,  Addressable _Drive,  long _DriveCount,  Addressable _Dir,  long _DirCount,  Addressable _Filename,  long _FilenameCount,  Addressable _Ext,  long _ExtCount) {
        var mh$ = _splitpath_s$MH();
        try {
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$38.getenv_s$MH,"getenv_s");
    }
    public static int getenv_s ( Addressable _RequiredCount,  Addressable _Buffer,  long _BufferCount,  Addressable _VarName) {
        var mh$ = getenv_s$MH();
        try {
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___argc$MH() {
        return RuntimeHelper.requireNonNull(constants$38.__p___argc$MH,"__p___argc");
    }
    public static MemoryAddress __p___argc () {
        var mh$ = __p___argc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___argv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.__p___argv$MH,"__p___argv");
    }
    public static MemoryAddress __p___argv () {
        var mh$ = __p___argv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___wargv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.__p___wargv$MH,"__p___wargv");
    }
    public static MemoryAddress __p___wargv () {
        var mh$ = __p___wargv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__environ$MH() {
        return RuntimeHelper.requireNonNull(constants$39.__p__environ$MH,"__p__environ");
    }
    public static MemoryAddress __p__environ () {
        var mh$ = __p__environ$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__wenviron$MH() {
        return RuntimeHelper.requireNonNull(constants$39.__p__wenviron$MH,"__p__wenviron");
    }
    public static MemoryAddress __p__wenviron () {
        var mh$ = __p__wenviron$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$39.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable _VarName) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dupenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$39._dupenv_s$MH,"_dupenv_s");
    }
    public static int _dupenv_s ( Addressable _Buffer,  Addressable _BufferCount,  Addressable _VarName) {
        var mh$ = _dupenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$39.system$MH,"system");
    }
    public static int system ( Addressable _Command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$39._putenv$MH,"_putenv");
    }
    public static int _putenv ( Addressable _EnvString) {
        var mh$ = _putenv$MH();
        try {
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$40._putenv_s$MH,"_putenv_s");
    }
    public static int _putenv_s ( Addressable _Name,  Addressable _Value) {
        var mh$ = _putenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _searchenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$40._searchenv_s$MH,"_searchenv_s");
    }
    public static int _searchenv_s ( Addressable _Filename,  Addressable _VarName,  Addressable _Buffer,  long _BufferCount) {
        var mh$ = _searchenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _searchenv$MH() {
        return RuntimeHelper.requireNonNull(constants$40._searchenv$MH,"_searchenv");
    }
    public static void _searchenv ( Addressable _Filename,  Addressable _VarName,  Addressable _Buffer) {
        var mh$ = _searchenv$MH();
        try {
            mh$.invokeExact(_Filename, _VarName, _Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _seterrormode$MH() {
        return RuntimeHelper.requireNonNull(constants$40._seterrormode$MH,"_seterrormode");
    }
    public static void _seterrormode ( int _Mode) {
        var mh$ = _seterrormode$MH();
        try {
            mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _beep$MH() {
        return RuntimeHelper.requireNonNull(constants$40._beep$MH,"_beep");
    }
    public static void _beep ( int _Frequency,  int _Duration) {
        var mh$ = _beep$MH();
        try {
            mh$.invokeExact(_Frequency, _Duration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$40._sleep$MH,"_sleep");
    }
    public static void _sleep ( int _Duration) {
        var mh$ = _sleep$MH();
        try {
            mh$.invokeExact(_Duration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$41.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double _Value,  int _DigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$41.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double _Value,  int _FractionalDigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$41.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double _Value,  int _DigitCount,  Addressable _DstBuf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _DstBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle itoa$MH() {
        return RuntimeHelper.requireNonNull(constants$41.itoa$MH,"itoa");
    }
    public static MemoryAddress itoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = itoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$41.ltoa$MH,"ltoa");
    }
    public static MemoryAddress ltoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = ltoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swab$MH() {
        return RuntimeHelper.requireNonNull(constants$41.swab$MH,"swab");
    }
    public static void swab ( Addressable _Buf1,  Addressable _Buf2,  int _SizeInBytes) {
        var mh$ = swab$MH();
        try {
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ultoa$MH() {
        return RuntimeHelper.requireNonNull(constants$42.ultoa$MH,"ultoa");
    }
    public static MemoryAddress ultoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = ultoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable _EnvString) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle onexit$MH() {
        return RuntimeHelper.requireNonNull(constants$42.onexit$MH,"onexit");
    }
    public static MemoryAddress onexit ( Addressable _Func) {
        var mh$ = onexit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_LONG$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_LONG$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt int_fast16_t = Constants$root.C_LONG$LAYOUT;
    public static OfInt int_fast32_t = Constants$root.C_LONG$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static int ExceptionContinueExecution() {
        return (int)0L;
    }
    public static int ExceptionContinueSearch() {
        return (int)1L;
    }
    public static int ExceptionNestedException() {
        return (int)2L;
    }
    public static int ExceptionCollidedUnwind() {
        return (int)3L;
    }
    public static MethodHandle __C_specific_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__C_specific_handler$MH,"__C_specific_handler");
    }
    public static int __C_specific_handler ( Addressable ExceptionRecord,  Addressable EstablisherFrame,  Addressable ContextRecord,  Addressable DispatcherContext) {
        var mh$ = __C_specific_handler$MH();
        try {
            return (int)mh$.invokeExact(ExceptionRecord, EstablisherFrame, ContextRecord, DispatcherContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exception_code$MH() {
        return RuntimeHelper.requireNonNull(constants$42._exception_code$MH,"_exception_code");
    }
    public static int _exception_code () {
        var mh$ = _exception_code$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exception_info$MH() {
        return RuntimeHelper.requireNonNull(constants$42._exception_info$MH,"_exception_info");
    }
    public static MemoryAddress _exception_info () {
        var mh$ = _exception_info$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _abnormal_termination$MH() {
        return RuntimeHelper.requireNonNull(constants$43._abnormal_termination$MH,"_abnormal_termination");
    }
    public static int _abnormal_termination () {
        var mh$ = _abnormal_termination$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress va_list$1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress __gnuc_va_list = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSHORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSZ = Constants$root.C_POINTER$LAYOUT;
    public static OfInt BOOL = Constants$root.C_LONG$LAYOUT;
    public static OfFloat FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfAddress PFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBOOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBOOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfInt INT = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PUINT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle __pctype_func$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__pctype_func$MH,"__pctype_func");
    }
    public static MemoryAddress __pctype_func () {
        var mh$ = __pctype_func$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pwctype_func$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__pwctype_func$MH,"__pwctype_func");
    }
    public static MemoryAddress __pwctype_func () {
        var mh$ = __pwctype_func$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$43.iswalnum$MH,"iswalnum");
    }
    public static int iswalnum ( short _C) {
        var mh$ = iswalnum$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$43.iswalpha$MH,"iswalpha");
    }
    public static int iswalpha ( short _C) {
        var mh$ = iswalpha$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswascii$MH() {
        return RuntimeHelper.requireNonNull(constants$43.iswascii$MH,"iswascii");
    }
    public static int iswascii ( short _C) {
        var mh$ = iswascii$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswblank$MH() {
        return RuntimeHelper.requireNonNull(constants$44.iswblank$MH,"iswblank");
    }
    public static int iswblank ( short _C) {
        var mh$ = iswblank$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswcntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$44.iswcntrl$MH,"iswcntrl");
    }
    public static int iswcntrl ( short _C) {
        var mh$ = iswcntrl$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$44.iswdigit$MH,"iswdigit");
    }
    public static int iswdigit ( short _C) {
        var mh$ = iswdigit$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$44.iswgraph$MH,"iswgraph");
    }
    public static int iswgraph ( short _C) {
        var mh$ = iswgraph$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswlower$MH() {
        return RuntimeHelper.requireNonNull(constants$44.iswlower$MH,"iswlower");
    }
    public static int iswlower ( short _C) {
        var mh$ = iswlower$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswprint$MH() {
        return RuntimeHelper.requireNonNull(constants$44.iswprint$MH,"iswprint");
    }
    public static int iswprint ( short _C) {
        var mh$ = iswprint$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswpunct$MH() {
        return RuntimeHelper.requireNonNull(constants$45.iswpunct$MH,"iswpunct");
    }
    public static int iswpunct ( short _C) {
        var mh$ = iswpunct$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswspace$MH() {
        return RuntimeHelper.requireNonNull(constants$45.iswspace$MH,"iswspace");
    }
    public static int iswspace ( short _C) {
        var mh$ = iswspace$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswupper$MH() {
        return RuntimeHelper.requireNonNull(constants$45.iswupper$MH,"iswupper");
    }
    public static int iswupper ( short _C) {
        var mh$ = iswupper$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$45.iswxdigit$MH,"iswxdigit");
    }
    public static int iswxdigit ( short _C) {
        var mh$ = iswxdigit$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iswcsymf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__iswcsymf$MH,"__iswcsymf");
    }
    public static int __iswcsymf ( short _C) {
        var mh$ = __iswcsymf$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iswcsym$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__iswcsym$MH,"__iswcsym");
    }
    public static int __iswcsym ( short _C) {
        var mh$ = __iswcsym$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswalnum_l$MH() {
        return RuntimeHelper.requireNonNull(constants$46._iswalnum_l$MH,"_iswalnum_l");
    }
    public static int _iswalnum_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswalnum_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswalpha_l$MH() {
        return RuntimeHelper.requireNonNull(constants$46._iswalpha_l$MH,"_iswalpha_l");
    }
    public static int _iswalpha_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswalpha_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswblank_l$MH() {
        return RuntimeHelper.requireNonNull(constants$46._iswblank_l$MH,"_iswblank_l");
    }
    public static int _iswblank_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswblank_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswcntrl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$46._iswcntrl_l$MH,"_iswcntrl_l");
    }
    public static int _iswcntrl_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswcntrl_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$46._iswdigit_l$MH,"_iswdigit_l");
    }
    public static int _iswdigit_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswdigit_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswgraph_l$MH() {
        return RuntimeHelper.requireNonNull(constants$46._iswgraph_l$MH,"_iswgraph_l");
    }
    public static int _iswgraph_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswgraph_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswlower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$47._iswlower_l$MH,"_iswlower_l");
    }
    public static int _iswlower_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswlower_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswprint_l$MH() {
        return RuntimeHelper.requireNonNull(constants$47._iswprint_l$MH,"_iswprint_l");
    }
    public static int _iswprint_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswprint_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswpunct_l$MH() {
        return RuntimeHelper.requireNonNull(constants$47._iswpunct_l$MH,"_iswpunct_l");
    }
    public static int _iswpunct_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswpunct_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswspace_l$MH() {
        return RuntimeHelper.requireNonNull(constants$47._iswspace_l$MH,"_iswspace_l");
    }
    public static int _iswspace_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswspace_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$47._iswupper_l$MH,"_iswupper_l");
    }
    public static int _iswupper_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswupper_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswxdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$47._iswxdigit_l$MH,"_iswxdigit_l");
    }
    public static int _iswxdigit_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswxdigit_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswcsymf_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48._iswcsymf_l$MH,"_iswcsymf_l");
    }
    public static int _iswcsymf_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswcsymf_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswcsym_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48._iswcsym_l$MH,"_iswcsym_l");
    }
    public static int _iswcsym_l ( short _C,  Addressable _Locale) {
        var mh$ = _iswcsym_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle towupper$MH() {
        return RuntimeHelper.requireNonNull(constants$48.towupper$MH,"towupper");
    }
    public static short towupper ( short _C) {
        var mh$ = towupper$MH();
        try {
            return (short)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle towlower$MH() {
        return RuntimeHelper.requireNonNull(constants$48.towlower$MH,"towlower");
    }
    public static short towlower ( short _C) {
        var mh$ = towlower$MH();
        try {
            return (short)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswctype$MH() {
        return RuntimeHelper.requireNonNull(constants$48.iswctype$MH,"iswctype");
    }
    public static int iswctype ( short _C,  short _Type) {
        var mh$ = iswctype$MH();
        try {
            return (int)mh$.invokeExact(_C, _Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _towupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48._towupper_l$MH,"_towupper_l");
    }
    public static short _towupper_l ( short _C,  Addressable _Locale) {
        var mh$ = _towupper_l$MH();
        try {
            return (short)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _towlower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49._towlower_l$MH,"_towlower_l");
    }
    public static short _towlower_l ( short _C,  Addressable _Locale) {
        var mh$ = _towlower_l$MH();
        try {
            return (short)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswctype_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49._iswctype_l$MH,"_iswctype_l");
    }
    public static int _iswctype_l ( short _C,  short _Type,  Addressable _Locale) {
        var mh$ = _iswctype_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Type, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isleadbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$49.isleadbyte$MH,"isleadbyte");
    }
    public static int isleadbyte ( int _C) {
        var mh$ = isleadbyte$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isleadbyte_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49._isleadbyte_l$MH,"_isleadbyte_l");
    }
    public static int _isleadbyte_l ( int _C,  Addressable _Locale) {
        var mh$ = _isleadbyte_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_wctype$MH() {
        return RuntimeHelper.requireNonNull(constants$49.is_wctype$MH,"is_wctype");
    }
    public static int is_wctype ( short _C,  short _Type) {
        var mh$ = is_wctype$MH();
        try {
            return (int)mh$.invokeExact(_C, _Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isctype$MH() {
        return RuntimeHelper.requireNonNull(constants$49._isctype$MH,"_isctype");
    }
    public static int _isctype ( int _C,  int _Type) {
        var mh$ = _isctype$MH();
        try {
            return (int)mh$.invokeExact(_C, _Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isctype_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50._isctype_l$MH,"_isctype_l");
    }
    public static int _isctype_l ( int _C,  int _Type,  Addressable _Locale) {
        var mh$ = _isctype_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Type, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$50.isalpha$MH,"isalpha");
    }
    public static int isalpha ( int _C) {
        var mh$ = isalpha$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isalpha_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50._isalpha_l$MH,"_isalpha_l");
    }
    public static int _isalpha_l ( int _C,  Addressable _Locale) {
        var mh$ = _isalpha_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isupper$MH() {
        return RuntimeHelper.requireNonNull(constants$50.isupper$MH,"isupper");
    }
    public static int isupper ( int _C) {
        var mh$ = isupper$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50._isupper_l$MH,"_isupper_l");
    }
    public static int _isupper_l ( int _C,  Addressable _Locale) {
        var mh$ = _isupper_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle islower$MH() {
        return RuntimeHelper.requireNonNull(constants$50.islower$MH,"islower");
    }
    public static int islower ( int _C) {
        var mh$ = islower$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _islower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$51._islower_l$MH,"_islower_l");
    }
    public static int _islower_l ( int _C,  Addressable _Locale) {
        var mh$ = _islower_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$51.isdigit$MH,"isdigit");
    }
    public static int isdigit ( int _C) {
        var mh$ = isdigit$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$51._isdigit_l$MH,"_isdigit_l");
    }
    public static int _isdigit_l ( int _C,  Addressable _Locale) {
        var mh$ = _isdigit_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$51.isxdigit$MH,"isxdigit");
    }
    public static int isxdigit ( int _C) {
        var mh$ = isxdigit$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isxdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$51._isxdigit_l$MH,"_isxdigit_l");
    }
    public static int _isxdigit_l ( int _C,  Addressable _Locale) {
        var mh$ = _isxdigit_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isspace$MH() {
        return RuntimeHelper.requireNonNull(constants$51.isspace$MH,"isspace");
    }
    public static int isspace ( int _C) {
        var mh$ = isspace$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isspace_l$MH() {
        return RuntimeHelper.requireNonNull(constants$52._isspace_l$MH,"_isspace_l");
    }
    public static int _isspace_l ( int _C,  Addressable _Locale) {
        var mh$ = _isspace_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ispunct$MH() {
        return RuntimeHelper.requireNonNull(constants$52.ispunct$MH,"ispunct");
    }
    public static int ispunct ( int _C) {
        var mh$ = ispunct$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ispunct_l$MH() {
        return RuntimeHelper.requireNonNull(constants$52._ispunct_l$MH,"_ispunct_l");
    }
    public static int _ispunct_l ( int _C,  Addressable _Locale) {
        var mh$ = _ispunct_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isblank$MH() {
        return RuntimeHelper.requireNonNull(constants$52.isblank$MH,"isblank");
    }
    public static int isblank ( int _C) {
        var mh$ = isblank$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isblank_l$MH() {
        return RuntimeHelper.requireNonNull(constants$52._isblank_l$MH,"_isblank_l");
    }
    public static int _isblank_l ( int _C,  Addressable _Locale) {
        var mh$ = _isblank_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$52.isalnum$MH,"isalnum");
    }
    public static int isalnum ( int _C) {
        var mh$ = isalnum$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isalnum_l$MH() {
        return RuntimeHelper.requireNonNull(constants$53._isalnum_l$MH,"_isalnum_l");
    }
    public static int _isalnum_l ( int _C,  Addressable _Locale) {
        var mh$ = _isalnum_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isprint$MH() {
        return RuntimeHelper.requireNonNull(constants$53.isprint$MH,"isprint");
    }
    public static int isprint ( int _C) {
        var mh$ = isprint$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isprint_l$MH() {
        return RuntimeHelper.requireNonNull(constants$53._isprint_l$MH,"_isprint_l");
    }
    public static int _isprint_l ( int _C,  Addressable _Locale) {
        var mh$ = _isprint_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$53.isgraph$MH,"isgraph");
    }
    public static int isgraph ( int _C) {
        var mh$ = isgraph$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isgraph_l$MH() {
        return RuntimeHelper.requireNonNull(constants$53._isgraph_l$MH,"_isgraph_l");
    }
    public static int _isgraph_l ( int _C,  Addressable _Locale) {
        var mh$ = _isgraph_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iscntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$53.iscntrl$MH,"iscntrl");
    }
    public static int iscntrl ( int _C) {
        var mh$ = iscntrl$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iscntrl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$54._iscntrl_l$MH,"_iscntrl_l");
    }
    public static int _iscntrl_l ( int _C,  Addressable _Locale) {
        var mh$ = _iscntrl_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$54.toupper$MH,"toupper");
    }
    public static int toupper ( int _C) {
        var mh$ = toupper$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$54.tolower$MH,"tolower");
    }
    public static int tolower ( int _C) {
        var mh$ = tolower$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$54._tolower$MH,"_tolower");
    }
    public static int _tolower ( int _C) {
        var mh$ = _tolower$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tolower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$54._tolower_l$MH,"_tolower_l");
    }
    public static int _tolower_l ( int _C,  Addressable _Locale) {
        var mh$ = _tolower_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$54._toupper$MH,"_toupper");
    }
    public static int _toupper ( int _C) {
        var mh$ = _toupper$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _toupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$55._toupper_l$MH,"_toupper_l");
    }
    public static int _toupper_l ( int _C,  Addressable _Locale) {
        var mh$ = _toupper_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isascii$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__isascii$MH,"__isascii");
    }
    public static int __isascii ( int _C) {
        var mh$ = __isascii$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __toascii$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__toascii$MH,"__toascii");
    }
    public static int __toascii ( int _C) {
        var mh$ = __toascii$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iscsymf$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__iscsymf$MH,"__iscsymf");
    }
    public static int __iscsymf ( int _C) {
        var mh$ = __iscsymf$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iscsym$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__iscsym$MH,"__iscsym");
    }
    public static int __iscsym ( int _C) {
        var mh$ = __iscsym$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acrt_locale_get_ctype_array_value$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__acrt_locale_get_ctype_array_value$MH,"__acrt_locale_get_ctype_array_value");
    }
    public static int __acrt_locale_get_ctype_array_value ( Addressable _Locale_pctype_array,  int _Char_value,  int _Mask) {
        var mh$ = __acrt_locale_get_ctype_array_value$MH();
        try {
            return (int)mh$.invokeExact(_Locale_pctype_array, _Char_value, _Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__ascii_tolower$MH,"__ascii_tolower");
    }
    public static int __ascii_tolower ( int _C) {
        var mh$ = __ascii_tolower$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__ascii_toupper$MH,"__ascii_toupper");
    }
    public static int __ascii_toupper ( int _C) {
        var mh$ = __ascii_toupper$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_iswalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__ascii_iswalpha$MH,"__ascii_iswalpha");
    }
    public static int __ascii_iswalpha ( int _C) {
        var mh$ = __ascii_iswalpha$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_iswdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__ascii_iswdigit$MH,"__ascii_iswdigit");
    }
    public static int __ascii_iswdigit ( int _C) {
        var mh$ = __ascii_iswdigit$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_towlower$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__ascii_towlower$MH,"__ascii_towlower");
    }
    public static int __ascii_towlower ( int _C) {
        var mh$ = __ascii_towlower$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_towupper$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__ascii_towupper$MH,"__ascii_towupper");
    }
    public static int __ascii_towupper ( int _C) {
        var mh$ = __ascii_towupper$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acrt_get_locale_data_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__acrt_get_locale_data_prefix$MH,"__acrt_get_locale_data_prefix");
    }
    public static MemoryAddress __acrt_get_locale_data_prefix ( Addressable _LocalePointers) {
        var mh$ = __acrt_get_locale_data_prefix$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_LocalePointers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _chvalidchk_l$MH() {
        return RuntimeHelper.requireNonNull(constants$57._chvalidchk_l$MH,"_chvalidchk_l");
    }
    public static int _chvalidchk_l ( int _C,  int _Mask,  Addressable _Locale) {
        var mh$ = _chvalidchk_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Mask, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ischartype_l$MH() {
        return RuntimeHelper.requireNonNull(constants$57._ischartype_l$MH,"_ischartype_l");
    }
    public static int _ischartype_l ( int _C,  int _Mask,  Addressable _Locale) {
        var mh$ = _ischartype_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Mask, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PINT8 = Constants$root.C_POINTER$LAYOUT;
    public static OfShort INT16 = Constants$root.C_SHORT$LAYOUT;
    public static OfAddress PINT16 = Constants$root.C_POINTER$LAYOUT;
    public static OfInt INT32 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PINT32 = Constants$root.C_POINTER$LAYOUT;
    public static OfLong INT64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PINT64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUINT8 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUINT16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUINT32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUINT64 = Constants$root.C_POINTER$LAYOUT;
    public static OfInt LONG32 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PLONG32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONG32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORD32 = Constants$root.C_POINTER$LAYOUT;
    public static OfLong INT_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PINT_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUINT_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfLong LONG_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLONG_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONG_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfLong SHANDLE_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PUHALF_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfInt HALF_PTR = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PHALF_PTR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle HandleToULong$MH() {
        return RuntimeHelper.requireNonNull(constants$57.HandleToULong$MH,"HandleToULong");
    }
    public static int HandleToULong ( Addressable h) {
        var mh$ = HandleToULong$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HandleToLong$MH() {
        return RuntimeHelper.requireNonNull(constants$57.HandleToLong$MH,"HandleToLong");
    }
    public static int HandleToLong ( Addressable h) {
        var mh$ = HandleToLong$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ULongToHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$57.ULongToHandle$MH,"ULongToHandle");
    }
    public static MemoryAddress ULongToHandle ( int h) {
        var mh$ = ULongToHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LongToHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$58.LongToHandle$MH,"LongToHandle");
    }
    public static MemoryAddress LongToHandle ( int h) {
        var mh$ = LongToHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToUlong$MH() {
        return RuntimeHelper.requireNonNull(constants$58.PtrToUlong$MH,"PtrToUlong");
    }
    public static int PtrToUlong ( Addressable p) {
        var mh$ = PtrToUlong$MH();
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToUint$MH() {
        return RuntimeHelper.requireNonNull(constants$58.PtrToUint$MH,"PtrToUint");
    }
    public static int PtrToUint ( Addressable p) {
        var mh$ = PtrToUint$MH();
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToUshort$MH() {
        return RuntimeHelper.requireNonNull(constants$58.PtrToUshort$MH,"PtrToUshort");
    }
    public static short PtrToUshort ( Addressable p) {
        var mh$ = PtrToUshort$MH();
        try {
            return (short)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToLong$MH() {
        return RuntimeHelper.requireNonNull(constants$58.PtrToLong$MH,"PtrToLong");
    }
    public static int PtrToLong ( Addressable p) {
        var mh$ = PtrToLong$MH();
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToInt$MH() {
        return RuntimeHelper.requireNonNull(constants$58.PtrToInt$MH,"PtrToInt");
    }
    public static int PtrToInt ( Addressable p) {
        var mh$ = PtrToInt$MH();
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToShort$MH() {
        return RuntimeHelper.requireNonNull(constants$59.PtrToShort$MH,"PtrToShort");
    }
    public static short PtrToShort ( Addressable p) {
        var mh$ = PtrToShort$MH();
        try {
            return (short)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IntToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$59.IntToPtr$MH,"IntToPtr");
    }
    public static MemoryAddress IntToPtr ( int i) {
        var mh$ = IntToPtr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UIntToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$59.UIntToPtr$MH,"UIntToPtr");
    }
    public static MemoryAddress UIntToPtr ( int ui) {
        var mh$ = UIntToPtr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ui);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LongToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$59.LongToPtr$MH,"LongToPtr");
    }
    public static MemoryAddress LongToPtr ( int l) {
        var mh$ = LongToPtr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ULongToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$59.ULongToPtr$MH,"ULongToPtr");
    }
    public static MemoryAddress ULongToPtr ( int ul) {
        var mh$ = ULongToPtr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ul);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ptr32ToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$59.Ptr32ToPtr$MH,"Ptr32ToPtr");
    }
    public static MemoryAddress Ptr32ToPtr ( Addressable p) {
        var mh$ = Ptr32ToPtr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Handle32ToHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$60.Handle32ToHandle$MH,"Handle32ToHandle");
    }
    public static MemoryAddress Handle32ToHandle ( Addressable h) {
        var mh$ = Handle32ToHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToPtr32$MH() {
        return RuntimeHelper.requireNonNull(constants$60.PtrToPtr32$MH,"PtrToPtr32");
    }
    public static MemoryAddress PtrToPtr32 ( Addressable p) {
        var mh$ = PtrToPtr32$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSIZE_T = Constants$root.C_POINTER$LAYOUT;
    public static OfLong SSIZE_T = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PSSIZE_T = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORD_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfLong LONG64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLONG64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONG64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORD64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKAFFINITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOID64 = Constants$root.C_POINTER$LAYOUT;
    public static OfByte CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt LONG = Constants$root.C_LONG$LAYOUT;
    public static OfInt INT$2 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NWPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZCH = Constants$root.C_POINTER$LAYOUT;
    public static OfByte TCHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress PTCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSHORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGROUP_AFFINITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfInt HRESULT = Constants$root.C_LONG$LAYOUT;
    public static OfByte CCHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress PLCID = Constants$root.C_POINTER$LAYOUT;
    public static int UNSPECIFIED_COMPARTMENT_ID() {
        return (int)0L;
    }
    public static int DEFAULT_COMPARTMENT_ID() {
        return (int)1L;
    }
    public static OfAddress PCOMPARTMENT_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFLOAT128 = Constants$root.C_POINTER$LAYOUT;
    public static OfLong LONGLONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLONGLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONGLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfLong USN = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLARGE_INTEGER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULARGE_INTEGER = Constants$root.C_POINTER$LAYOUT;
    public static OfLong RTL_REFERENCE_COUNT = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PRTL_REFERENCE_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfInt RTL_REFERENCE_COUNT32 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PRTL_REFERENCE_COUNT32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLUID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORDLONG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _rotl8$MH() {
        return RuntimeHelper.requireNonNull(constants$60._rotl8$MH,"_rotl8");
    }
    public static byte _rotl8 ( byte Value,  byte Shift) {
        var mh$ = _rotl8$MH();
        try {
            return (byte)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl16$MH() {
        return RuntimeHelper.requireNonNull(constants$60._rotl16$MH,"_rotl16");
    }
    public static short _rotl16 ( short Value,  byte Shift) {
        var mh$ = _rotl16$MH();
        try {
            return (short)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr8$MH() {
        return RuntimeHelper.requireNonNull(constants$60._rotr8$MH,"_rotr8");
    }
    public static byte _rotr8 ( byte Value,  byte Shift) {
        var mh$ = _rotr8$MH();
        try {
            return (byte)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr16$MH() {
        return RuntimeHelper.requireNonNull(constants$60._rotr16$MH,"_rotr16");
    }
    public static short _rotr16 ( short Value,  byte Shift) {
        var mh$ = _rotr16$MH();
        try {
            return (short)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PBOOLEAN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSINGLE_LIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGUID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCGUID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCLSID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFMTID = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$61.memchr$MH,"memchr");
    }
    public static MemoryAddress memchr ( Addressable _Buf,  int _Val,  long _MaxCount) {
        var mh$ = memchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Buf, _Val, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$61.memcmp$MH,"memcmp");
    }
    public static int memcmp ( Addressable _Buf1,  Addressable _Buf2,  long _Size) {
        var mh$ = memcmp$MH();
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$61.memcpy$MH,"memcpy");
    }
    public static MemoryAddress memcpy ( Addressable _Dst,  Addressable _Src,  long _Size) {
        var mh$ = memcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Dst, _Src, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$61.memmove$MH,"memmove");
    }
    public static MemoryAddress memmove ( Addressable _Dst,  Addressable _Src,  long _Size) {
        var mh$ = memmove$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Dst, _Src, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset$MH() {
        return RuntimeHelper.requireNonNull(constants$61.memset$MH,"memset");
    }
    public static MemoryAddress memset ( Addressable _Dst,  int _Val,  long _Size) {
        var mh$ = memset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Dst, _Val, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$61.strchr$MH,"strchr");
    }
    public static MemoryAddress strchr ( Addressable _Str,  int _Val) {
        var mh$ = strchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Str, _Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$62.strrchr$MH,"strrchr");
    }
    public static MemoryAddress strrchr ( Addressable _Str,  int _Ch) {
        var mh$ = strrchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Str, _Ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$62.strstr$MH,"strstr");
    }
    public static MemoryAddress strstr ( Addressable _Str,  Addressable _SubStr) {
        var mh$ = strstr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Str, _SubStr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcschr$MH() {
        return RuntimeHelper.requireNonNull(constants$62.wcschr$MH,"wcschr");
    }
    public static MemoryAddress wcschr ( Addressable _Str,  short _Ch) {
        var mh$ = wcschr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Str, _Ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$62.wcsrchr$MH,"wcsrchr");
    }
    public static MemoryAddress wcsrchr ( Addressable _Str,  short _Ch) {
        var mh$ = wcsrchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Str, _Ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsstr$MH() {
        return RuntimeHelper.requireNonNull(constants$62.wcsstr$MH,"wcsstr");
    }
    public static MemoryAddress wcsstr ( Addressable _Str,  Addressable _SubStr) {
        var mh$ = wcsstr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Str, _SubStr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$62.memcpy_s$MH,"memcpy_s");
    }
    public static int memcpy_s ( Addressable _Destination,  long _DestinationSize,  Addressable _Source,  long _SourceSize) {
        var mh$ = memcpy_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _DestinationSize, _Source, _SourceSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove_s$MH() {
        return RuntimeHelper.requireNonNull(constants$63.memmove_s$MH,"memmove_s");
    }
    public static int memmove_s ( Addressable _Destination,  long _DestinationSize,  Addressable _Source,  long _SourceSize) {
        var mh$ = memmove_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _DestinationSize, _Source, _SourceSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _memicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$63._memicmp$MH,"_memicmp");
    }
    public static int _memicmp ( Addressable _Buf1,  Addressable _Buf2,  long _Size) {
        var mh$ = _memicmp$MH();
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _memicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$63._memicmp_l$MH,"_memicmp_l");
    }
    public static int _memicmp_l ( Addressable _Buf1,  Addressable _Buf2,  long _Size,  Addressable _Locale) {
        var mh$ = _memicmp_l$MH();
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$63.memccpy$MH,"memccpy");
    }
    public static MemoryAddress memccpy ( Addressable _Dst,  Addressable _Src,  int _Val,  long _Size) {
        var mh$ = memccpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Dst, _Src, _Val, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$63.memicmp$MH,"memicmp");
    }
    public static int memicmp ( Addressable _Buf1,  Addressable _Buf2,  long _Size) {
        var mh$ = memicmp$MH();
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$63.wcscat_s$MH,"wcscat_s");
    }
    public static int wcscat_s ( Addressable _Destination,  long _SizeInWords,  Addressable _Source) {
        var mh$ = wcscat_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$64.wcscpy_s$MH,"wcscpy_s");
    }
    public static int wcscpy_s ( Addressable _Destination,  long _SizeInWords,  Addressable _Source) {
        var mh$ = wcscpy_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$64.wcsncat_s$MH,"wcsncat_s");
    }
    public static int wcsncat_s ( Addressable _Destination,  long _SizeInWords,  Addressable _Source,  long _MaxCount) {
        var mh$ = wcsncat_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$64.wcsncpy_s$MH,"wcsncpy_s");
    }
    public static int wcsncpy_s ( Addressable _Destination,  long _SizeInWords,  Addressable _Source,  long _MaxCount) {
        var mh$ = wcsncpy_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstok_s$MH() {
        return RuntimeHelper.requireNonNull(constants$64.wcstok_s$MH,"wcstok_s");
    }
    public static MemoryAddress wcstok_s ( Addressable _String,  Addressable _Delimiter,  Addressable _Context) {
        var mh$ = wcstok_s$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Delimiter, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsdup$MH() {
        return RuntimeHelper.requireNonNull(constants$64._wcsdup$MH,"_wcsdup");
    }
    public static MemoryAddress _wcsdup ( Addressable _String) {
        var mh$ = _wcsdup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscat$MH() {
        return RuntimeHelper.requireNonNull(constants$64.wcscat$MH,"wcscat");
    }
    public static MemoryAddress wcscat ( Addressable _Destination,  Addressable _Source) {
        var mh$ = wcscat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscmp$MH() {
        return RuntimeHelper.requireNonNull(constants$65.wcscmp$MH,"wcscmp");
    }
    public static int wcscmp ( Addressable _String1,  Addressable _String2) {
        var mh$ = wcscmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscpy$MH() {
        return RuntimeHelper.requireNonNull(constants$65.wcscpy$MH,"wcscpy");
    }
    public static MemoryAddress wcscpy ( Addressable _Destination,  Addressable _Source) {
        var mh$ = wcscpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscspn$MH() {
        return RuntimeHelper.requireNonNull(constants$65.wcscspn$MH,"wcscspn");
    }
    public static long wcscspn ( Addressable _String,  Addressable _Control) {
        var mh$ = wcscspn$MH();
        try {
            return (long)mh$.invokeExact(_String, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$65.wcslen$MH,"wcslen");
    }
    public static long wcslen ( Addressable _String) {
        var mh$ = wcslen$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$65.wcsnlen$MH,"wcsnlen");
    }
    public static long wcsnlen ( Addressable _Source,  long _MaxCount) {
        var mh$ = wcsnlen$MH();
        try {
            return (long)mh$.invokeExact(_Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsnlen_s$MH() {
        return RuntimeHelper.requireNonNull(constants$65.wcsnlen_s$MH,"wcsnlen_s");
    }
    public static long wcsnlen_s ( Addressable _Source,  long _MaxCount) {
        var mh$ = wcsnlen_s$MH();
        try {
            return (long)mh$.invokeExact(_Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncat$MH() {
        return RuntimeHelper.requireNonNull(constants$66.wcsncat$MH,"wcsncat");
    }
    public static MemoryAddress wcsncat ( Addressable _Destination,  Addressable _Source,  long _Count) {
        var mh$ = wcsncat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$66.wcsncmp$MH,"wcsncmp");
    }
    public static int wcsncmp ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = wcsncmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$66.wcsncpy$MH,"wcsncpy");
    }
    public static MemoryAddress wcsncpy ( Addressable _Destination,  Addressable _Source,  long _Count) {
        var mh$ = wcsncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcspbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$66.wcspbrk$MH,"wcspbrk");
    }
    public static MemoryAddress wcspbrk ( Addressable _String,  Addressable _Control) {
        var mh$ = wcspbrk$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsspn$MH() {
        return RuntimeHelper.requireNonNull(constants$66.wcsspn$MH,"wcsspn");
    }
    public static long wcsspn ( Addressable _String,  Addressable _Control) {
        var mh$ = wcsspn$MH();
        try {
            return (long)mh$.invokeExact(_String, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstok$MH() {
        return RuntimeHelper.requireNonNull(constants$66.wcstok$MH,"wcstok");
    }
    public static MemoryAddress wcstok ( Addressable _String,  Addressable _Delimiter,  Addressable _Context) {
        var mh$ = wcstok$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Delimiter, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstok$MH() {
        return RuntimeHelper.requireNonNull(constants$67._wcstok$MH,"_wcstok");
    }
    public static MemoryAddress _wcstok ( Addressable _String,  Addressable _Delimiter) {
        var mh$ = _wcstok$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Delimiter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcserror$MH() {
        return RuntimeHelper.requireNonNull(constants$67._wcserror$MH,"_wcserror");
    }
    public static MemoryAddress _wcserror ( int _ErrorNumber) {
        var mh$ = _wcserror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_ErrorNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcserror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$67._wcserror_s$MH,"_wcserror_s");
    }
    public static int _wcserror_s ( Addressable _Buffer,  long _SizeInWords,  int _ErrorNumber) {
        var mh$ = _wcserror_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInWords, _ErrorNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __wcserror$MH() {
        return RuntimeHelper.requireNonNull(constants$67.__wcserror$MH,"__wcserror");
    }
    public static MemoryAddress __wcserror ( Addressable _String) {
        var mh$ = __wcserror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __wcserror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$67.__wcserror_s$MH,"__wcserror_s");
    }
    public static int __wcserror_s ( Addressable _Buffer,  long _SizeInWords,  Addressable _ErrorMessage) {
        var mh$ = __wcserror_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInWords, _ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$67._wcsicmp$MH,"_wcsicmp");
    }
    public static int _wcsicmp ( Addressable _String1,  Addressable _String2) {
        var mh$ = _wcsicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$68._wcsicmp_l$MH,"_wcsicmp_l");
    }
    public static int _wcsicmp_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = _wcsicmp_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$68._wcsnicmp$MH,"_wcsnicmp");
    }
    public static int _wcsnicmp ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = _wcsnicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$68._wcsnicmp_l$MH,"_wcsnicmp_l");
    }
    public static int _wcsnicmp_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _wcsnicmp_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$68._wcsnset_s$MH,"_wcsnset_s");
    }
    public static int _wcsnset_s ( Addressable _Destination,  long _SizeInWords,  short _Value,  long _MaxCount) {
        var mh$ = _wcsnset_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnset$MH() {
        return RuntimeHelper.requireNonNull(constants$68._wcsnset$MH,"_wcsnset");
    }
    public static MemoryAddress _wcsnset ( Addressable _String,  short _Value,  long _MaxCount) {
        var mh$ = _wcsnset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsrev$MH() {
        return RuntimeHelper.requireNonNull(constants$68._wcsrev$MH,"_wcsrev");
    }
    public static MemoryAddress _wcsrev ( Addressable _String) {
        var mh$ = _wcsrev$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$69._wcsset_s$MH,"_wcsset_s");
    }
    public static int _wcsset_s ( Addressable _Destination,  long _SizeInWords,  short _Value) {
        var mh$ = _wcsset_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsset$MH() {
        return RuntimeHelper.requireNonNull(constants$69._wcsset$MH,"_wcsset");
    }
    public static MemoryAddress _wcsset ( Addressable _String,  short _Value) {
        var mh$ = _wcsset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$69._wcslwr_s$MH,"_wcslwr_s");
    }
    public static int _wcslwr_s ( Addressable _String,  long _SizeInWords) {
        var mh$ = _wcslwr_s$MH();
        try {
            return (int)mh$.invokeExact(_String, _SizeInWords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr$MH() {
        return RuntimeHelper.requireNonNull(constants$69._wcslwr$MH,"_wcslwr");
    }
    public static MemoryAddress _wcslwr ( Addressable _String) {
        var mh$ = _wcslwr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$69._wcslwr_s_l$MH,"_wcslwr_s_l");
    }
    public static int _wcslwr_s_l ( Addressable _String,  long _SizeInWords,  Addressable _Locale) {
        var mh$ = _wcslwr_s_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _SizeInWords, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$69._wcslwr_l$MH,"_wcslwr_l");
    }
    public static MemoryAddress _wcslwr_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wcslwr_l$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$70._wcsupr_s$MH,"_wcsupr_s");
    }
    public static int _wcsupr_s ( Addressable _String,  long _Size) {
        var mh$ = _wcsupr_s$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr$MH() {
        return RuntimeHelper.requireNonNull(constants$70._wcsupr$MH,"_wcsupr");
    }
    public static MemoryAddress _wcsupr ( Addressable _String) {
        var mh$ = _wcsupr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$70._wcsupr_s_l$MH,"_wcsupr_s_l");
    }
    public static int _wcsupr_s_l ( Addressable _String,  long _Size,  Addressable _Locale) {
        var mh$ = _wcsupr_s_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$70._wcsupr_l$MH,"_wcsupr_l");
    }
    public static MemoryAddress _wcsupr_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wcsupr_l$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$70.wcsxfrm$MH,"wcsxfrm");
    }
    public static long wcsxfrm ( Addressable _Destination,  Addressable _Source,  long _MaxCount) {
        var mh$ = wcsxfrm$MH();
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$70._wcsxfrm_l$MH,"_wcsxfrm_l");
    }
    public static long _wcsxfrm_l ( Addressable _Destination,  Addressable _Source,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _wcsxfrm_l$MH();
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscoll$MH() {
        return RuntimeHelper.requireNonNull(constants$71.wcscoll$MH,"wcscoll");
    }
    public static int wcscoll ( Addressable _String1,  Addressable _String2) {
        var mh$ = wcscoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcscoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$71._wcscoll_l$MH,"_wcscoll_l");
    }
    public static int _wcscoll_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = _wcscoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$71._wcsicoll$MH,"_wcsicoll");
    }
    public static int _wcsicoll ( Addressable _String1,  Addressable _String2) {
        var mh$ = _wcsicoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$71._wcsicoll_l$MH,"_wcsicoll_l");
    }
    public static int _wcsicoll_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = _wcsicoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsncoll$MH() {
        return RuntimeHelper.requireNonNull(constants$71._wcsncoll$MH,"_wcsncoll");
    }
    public static int _wcsncoll ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = _wcsncoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsncoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$71._wcsncoll_l$MH,"_wcsncoll_l");
    }
    public static int _wcsncoll_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _wcsncoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$72._wcsnicoll$MH,"_wcsnicoll");
    }
    public static int _wcsnicoll ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = _wcsnicoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$72._wcsnicoll_l$MH,"_wcsnicoll_l");
    }
    public static int _wcsnicoll_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _wcsnicoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsdup$MH() {
        return RuntimeHelper.requireNonNull(constants$72.wcsdup$MH,"wcsdup");
    }
    public static MemoryAddress wcsdup ( Addressable _String) {
        var mh$ = wcsdup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$72.wcsicmp$MH,"wcsicmp");
    }
    public static int wcsicmp ( Addressable _String1,  Addressable _String2) {
        var mh$ = wcsicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$72.wcsnicmp$MH,"wcsnicmp");
    }
    public static int wcsnicmp ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = wcsnicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsnset$MH() {
        return RuntimeHelper.requireNonNull(constants$72.wcsnset$MH,"wcsnset");
    }
    public static MemoryAddress wcsnset ( Addressable _String,  short _Value,  long _MaxCount) {
        var mh$ = wcsnset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsrev$MH() {
        return RuntimeHelper.requireNonNull(constants$73.wcsrev$MH,"wcsrev");
    }
    public static MemoryAddress wcsrev ( Addressable _String) {
        var mh$ = wcsrev$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsset$MH() {
        return RuntimeHelper.requireNonNull(constants$73.wcsset$MH,"wcsset");
    }
    public static MemoryAddress wcsset ( Addressable _String,  short _Value) {
        var mh$ = wcsset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcslwr$MH() {
        return RuntimeHelper.requireNonNull(constants$73.wcslwr$MH,"wcslwr");
    }
    public static MemoryAddress wcslwr ( Addressable _String) {
        var mh$ = wcslwr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsupr$MH() {
        return RuntimeHelper.requireNonNull(constants$73.wcsupr$MH,"wcsupr");
    }
    public static MemoryAddress wcsupr ( Addressable _String) {
        var mh$ = wcsupr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$73.wcsicoll$MH,"wcsicoll");
    }
    public static int wcsicoll ( Addressable _String1,  Addressable _String2) {
        var mh$ = wcsicoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$73.strcpy_s$MH,"strcpy_s");
    }
    public static int strcpy_s ( Addressable _Destination,  long _SizeInBytes,  Addressable _Source) {
        var mh$ = strcpy_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$74.strcat_s$MH,"strcat_s");
    }
    public static int strcat_s ( Addressable _Destination,  long _SizeInBytes,  Addressable _Source) {
        var mh$ = strcat_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$74.strerror_s$MH,"strerror_s");
    }
    public static int strerror_s ( Addressable _Buffer,  long _SizeInBytes,  int _ErrorNumber) {
        var mh$ = strerror_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInBytes, _ErrorNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$74.strncat_s$MH,"strncat_s");
    }
    public static int strncat_s ( Addressable _Destination,  long _SizeInBytes,  Addressable _Source,  long _MaxCount) {
        var mh$ = strncat_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$74.strncpy_s$MH,"strncpy_s");
    }
    public static int strncpy_s ( Addressable _Destination,  long _SizeInBytes,  Addressable _Source,  long _MaxCount) {
        var mh$ = strncpy_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok_s$MH() {
        return RuntimeHelper.requireNonNull(constants$74.strtok_s$MH,"strtok_s");
    }
    public static MemoryAddress strtok_s ( Addressable _String,  Addressable _Delimiter,  Addressable _Context) {
        var mh$ = strtok_s$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Delimiter, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$74._memccpy$MH,"_memccpy");
    }
    public static MemoryAddress _memccpy ( Addressable _Dst,  Addressable _Src,  int _Val,  long _MaxCount) {
        var mh$ = _memccpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Dst, _Src, _Val, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$75.strcat$MH,"strcat");
    }
    public static MemoryAddress strcat ( Addressable _Destination,  Addressable _Source) {
        var mh$ = strcat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$75.strcmp$MH,"strcmp");
    }
    public static int strcmp ( Addressable _Str1,  Addressable _Str2) {
        var mh$ = strcmp$MH();
        try {
            return (int)mh$.invokeExact(_Str1, _Str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strcmpi$MH() {
        return RuntimeHelper.requireNonNull(constants$75._strcmpi$MH,"_strcmpi");
    }
    public static int _strcmpi ( Addressable _String1,  Addressable _String2) {
        var mh$ = _strcmpi$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$75.strcoll$MH,"strcoll");
    }
    public static int strcoll ( Addressable _String1,  Addressable _String2) {
        var mh$ = strcoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strcoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$75._strcoll_l$MH,"_strcoll_l");
    }
    public static int _strcoll_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = _strcoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$75.strcpy$MH,"strcpy");
    }
    public static MemoryAddress strcpy ( Addressable _Destination,  Addressable _Source) {
        var mh$ = strcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$76.strcspn$MH,"strcspn");
    }
    public static long strcspn ( Addressable _Str,  Addressable _Control) {
        var mh$ = strcspn$MH();
        try {
            return (long)mh$.invokeExact(_Str, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$76._strdup$MH,"_strdup");
    }
    public static MemoryAddress _strdup ( Addressable _Source) {
        var mh$ = _strdup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$76._strerror$MH,"_strerror");
    }
    public static MemoryAddress _strerror ( Addressable _ErrorMessage) {
        var mh$ = _strerror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strerror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$76._strerror_s$MH,"_strerror_s");
    }
    public static int _strerror_s ( Addressable _Buffer,  long _SizeInBytes,  Addressable _ErrorMessage) {
        var mh$ = _strerror_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInBytes, _ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$76.strerror$MH,"strerror");
    }
    public static MemoryAddress strerror ( int _ErrorMessage) {
        var mh$ = strerror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricmp$MH() {
        return RuntimeHelper.requireNonNull(constants$76._stricmp$MH,"_stricmp");
    }
    public static int _stricmp ( Addressable _String1,  Addressable _String2) {
        var mh$ = _stricmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricoll$MH() {
        return RuntimeHelper.requireNonNull(constants$77._stricoll$MH,"_stricoll");
    }
    public static int _stricoll ( Addressable _String1,  Addressable _String2) {
        var mh$ = _stricoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$77._stricoll_l$MH,"_stricoll_l");
    }
    public static int _stricoll_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = _stricoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$77._stricmp_l$MH,"_stricmp_l");
    }
    public static int _stricmp_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = _stricmp_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$77.strlen$MH,"strlen");
    }
    public static long strlen ( Addressable _Str) {
        var mh$ = strlen$MH();
        try {
            return (long)mh$.invokeExact(_Str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$77._strlwr_s$MH,"_strlwr_s");
    }
    public static int _strlwr_s ( Addressable _String,  long _Size) {
        var mh$ = _strlwr_s$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr$MH() {
        return RuntimeHelper.requireNonNull(constants$77._strlwr$MH,"_strlwr");
    }
    public static MemoryAddress _strlwr ( Addressable _String) {
        var mh$ = _strlwr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$78._strlwr_s_l$MH,"_strlwr_s_l");
    }
    public static int _strlwr_s_l ( Addressable _String,  long _Size,  Addressable _Locale) {
        var mh$ = _strlwr_s_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$78._strlwr_l$MH,"_strlwr_l");
    }
    public static MemoryAddress _strlwr_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _strlwr_l$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$78.strncat$MH,"strncat");
    }
    public static MemoryAddress strncat ( Addressable _Destination,  Addressable _Source,  long _Count) {
        var mh$ = strncat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$78.strncmp$MH,"strncmp");
    }
    public static int strncmp ( Addressable _Str1,  Addressable _Str2,  long _MaxCount) {
        var mh$ = strncmp$MH();
        try {
            return (int)mh$.invokeExact(_Str1, _Str2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$78._strnicmp$MH,"_strnicmp");
    }
    public static int _strnicmp ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = _strnicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$78._strnicmp_l$MH,"_strnicmp_l");
    }
    public static int _strnicmp_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _strnicmp_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$79._strnicoll$MH,"_strnicoll");
    }
    public static int _strnicoll ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = _strnicoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$79._strnicoll_l$MH,"_strnicoll_l");
    }
    public static int _strnicoll_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _strnicoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strncoll$MH() {
        return RuntimeHelper.requireNonNull(constants$79._strncoll$MH,"_strncoll");
    }
    public static int _strncoll ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = _strncoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strncoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$79._strncoll_l$MH,"_strncoll_l");
    }
    public static int _strncoll_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _strncoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __strncnt$MH() {
        return RuntimeHelper.requireNonNull(constants$79.__strncnt$MH,"__strncnt");
    }
    public static long __strncnt ( Addressable _String,  long _Count) {
        var mh$ = __strncnt$MH();
        try {
            return (long)mh$.invokeExact(_String, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$79.strncpy$MH,"strncpy");
    }
    public static MemoryAddress strncpy ( Addressable _Destination,  Addressable _Source,  long _Count) {
        var mh$ = strncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$80.strnlen$MH,"strnlen");
    }
    public static long strnlen ( Addressable _String,  long _MaxCount) {
        var mh$ = strnlen$MH();
        try {
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen_s$MH() {
        return RuntimeHelper.requireNonNull(constants$80.strnlen_s$MH,"strnlen_s");
    }
    public static long strnlen_s ( Addressable _String,  long _MaxCount) {
        var mh$ = strnlen_s$MH();
        try {
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$80._strnset_s$MH,"_strnset_s");
    }
    public static int _strnset_s ( Addressable _String,  long _SizeInBytes,  int _Value,  long _MaxCount) {
        var mh$ = _strnset_s$MH();
        try {
            return (int)mh$.invokeExact(_String, _SizeInBytes, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnset$MH() {
        return RuntimeHelper.requireNonNull(constants$80._strnset$MH,"_strnset");
    }
    public static MemoryAddress _strnset ( Addressable _Destination,  int _Value,  long _Count) {
        var mh$ = _strnset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Value, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$80.strpbrk$MH,"strpbrk");
    }
    public static MemoryAddress strpbrk ( Addressable _Str,  Addressable _Control) {
        var mh$ = strpbrk$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Str, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strrev$MH() {
        return RuntimeHelper.requireNonNull(constants$80._strrev$MH,"_strrev");
    }
    public static MemoryAddress _strrev ( Addressable _Str) {
        var mh$ = _strrev$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$81._strset_s$MH,"_strset_s");
    }
    public static int _strset_s ( Addressable _Destination,  long _DestinationSize,  int _Value) {
        var mh$ = _strset_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _DestinationSize, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strset$MH() {
        return RuntimeHelper.requireNonNull(constants$81._strset$MH,"_strset");
    }
    public static MemoryAddress _strset ( Addressable _Destination,  int _Value) {
        var mh$ = _strset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$81.strspn$MH,"strspn");
    }
    public static long strspn ( Addressable _Str,  Addressable _Control) {
        var mh$ = strspn$MH();
        try {
            return (long)mh$.invokeExact(_Str, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$81.strtok$MH,"strtok");
    }
    public static MemoryAddress strtok ( Addressable _String,  Addressable _Delimiter) {
        var mh$ = strtok$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Delimiter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$81._strupr_s$MH,"_strupr_s");
    }
    public static int _strupr_s ( Addressable _String,  long _Size) {
        var mh$ = _strupr_s$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr$MH() {
        return RuntimeHelper.requireNonNull(constants$81._strupr$MH,"_strupr");
    }
    public static MemoryAddress _strupr ( Addressable _String) {
        var mh$ = _strupr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$82._strupr_s_l$MH,"_strupr_s_l");
    }
    public static int _strupr_s_l ( Addressable _String,  long _Size,  Addressable _Locale) {
        var mh$ = _strupr_s_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$82._strupr_l$MH,"_strupr_l");
    }
    public static MemoryAddress _strupr_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _strupr_l$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$82.strxfrm$MH,"strxfrm");
    }
    public static long strxfrm ( Addressable _Destination,  Addressable _Source,  long _MaxCount) {
        var mh$ = strxfrm$MH();
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$82._strxfrm_l$MH,"_strxfrm_l");
    }
    public static long _strxfrm_l ( Addressable _Destination,  Addressable _Source,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _strxfrm_l$MH();
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$82.strdup$MH,"strdup");
    }
    public static MemoryAddress strdup ( Addressable _String) {
        var mh$ = strdup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmpi$MH() {
        return RuntimeHelper.requireNonNull(constants$82.strcmpi$MH,"strcmpi");
    }
    public static int strcmpi ( Addressable _String1,  Addressable _String2) {
        var mh$ = strcmpi$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stricmp$MH() {
        return RuntimeHelper.requireNonNull(constants$83.stricmp$MH,"stricmp");
    }
    public static int stricmp ( Addressable _String1,  Addressable _String2) {
        var mh$ = stricmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlwr$MH() {
        return RuntimeHelper.requireNonNull(constants$83.strlwr$MH,"strlwr");
    }
    public static MemoryAddress strlwr ( Addressable _String) {
        var mh$ = strlwr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$83.strnicmp$MH,"strnicmp");
    }
    public static int strnicmp ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = strnicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnset$MH() {
        return RuntimeHelper.requireNonNull(constants$83.strnset$MH,"strnset");
    }
    public static MemoryAddress strnset ( Addressable _String,  int _Value,  long _MaxCount) {
        var mh$ = strnset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrev$MH() {
        return RuntimeHelper.requireNonNull(constants$83.strrev$MH,"strrev");
    }
    public static MemoryAddress strrev ( Addressable _String) {
        var mh$ = strrev$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strset$MH() {
        return RuntimeHelper.requireNonNull(constants$83.strset$MH,"strset");
    }
    public static MemoryAddress strset ( Addressable _String,  int _Value) {
        var mh$ = strset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strupr$MH() {
        return RuntimeHelper.requireNonNull(constants$84.strupr$MH,"strupr");
    }
    public static MemoryAddress strupr ( Addressable _String) {
        var mh$ = strupr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PKSPIN_LOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PM128A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_FORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_CET_U_FORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_AREA_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_AREA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSTATE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE_AMD64 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _bittest$MH() {
        return RuntimeHelper.requireNonNull(constants$84._bittest$MH,"_bittest");
    }
    public static byte _bittest ( Addressable Base,  int Offset) {
        var mh$ = _bittest$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandcomplement$MH() {
        return RuntimeHelper.requireNonNull(constants$85._bittestandcomplement$MH,"_bittestandcomplement");
    }
    public static byte _bittestandcomplement ( Addressable Base,  int Offset) {
        var mh$ = _bittestandcomplement$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandset$MH() {
        return RuntimeHelper.requireNonNull(constants$85._bittestandset$MH,"_bittestandset");
    }
    public static byte _bittestandset ( Addressable Base,  int Offset) {
        var mh$ = _bittestandset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandreset$MH() {
        return RuntimeHelper.requireNonNull(constants$85._bittestandreset$MH,"_bittestandreset");
    }
    public static byte _bittestandreset ( Addressable Base,  int Offset) {
        var mh$ = _bittestandreset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandset$MH() {
        return RuntimeHelper.requireNonNull(constants$85._interlockedbittestandset$MH,"_interlockedbittestandset");
    }
    public static byte _interlockedbittestandset ( Addressable Base,  int Offset) {
        var mh$ = _interlockedbittestandset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandreset$MH() {
        return RuntimeHelper.requireNonNull(constants$85._interlockedbittestandreset$MH,"_interlockedbittestandreset");
    }
    public static byte _interlockedbittestandreset ( Addressable Base,  int Offset) {
        var mh$ = _interlockedbittestandreset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittest64$MH() {
        return RuntimeHelper.requireNonNull(constants$85._bittest64$MH,"_bittest64");
    }
    public static byte _bittest64 ( Addressable Base,  long Offset) {
        var mh$ = _bittest64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandcomplement64$MH() {
        return RuntimeHelper.requireNonNull(constants$86._bittestandcomplement64$MH,"_bittestandcomplement64");
    }
    public static byte _bittestandcomplement64 ( Addressable Base,  long Offset) {
        var mh$ = _bittestandcomplement64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandset64$MH() {
        return RuntimeHelper.requireNonNull(constants$86._bittestandset64$MH,"_bittestandset64");
    }
    public static byte _bittestandset64 ( Addressable Base,  long Offset) {
        var mh$ = _bittestandset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandreset64$MH() {
        return RuntimeHelper.requireNonNull(constants$86._bittestandreset64$MH,"_bittestandreset64");
    }
    public static byte _bittestandreset64 ( Addressable Base,  long Offset) {
        var mh$ = _bittestandreset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandset64$MH() {
        return RuntimeHelper.requireNonNull(constants$86._interlockedbittestandset64$MH,"_interlockedbittestandset64");
    }
    public static byte _interlockedbittestandset64 ( Addressable Base,  long Offset) {
        var mh$ = _interlockedbittestandset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandreset64$MH() {
        return RuntimeHelper.requireNonNull(constants$86._interlockedbittestandreset64$MH,"_interlockedbittestandreset64");
    }
    public static byte _interlockedbittestandreset64 ( Addressable Base,  long Offset) {
        var mh$ = _interlockedbittestandreset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanForward$MH() {
        return RuntimeHelper.requireNonNull(constants$86._BitScanForward$MH,"_BitScanForward");
    }
    public static byte _BitScanForward ( Addressable Index,  int Mask) {
        var mh$ = _BitScanForward$MH();
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanReverse$MH() {
        return RuntimeHelper.requireNonNull(constants$87._BitScanReverse$MH,"_BitScanReverse");
    }
    public static byte _BitScanReverse ( Addressable Index,  int Mask) {
        var mh$ = _BitScanReverse$MH();
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanForward64$MH() {
        return RuntimeHelper.requireNonNull(constants$87._BitScanForward64$MH,"_BitScanForward64");
    }
    public static byte _BitScanForward64 ( Addressable Index,  long Mask) {
        var mh$ = _BitScanForward64$MH();
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanReverse64$MH() {
        return RuntimeHelper.requireNonNull(constants$87._BitScanReverse64$MH,"_BitScanReverse64");
    }
    public static byte _BitScanReverse64 ( Addressable Index,  long Mask) {
        var mh$ = _BitScanReverse64$MH();
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedIncrement16$MH() {
        return RuntimeHelper.requireNonNull(constants$87._InterlockedIncrement16$MH,"_InterlockedIncrement16");
    }
    public static short _InterlockedIncrement16 ( Addressable Addend) {
        var mh$ = _InterlockedIncrement16$MH();
        try {
            return (short)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedDecrement16$MH() {
        return RuntimeHelper.requireNonNull(constants$87._InterlockedDecrement16$MH,"_InterlockedDecrement16");
    }
    public static short _InterlockedDecrement16 ( Addressable Addend) {
        var mh$ = _InterlockedDecrement16$MH();
        try {
            return (short)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange16$MH() {
        return RuntimeHelper.requireNonNull(constants$87._InterlockedCompareExchange16$MH,"_InterlockedCompareExchange16");
    }
    public static short _InterlockedCompareExchange16 ( Addressable Destination,  short ExChange,  short Comperand) {
        var mh$ = _InterlockedCompareExchange16$MH();
        try {
            return (short)mh$.invokeExact(Destination, ExChange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd$MH() {
        return RuntimeHelper.requireNonNull(constants$88._InterlockedAnd$MH,"_InterlockedAnd");
    }
    public static int _InterlockedAnd ( Addressable Destination,  int Value) {
        var mh$ = _InterlockedAnd$MH();
        try {
            return (int)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr$MH() {
        return RuntimeHelper.requireNonNull(constants$88._InterlockedOr$MH,"_InterlockedOr");
    }
    public static int _InterlockedOr ( Addressable Destination,  int Value) {
        var mh$ = _InterlockedOr$MH();
        try {
            return (int)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor$MH() {
        return RuntimeHelper.requireNonNull(constants$88._InterlockedXor$MH,"_InterlockedXor");
    }
    public static int _InterlockedXor ( Addressable Destination,  int Value) {
        var mh$ = _InterlockedXor$MH();
        try {
            return (int)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd64$MH() {
        return RuntimeHelper.requireNonNull(constants$88._InterlockedAnd64$MH,"_InterlockedAnd64");
    }
    public static long _InterlockedAnd64 ( Addressable Destination,  long Value) {
        var mh$ = _InterlockedAnd64$MH();
        try {
            return (long)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr64$MH() {
        return RuntimeHelper.requireNonNull(constants$88._InterlockedOr64$MH,"_InterlockedOr64");
    }
    public static long _InterlockedOr64 ( Addressable Destination,  long Value) {
        var mh$ = _InterlockedOr64$MH();
        try {
            return (long)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor64$MH() {
        return RuntimeHelper.requireNonNull(constants$88._InterlockedXor64$MH,"_InterlockedXor64");
    }
    public static long _InterlockedXor64 ( Addressable Destination,  long Value) {
        var mh$ = _InterlockedXor64$MH();
        try {
            return (long)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedIncrement$MH() {
        return RuntimeHelper.requireNonNull(constants$89._InterlockedIncrement$MH,"_InterlockedIncrement");
    }
    public static int _InterlockedIncrement ( Addressable Addend) {
        var mh$ = _InterlockedIncrement$MH();
        try {
            return (int)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedDecrement$MH() {
        return RuntimeHelper.requireNonNull(constants$89._InterlockedDecrement$MH,"_InterlockedDecrement");
    }
    public static int _InterlockedDecrement ( Addressable Addend) {
        var mh$ = _InterlockedDecrement$MH();
        try {
            return (int)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange$MH() {
        return RuntimeHelper.requireNonNull(constants$89._InterlockedExchange$MH,"_InterlockedExchange");
    }
    public static int _InterlockedExchange ( Addressable Target,  int Value) {
        var mh$ = _InterlockedExchange$MH();
        try {
            return (int)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangeAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$89._InterlockedExchangeAdd$MH,"_InterlockedExchangeAdd");
    }
    public static int _InterlockedExchangeAdd ( Addressable Addend,  int Value) {
        var mh$ = _InterlockedExchangeAdd$MH();
        try {
            return (int)mh$.invokeExact(Addend, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InlineInterlockedAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$89._InlineInterlockedAdd$MH,"_InlineInterlockedAdd");
    }
    public static int _InlineInterlockedAdd ( Addressable Addend,  int Value) {
        var mh$ = _InlineInterlockedAdd$MH();
        try {
            return (int)mh$.invokeExact(Addend, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange$MH() {
        return RuntimeHelper.requireNonNull(constants$89._InterlockedCompareExchange$MH,"_InterlockedCompareExchange");
    }
    public static int _InterlockedCompareExchange ( Addressable Destination,  int ExChange,  int Comperand) {
        var mh$ = _InterlockedCompareExchange$MH();
        try {
            return (int)mh$.invokeExact(Destination, ExChange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedIncrement64$MH() {
        return RuntimeHelper.requireNonNull(constants$90._InterlockedIncrement64$MH,"_InterlockedIncrement64");
    }
    public static long _InterlockedIncrement64 ( Addressable Addend) {
        var mh$ = _InterlockedIncrement64$MH();
        try {
            return (long)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedDecrement64$MH() {
        return RuntimeHelper.requireNonNull(constants$90._InterlockedDecrement64$MH,"_InterlockedDecrement64");
    }
    public static long _InterlockedDecrement64 ( Addressable Addend) {
        var mh$ = _InterlockedDecrement64$MH();
        try {
            return (long)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange64$MH() {
        return RuntimeHelper.requireNonNull(constants$90._InterlockedExchange64$MH,"_InterlockedExchange64");
    }
    public static long _InterlockedExchange64 ( Addressable Target,  long Value) {
        var mh$ = _InterlockedExchange64$MH();
        try {
            return (long)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangeAdd64$MH() {
        return RuntimeHelper.requireNonNull(constants$90._InterlockedExchangeAdd64$MH,"_InterlockedExchangeAdd64");
    }
    public static long _InterlockedExchangeAdd64 ( Addressable Addend,  long Value) {
        var mh$ = _InterlockedExchangeAdd64$MH();
        try {
            return (long)mh$.invokeExact(Addend, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InlineInterlockedAdd64$MH() {
        return RuntimeHelper.requireNonNull(constants$90._InlineInterlockedAdd64$MH,"_InlineInterlockedAdd64");
    }
    public static long _InlineInterlockedAdd64 ( Addressable Addend,  long Value) {
        var mh$ = _InlineInterlockedAdd64$MH();
        try {
            return (long)mh$.invokeExact(Addend, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange64$MH() {
        return RuntimeHelper.requireNonNull(constants$90._InterlockedCompareExchange64$MH,"_InterlockedCompareExchange64");
    }
    public static long _InterlockedCompareExchange64 ( Addressable Destination,  long ExChange,  long Comperand) {
        var mh$ = _InterlockedCompareExchange64$MH();
        try {
            return (long)mh$.invokeExact(Destination, ExChange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange128$MH() {
        return RuntimeHelper.requireNonNull(constants$91._InterlockedCompareExchange128$MH,"_InterlockedCompareExchange128");
    }
    public static byte _InterlockedCompareExchange128 ( Addressable Destination,  long ExchangeHigh,  long ExchangeLow,  Addressable ComparandResult) {
        var mh$ = _InterlockedCompareExchange128$MH();
        try {
            return (byte)mh$.invokeExact(Destination, ExchangeHigh, ExchangeLow, ComparandResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchangePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$91._InterlockedCompareExchangePointer$MH,"_InterlockedCompareExchangePointer");
    }
    public static MemoryAddress _InterlockedCompareExchangePointer ( Addressable Destination,  Addressable Exchange,  Addressable Comperand) {
        var mh$ = _InterlockedCompareExchangePointer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Destination, Exchange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$91._InterlockedExchangePointer$MH,"_InterlockedExchangePointer");
    }
    public static MemoryAddress _InterlockedExchangePointer ( Addressable Target,  Addressable Value) {
        var mh$ = _InterlockedExchangePointer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange8$MH() {
        return RuntimeHelper.requireNonNull(constants$91._InterlockedExchange8$MH,"_InterlockedExchange8");
    }
    public static byte _InterlockedExchange8 ( Addressable Target,  byte Value) {
        var mh$ = _InterlockedExchange8$MH();
        try {
            return (byte)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange16$MH() {
        return RuntimeHelper.requireNonNull(constants$91._InterlockedExchange16$MH,"_InterlockedExchange16");
    }
    public static short _InterlockedExchange16 ( Addressable Destination,  short ExChange) {
        var mh$ = _InterlockedExchange16$MH();
        try {
            return (short)mh$.invokeExact(Destination, ExChange);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangeAdd8$MH() {
        return RuntimeHelper.requireNonNull(constants$91._InterlockedExchangeAdd8$MH,"_InterlockedExchangeAdd8");
    }
    public static byte _InterlockedExchangeAdd8 ( Addressable _Addend,  byte _Value) {
        var mh$ = _InterlockedExchangeAdd8$MH();
        try {
            return (byte)mh$.invokeExact(_Addend, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd8$MH() {
        return RuntimeHelper.requireNonNull(constants$92._InterlockedAnd8$MH,"_InterlockedAnd8");
    }
    public static byte _InterlockedAnd8 ( Addressable Destination,  byte Value) {
        var mh$ = _InterlockedAnd8$MH();
        try {
            return (byte)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr8$MH() {
        return RuntimeHelper.requireNonNull(constants$92._InterlockedOr8$MH,"_InterlockedOr8");
    }
    public static byte _InterlockedOr8 ( Addressable Destination,  byte Value) {
        var mh$ = _InterlockedOr8$MH();
        try {
            return (byte)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor8$MH() {
        return RuntimeHelper.requireNonNull(constants$92._InterlockedXor8$MH,"_InterlockedXor8");
    }
    public static byte _InterlockedXor8 ( Addressable Destination,  byte Value) {
        var mh$ = _InterlockedXor8$MH();
        try {
            return (byte)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd16$MH() {
        return RuntimeHelper.requireNonNull(constants$92._InterlockedAnd16$MH,"_InterlockedAnd16");
    }
    public static short _InterlockedAnd16 ( Addressable Destination,  short Value) {
        var mh$ = _InterlockedAnd16$MH();
        try {
            return (short)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr16$MH() {
        return RuntimeHelper.requireNonNull(constants$92._InterlockedOr16$MH,"_InterlockedOr16");
    }
    public static short _InterlockedOr16 ( Addressable Destination,  short Value) {
        var mh$ = _InterlockedOr16$MH();
        try {
            return (short)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor16$MH() {
        return RuntimeHelper.requireNonNull(constants$92._InterlockedXor16$MH,"_InterlockedXor16");
    }
    public static short _InterlockedXor16 ( Addressable Destination,  short Value) {
        var mh$ = _InterlockedXor16$MH();
        try {
            return (short)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cpuidex$MH() {
        return RuntimeHelper.requireNonNull(constants$93.__cpuidex$MH,"__cpuidex");
    }
    public static void __cpuidex ( Addressable CPUInfo,  int Function,  int SubLeaf) {
        var mh$ = __cpuidex$MH();
        try {
            mh$.invokeExact(CPUInfo, Function, SubLeaf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_clflush$MH() {
        return RuntimeHelper.requireNonNull(constants$93._mm_clflush$MH,"_mm_clflush");
    }
    public static void _mm_clflush ( Addressable Address) {
        var mh$ = _mm_clflush$MH();
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ReadWriteBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$93._ReadWriteBarrier$MH,"_ReadWriteBarrier");
    }
    public static void _ReadWriteBarrier () {
        var mh$ = _ReadWriteBarrier$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __faststorefence$MH() {
        return RuntimeHelper.requireNonNull(constants$93.__faststorefence$MH,"__faststorefence");
    }
    public static void __faststorefence () {
        var mh$ = __faststorefence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_lfence$MH() {
        return RuntimeHelper.requireNonNull(constants$93._mm_lfence$MH,"_mm_lfence");
    }
    public static void _mm_lfence () {
        var mh$ = _mm_lfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_mfence$MH() {
        return RuntimeHelper.requireNonNull(constants$93._mm_mfence$MH,"_mm_mfence");
    }
    public static void _mm_mfence () {
        var mh$ = _mm_mfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_sfence$MH() {
        return RuntimeHelper.requireNonNull(constants$94._mm_sfence$MH,"_mm_sfence");
    }
    public static void _mm_sfence () {
        var mh$ = _mm_sfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$94._mm_pause$MH,"_mm_pause");
    }
    public static void _mm_pause () {
        var mh$ = _mm_pause$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_prefetch$MH() {
        return RuntimeHelper.requireNonNull(constants$94._mm_prefetch$MH,"_mm_prefetch");
    }
    public static void _mm_prefetch ( Addressable a,  int sel) {
        var mh$ = _mm_prefetch$MH();
        try {
            mh$.invokeExact(a, sel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _m_prefetchw$MH() {
        return RuntimeHelper.requireNonNull(constants$94._m_prefetchw$MH,"_m_prefetchw");
    }
    public static void _m_prefetchw ( Addressable Source) {
        var mh$ = _m_prefetchw$MH();
        try {
            mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_getcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$94._mm_getcsr$MH,"_mm_getcsr");
    }
    public static int _mm_getcsr () {
        var mh$ = _mm_getcsr$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_setcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$94._mm_setcsr$MH,"_mm_setcsr");
    }
    public static void _mm_setcsr ( int MxCsr) {
        var mh$ = _mm_setcsr$MH();
        try {
            mh$.invokeExact(MxCsr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getcallerseflags$MH() {
        return RuntimeHelper.requireNonNull(constants$95.__getcallerseflags$MH,"__getcallerseflags");
    }
    public static int __getcallerseflags () {
        var mh$ = __getcallerseflags$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __segmentlimit$MH() {
        return RuntimeHelper.requireNonNull(constants$95.__segmentlimit$MH,"__segmentlimit");
    }
    public static int __segmentlimit ( int Selector) {
        var mh$ = __segmentlimit$MH();
        try {
            return (int)mh$.invokeExact(Selector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readpmc$MH() {
        return RuntimeHelper.requireNonNull(constants$95.__readpmc$MH,"__readpmc");
    }
    public static long __readpmc ( int Counter) {
        var mh$ = __readpmc$MH();
        try {
            return (long)mh$.invokeExact(Counter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rdtsc$MH() {
        return RuntimeHelper.requireNonNull(constants$95.__rdtsc$MH,"__rdtsc");
    }
    public static long __rdtsc () {
        var mh$ = __rdtsc$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsb$MH() {
        return RuntimeHelper.requireNonNull(constants$95.__movsb$MH,"__movsb");
    }
    public static void __movsb ( Addressable Destination,  Addressable Source,  long Count) {
        var mh$ = __movsb$MH();
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsw$MH() {
        return RuntimeHelper.requireNonNull(constants$95.__movsw$MH,"__movsw");
    }
    public static void __movsw ( Addressable Destination,  Addressable Source,  long Count) {
        var mh$ = __movsw$MH();
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsd$MH() {
        return RuntimeHelper.requireNonNull(constants$96.__movsd$MH,"__movsd");
    }
    public static void __movsd ( Addressable Destination,  Addressable Source,  long Count) {
        var mh$ = __movsd$MH();
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsq$MH() {
        return RuntimeHelper.requireNonNull(constants$96.__movsq$MH,"__movsq");
    }
    public static void __movsq ( Addressable Destination,  Addressable Source,  long Count) {
        var mh$ = __movsq$MH();
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosb$MH() {
        return RuntimeHelper.requireNonNull(constants$96.__stosb$MH,"__stosb");
    }
    public static void __stosb ( Addressable Destination,  byte Value,  long Count) {
        var mh$ = __stosb$MH();
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosw$MH() {
        return RuntimeHelper.requireNonNull(constants$96.__stosw$MH,"__stosw");
    }
    public static void __stosw ( Addressable Destination,  short Value,  long Count) {
        var mh$ = __stosw$MH();
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosd$MH() {
        return RuntimeHelper.requireNonNull(constants$96.__stosd$MH,"__stosd");
    }
    public static void __stosd ( Addressable Destination,  int Value,  long Count) {
        var mh$ = __stosd$MH();
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosq$MH() {
        return RuntimeHelper.requireNonNull(constants$96.__stosq$MH,"__stosq");
    }
    public static void __stosq ( Addressable Destination,  long Value,  long Count) {
        var mh$ = __stosq$MH();
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mulh$MH() {
        return RuntimeHelper.requireNonNull(constants$97.__mulh$MH,"__mulh");
    }
    public static long __mulh ( long Multiplier,  long Multiplicand) {
        var mh$ = __mulh$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __umulh$MH() {
        return RuntimeHelper.requireNonNull(constants$97.__umulh$MH,"__umulh");
    }
    public static long __umulh ( long Multiplier,  long Multiplicand) {
        var mh$ = __umulh$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __popcnt64$MH() {
        return RuntimeHelper.requireNonNull(constants$97.__popcnt64$MH,"__popcnt64");
    }
    public static long __popcnt64 ( long operand) {
        var mh$ = __popcnt64$MH();
        try {
            return (long)mh$.invokeExact(operand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __shiftleft128$MH() {
        return RuntimeHelper.requireNonNull(constants$97.__shiftleft128$MH,"__shiftleft128");
    }
    public static long __shiftleft128 ( long LowPart,  long HighPart,  byte Shift) {
        var mh$ = __shiftleft128$MH();
        try {
            return (long)mh$.invokeExact(LowPart, HighPart, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __shiftright128$MH() {
        return RuntimeHelper.requireNonNull(constants$97.__shiftright128$MH,"__shiftright128");
    }
    public static long __shiftright128 ( long LowPart,  long HighPart,  byte Shift) {
        var mh$ = __shiftright128$MH();
        try {
            return (long)mh$.invokeExact(LowPart, HighPart, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mul128$MH() {
        return RuntimeHelper.requireNonNull(constants$97._mul128$MH,"_mul128");
    }
    public static long _mul128 ( long Multiplier,  long Multiplicand,  Addressable HighProduct) {
        var mh$ = _mul128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, HighProduct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _umul128$MH() {
        return RuntimeHelper.requireNonNull(constants$98._umul128$MH,"_umul128");
    }
    public static long _umul128 ( long Multiplier,  long Multiplicand,  Addressable HighProduct) {
        var mh$ = _umul128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, HighProduct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MultiplyExtract128$MH() {
        return RuntimeHelper.requireNonNull(constants$98.MultiplyExtract128$MH,"MultiplyExtract128");
    }
    public static long MultiplyExtract128 ( long Multiplier,  long Multiplicand,  byte Shift) {
        var mh$ = MultiplyExtract128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnsignedMultiplyExtract128$MH() {
        return RuntimeHelper.requireNonNull(constants$98.UnsignedMultiplyExtract128$MH,"UnsignedMultiplyExtract128");
    }
    public static long UnsignedMultiplyExtract128 ( long Multiplier,  long Multiplicand,  byte Shift) {
        var mh$ = UnsignedMultiplyExtract128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readgsbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$98.__readgsbyte$MH,"__readgsbyte");
    }
    public static byte __readgsbyte ( int Offset) {
        var mh$ = __readgsbyte$MH();
        try {
            return (byte)mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readgsword$MH() {
        return RuntimeHelper.requireNonNull(constants$98.__readgsword$MH,"__readgsword");
    }
    public static short __readgsword ( int Offset) {
        var mh$ = __readgsword$MH();
        try {
            return (short)mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


