// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _WSAQuerySet2A {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpszServiceInstanceName"),
        Constants$root.C_POINTER$LAYOUT.withName("lpVersion"),
        Constants$root.C_POINTER$LAYOUT.withName("lpszComment"),
        Constants$root.C_LONG$LAYOUT.withName("dwNameSpace"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpNSProviderId"),
        Constants$root.C_POINTER$LAYOUT.withName("lpszContext"),
        Constants$root.C_LONG$LAYOUT.withName("dwNumberOfProtocols"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpafpProtocols"),
        Constants$root.C_POINTER$LAYOUT.withName("lpszQueryString"),
        Constants$root.C_LONG$LAYOUT.withName("dwNumberOfCsAddrs"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpcsaBuffer"),
        Constants$root.C_LONG$LAYOUT.withName("dwOutputFlags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpBlob")
    ).withName("_WSAQuerySet2A");
    public static MemoryLayout $LAYOUT() {
        return _WSAQuerySet2A.$struct$LAYOUT;
    }
    static final VarHandle dwSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwSize"));
    public static VarHandle dwSize$VH() {
        return _WSAQuerySet2A.dwSize$VH;
    }
    public static int dwSize$get(MemorySegment seg) {
        return (int)_WSAQuerySet2A.dwSize$VH.get(seg);
    }
    public static void dwSize$set( MemorySegment seg, int x) {
        _WSAQuerySet2A.dwSize$VH.set(seg, x);
    }
    public static int dwSize$get(MemorySegment seg, long index) {
        return (int)_WSAQuerySet2A.dwSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSize$set(MemorySegment seg, long index, int x) {
        _WSAQuerySet2A.dwSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpszServiceInstanceName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpszServiceInstanceName"));
    public static VarHandle lpszServiceInstanceName$VH() {
        return _WSAQuerySet2A.lpszServiceInstanceName$VH;
    }
    public static MemoryAddress lpszServiceInstanceName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpszServiceInstanceName$VH.get(seg);
    }
    public static void lpszServiceInstanceName$set( MemorySegment seg, MemoryAddress x) {
        _WSAQuerySet2A.lpszServiceInstanceName$VH.set(seg, x);
    }
    public static MemoryAddress lpszServiceInstanceName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpszServiceInstanceName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszServiceInstanceName$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAQuerySet2A.lpszServiceInstanceName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpVersion"));
    public static VarHandle lpVersion$VH() {
        return _WSAQuerySet2A.lpVersion$VH;
    }
    public static MemoryAddress lpVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpVersion$VH.get(seg);
    }
    public static void lpVersion$set( MemorySegment seg, MemoryAddress x) {
        _WSAQuerySet2A.lpVersion$VH.set(seg, x);
    }
    public static MemoryAddress lpVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpVersion$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAQuerySet2A.lpVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpszComment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpszComment"));
    public static VarHandle lpszComment$VH() {
        return _WSAQuerySet2A.lpszComment$VH;
    }
    public static MemoryAddress lpszComment$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpszComment$VH.get(seg);
    }
    public static void lpszComment$set( MemorySegment seg, MemoryAddress x) {
        _WSAQuerySet2A.lpszComment$VH.set(seg, x);
    }
    public static MemoryAddress lpszComment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpszComment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszComment$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAQuerySet2A.lpszComment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwNameSpace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwNameSpace"));
    public static VarHandle dwNameSpace$VH() {
        return _WSAQuerySet2A.dwNameSpace$VH;
    }
    public static int dwNameSpace$get(MemorySegment seg) {
        return (int)_WSAQuerySet2A.dwNameSpace$VH.get(seg);
    }
    public static void dwNameSpace$set( MemorySegment seg, int x) {
        _WSAQuerySet2A.dwNameSpace$VH.set(seg, x);
    }
    public static int dwNameSpace$get(MemorySegment seg, long index) {
        return (int)_WSAQuerySet2A.dwNameSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwNameSpace$set(MemorySegment seg, long index, int x) {
        _WSAQuerySet2A.dwNameSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpNSProviderId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpNSProviderId"));
    public static VarHandle lpNSProviderId$VH() {
        return _WSAQuerySet2A.lpNSProviderId$VH;
    }
    public static MemoryAddress lpNSProviderId$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpNSProviderId$VH.get(seg);
    }
    public static void lpNSProviderId$set( MemorySegment seg, MemoryAddress x) {
        _WSAQuerySet2A.lpNSProviderId$VH.set(seg, x);
    }
    public static MemoryAddress lpNSProviderId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpNSProviderId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpNSProviderId$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAQuerySet2A.lpNSProviderId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpszContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpszContext"));
    public static VarHandle lpszContext$VH() {
        return _WSAQuerySet2A.lpszContext$VH;
    }
    public static MemoryAddress lpszContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpszContext$VH.get(seg);
    }
    public static void lpszContext$set( MemorySegment seg, MemoryAddress x) {
        _WSAQuerySet2A.lpszContext$VH.set(seg, x);
    }
    public static MemoryAddress lpszContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpszContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszContext$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAQuerySet2A.lpszContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwNumberOfProtocols$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwNumberOfProtocols"));
    public static VarHandle dwNumberOfProtocols$VH() {
        return _WSAQuerySet2A.dwNumberOfProtocols$VH;
    }
    public static int dwNumberOfProtocols$get(MemorySegment seg) {
        return (int)_WSAQuerySet2A.dwNumberOfProtocols$VH.get(seg);
    }
    public static void dwNumberOfProtocols$set( MemorySegment seg, int x) {
        _WSAQuerySet2A.dwNumberOfProtocols$VH.set(seg, x);
    }
    public static int dwNumberOfProtocols$get(MemorySegment seg, long index) {
        return (int)_WSAQuerySet2A.dwNumberOfProtocols$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwNumberOfProtocols$set(MemorySegment seg, long index, int x) {
        _WSAQuerySet2A.dwNumberOfProtocols$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpafpProtocols$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpafpProtocols"));
    public static VarHandle lpafpProtocols$VH() {
        return _WSAQuerySet2A.lpafpProtocols$VH;
    }
    public static MemoryAddress lpafpProtocols$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpafpProtocols$VH.get(seg);
    }
    public static void lpafpProtocols$set( MemorySegment seg, MemoryAddress x) {
        _WSAQuerySet2A.lpafpProtocols$VH.set(seg, x);
    }
    public static MemoryAddress lpafpProtocols$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpafpProtocols$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpafpProtocols$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAQuerySet2A.lpafpProtocols$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpszQueryString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpszQueryString"));
    public static VarHandle lpszQueryString$VH() {
        return _WSAQuerySet2A.lpszQueryString$VH;
    }
    public static MemoryAddress lpszQueryString$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpszQueryString$VH.get(seg);
    }
    public static void lpszQueryString$set( MemorySegment seg, MemoryAddress x) {
        _WSAQuerySet2A.lpszQueryString$VH.set(seg, x);
    }
    public static MemoryAddress lpszQueryString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpszQueryString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszQueryString$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAQuerySet2A.lpszQueryString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwNumberOfCsAddrs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwNumberOfCsAddrs"));
    public static VarHandle dwNumberOfCsAddrs$VH() {
        return _WSAQuerySet2A.dwNumberOfCsAddrs$VH;
    }
    public static int dwNumberOfCsAddrs$get(MemorySegment seg) {
        return (int)_WSAQuerySet2A.dwNumberOfCsAddrs$VH.get(seg);
    }
    public static void dwNumberOfCsAddrs$set( MemorySegment seg, int x) {
        _WSAQuerySet2A.dwNumberOfCsAddrs$VH.set(seg, x);
    }
    public static int dwNumberOfCsAddrs$get(MemorySegment seg, long index) {
        return (int)_WSAQuerySet2A.dwNumberOfCsAddrs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwNumberOfCsAddrs$set(MemorySegment seg, long index, int x) {
        _WSAQuerySet2A.dwNumberOfCsAddrs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpcsaBuffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpcsaBuffer"));
    public static VarHandle lpcsaBuffer$VH() {
        return _WSAQuerySet2A.lpcsaBuffer$VH;
    }
    public static MemoryAddress lpcsaBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpcsaBuffer$VH.get(seg);
    }
    public static void lpcsaBuffer$set( MemorySegment seg, MemoryAddress x) {
        _WSAQuerySet2A.lpcsaBuffer$VH.set(seg, x);
    }
    public static MemoryAddress lpcsaBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpcsaBuffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpcsaBuffer$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAQuerySet2A.lpcsaBuffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwOutputFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwOutputFlags"));
    public static VarHandle dwOutputFlags$VH() {
        return _WSAQuerySet2A.dwOutputFlags$VH;
    }
    public static int dwOutputFlags$get(MemorySegment seg) {
        return (int)_WSAQuerySet2A.dwOutputFlags$VH.get(seg);
    }
    public static void dwOutputFlags$set( MemorySegment seg, int x) {
        _WSAQuerySet2A.dwOutputFlags$VH.set(seg, x);
    }
    public static int dwOutputFlags$get(MemorySegment seg, long index) {
        return (int)_WSAQuerySet2A.dwOutputFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwOutputFlags$set(MemorySegment seg, long index, int x) {
        _WSAQuerySet2A.dwOutputFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpBlob$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpBlob"));
    public static VarHandle lpBlob$VH() {
        return _WSAQuerySet2A.lpBlob$VH;
    }
    public static MemoryAddress lpBlob$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpBlob$VH.get(seg);
    }
    public static void lpBlob$set( MemorySegment seg, MemoryAddress x) {
        _WSAQuerySet2A.lpBlob$VH.set(seg, x);
    }
    public static MemoryAddress lpBlob$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAQuerySet2A.lpBlob$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpBlob$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAQuerySet2A.lpBlob$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


