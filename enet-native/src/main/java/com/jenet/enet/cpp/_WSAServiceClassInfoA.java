// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _WSAServiceClassInfoA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("lpServiceClassId"),
        Constants$root.C_POINTER$LAYOUT.withName("lpszServiceClassName"),
        Constants$root.C_LONG$LAYOUT.withName("dwCount"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpClassInfos")
    ).withName("_WSAServiceClassInfoA");
    public static MemoryLayout $LAYOUT() {
        return _WSAServiceClassInfoA.$struct$LAYOUT;
    }
    static final VarHandle lpServiceClassId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpServiceClassId"));
    public static VarHandle lpServiceClassId$VH() {
        return _WSAServiceClassInfoA.lpServiceClassId$VH;
    }
    public static MemoryAddress lpServiceClassId$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAServiceClassInfoA.lpServiceClassId$VH.get(seg);
    }
    public static void lpServiceClassId$set( MemorySegment seg, MemoryAddress x) {
        _WSAServiceClassInfoA.lpServiceClassId$VH.set(seg, x);
    }
    public static MemoryAddress lpServiceClassId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAServiceClassInfoA.lpServiceClassId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpServiceClassId$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAServiceClassInfoA.lpServiceClassId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpszServiceClassName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpszServiceClassName"));
    public static VarHandle lpszServiceClassName$VH() {
        return _WSAServiceClassInfoA.lpszServiceClassName$VH;
    }
    public static MemoryAddress lpszServiceClassName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAServiceClassInfoA.lpszServiceClassName$VH.get(seg);
    }
    public static void lpszServiceClassName$set( MemorySegment seg, MemoryAddress x) {
        _WSAServiceClassInfoA.lpszServiceClassName$VH.set(seg, x);
    }
    public static MemoryAddress lpszServiceClassName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAServiceClassInfoA.lpszServiceClassName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszServiceClassName$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAServiceClassInfoA.lpszServiceClassName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwCount"));
    public static VarHandle dwCount$VH() {
        return _WSAServiceClassInfoA.dwCount$VH;
    }
    public static int dwCount$get(MemorySegment seg) {
        return (int)_WSAServiceClassInfoA.dwCount$VH.get(seg);
    }
    public static void dwCount$set( MemorySegment seg, int x) {
        _WSAServiceClassInfoA.dwCount$VH.set(seg, x);
    }
    public static int dwCount$get(MemorySegment seg, long index) {
        return (int)_WSAServiceClassInfoA.dwCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCount$set(MemorySegment seg, long index, int x) {
        _WSAServiceClassInfoA.dwCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpClassInfos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpClassInfos"));
    public static VarHandle lpClassInfos$VH() {
        return _WSAServiceClassInfoA.lpClassInfos$VH;
    }
    public static MemoryAddress lpClassInfos$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSAServiceClassInfoA.lpClassInfos$VH.get(seg);
    }
    public static void lpClassInfos$set( MemorySegment seg, MemoryAddress x) {
        _WSAServiceClassInfoA.lpClassInfos$VH.set(seg, x);
    }
    public static MemoryAddress lpClassInfos$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSAServiceClassInfoA.lpClassInfos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpClassInfos$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAServiceClassInfoA.lpClassInfos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


