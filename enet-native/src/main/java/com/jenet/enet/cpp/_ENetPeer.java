// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _ENetPeer {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("next"),
            Constants$root.C_POINTER$LAYOUT.withName("previous")
        ).withName("dispatchList"),
        Constants$root.C_POINTER$LAYOUT.withName("host"),
        Constants$root.C_SHORT$LAYOUT.withName("outgoingPeerID"),
        Constants$root.C_SHORT$LAYOUT.withName("incomingPeerID"),
        Constants$root.C_LONG$LAYOUT.withName("connectID"),
        Constants$root.C_CHAR$LAYOUT.withName("outgoingSessionID"),
        Constants$root.C_CHAR$LAYOUT.withName("incomingSessionID"),
        MemoryLayout.paddingLayout(16),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("host"),
            Constants$root.C_SHORT$LAYOUT.withName("port"),
            MemoryLayout.paddingLayout(16)
        ).withName("address"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        Constants$root.C_LONG$LAYOUT.withName("state"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("channels"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("channelCount"),
        Constants$root.C_LONG$LAYOUT.withName("incomingBandwidth"),
        Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidth"),
        Constants$root.C_LONG$LAYOUT.withName("incomingBandwidthThrottleEpoch"),
        Constants$root.C_LONG$LAYOUT.withName("outgoingBandwidthThrottleEpoch"),
        Constants$root.C_LONG$LAYOUT.withName("incomingDataTotal"),
        Constants$root.C_LONG$LAYOUT.withName("outgoingDataTotal"),
        Constants$root.C_LONG$LAYOUT.withName("lastSendTime"),
        Constants$root.C_LONG$LAYOUT.withName("lastReceiveTime"),
        Constants$root.C_LONG$LAYOUT.withName("nextTimeout"),
        Constants$root.C_LONG$LAYOUT.withName("earliestTimeout"),
        Constants$root.C_LONG$LAYOUT.withName("packetLossEpoch"),
        Constants$root.C_LONG$LAYOUT.withName("packetsSent"),
        Constants$root.C_LONG$LAYOUT.withName("packetsLost"),
        Constants$root.C_LONG$LAYOUT.withName("packetLoss"),
        Constants$root.C_LONG$LAYOUT.withName("packetLossVariance"),
        Constants$root.C_LONG$LAYOUT.withName("packetThrottle"),
        Constants$root.C_LONG$LAYOUT.withName("packetThrottleLimit"),
        Constants$root.C_LONG$LAYOUT.withName("packetThrottleCounter"),
        Constants$root.C_LONG$LAYOUT.withName("packetThrottleEpoch"),
        Constants$root.C_LONG$LAYOUT.withName("packetThrottleAcceleration"),
        Constants$root.C_LONG$LAYOUT.withName("packetThrottleDeceleration"),
        Constants$root.C_LONG$LAYOUT.withName("packetThrottleInterval"),
        Constants$root.C_LONG$LAYOUT.withName("pingInterval"),
        Constants$root.C_LONG$LAYOUT.withName("timeoutLimit"),
        Constants$root.C_LONG$LAYOUT.withName("timeoutMinimum"),
        Constants$root.C_LONG$LAYOUT.withName("timeoutMaximum"),
        Constants$root.C_LONG$LAYOUT.withName("lastRoundTripTime"),
        Constants$root.C_LONG$LAYOUT.withName("lowestRoundTripTime"),
        Constants$root.C_LONG$LAYOUT.withName("lastRoundTripTimeVariance"),
        Constants$root.C_LONG$LAYOUT.withName("highestRoundTripTimeVariance"),
        Constants$root.C_LONG$LAYOUT.withName("roundTripTime"),
        Constants$root.C_LONG$LAYOUT.withName("roundTripTimeVariance"),
        Constants$root.C_LONG$LAYOUT.withName("mtu"),
        Constants$root.C_LONG$LAYOUT.withName("windowSize"),
        Constants$root.C_LONG$LAYOUT.withName("reliableDataInTransit"),
        Constants$root.C_SHORT$LAYOUT.withName("outgoingReliableSequenceNumber"),
        MemoryLayout.paddingLayout(16),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("next"),
                Constants$root.C_POINTER$LAYOUT.withName("previous")
            ).withName("sentinel")
        ).withName("acknowledgements"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("next"),
                Constants$root.C_POINTER$LAYOUT.withName("previous")
            ).withName("sentinel")
        ).withName("sentReliableCommands"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("next"),
                Constants$root.C_POINTER$LAYOUT.withName("previous")
            ).withName("sentinel")
        ).withName("sentUnreliableCommands"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("next"),
                Constants$root.C_POINTER$LAYOUT.withName("previous")
            ).withName("sentinel")
        ).withName("outgoingReliableCommands"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("next"),
                Constants$root.C_POINTER$LAYOUT.withName("previous")
            ).withName("sentinel")
        ).withName("outgoingUnreliableCommands"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("next"),
                Constants$root.C_POINTER$LAYOUT.withName("previous")
            ).withName("sentinel")
        ).withName("dispatchedCommands"),
        Constants$root.C_LONG$LAYOUT.withName("needsDispatch"),
        Constants$root.C_SHORT$LAYOUT.withName("incomingUnsequencedGroup"),
        Constants$root.C_SHORT$LAYOUT.withName("outgoingUnsequencedGroup"),
        MemoryLayout.sequenceLayout(32, Constants$root.C_LONG$LAYOUT).withName("unsequencedWindow"),
        Constants$root.C_LONG$LAYOUT.withName("eventData"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("totalWaitingData")
    ).withName("_ENetPeer");
    public static MemoryLayout $LAYOUT() {
        return _ENetPeer.$struct$LAYOUT;
    }
    public static MemorySegment dispatchList$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final VarHandle host$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("host"));
    public static VarHandle host$VH() {
        return _ENetPeer.host$VH;
    }
    public static MemoryAddress host$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetPeer.host$VH.get(seg);
    }
    public static void host$set( MemorySegment seg, MemoryAddress x) {
        _ENetPeer.host$VH.set(seg, x);
    }
    public static MemoryAddress host$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetPeer.host$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void host$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetPeer.host$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle outgoingPeerID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("outgoingPeerID"));
    public static VarHandle outgoingPeerID$VH() {
        return _ENetPeer.outgoingPeerID$VH;
    }
    public static short outgoingPeerID$get(MemorySegment seg) {
        return (short)_ENetPeer.outgoingPeerID$VH.get(seg);
    }
    public static void outgoingPeerID$set( MemorySegment seg, short x) {
        _ENetPeer.outgoingPeerID$VH.set(seg, x);
    }
    public static short outgoingPeerID$get(MemorySegment seg, long index) {
        return (short)_ENetPeer.outgoingPeerID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outgoingPeerID$set(MemorySegment seg, long index, short x) {
        _ENetPeer.outgoingPeerID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle incomingPeerID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("incomingPeerID"));
    public static VarHandle incomingPeerID$VH() {
        return _ENetPeer.incomingPeerID$VH;
    }
    public static short incomingPeerID$get(MemorySegment seg) {
        return (short)_ENetPeer.incomingPeerID$VH.get(seg);
    }
    public static void incomingPeerID$set( MemorySegment seg, short x) {
        _ENetPeer.incomingPeerID$VH.set(seg, x);
    }
    public static short incomingPeerID$get(MemorySegment seg, long index) {
        return (short)_ENetPeer.incomingPeerID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void incomingPeerID$set(MemorySegment seg, long index, short x) {
        _ENetPeer.incomingPeerID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle connectID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("connectID"));
    public static VarHandle connectID$VH() {
        return _ENetPeer.connectID$VH;
    }
    public static int connectID$get(MemorySegment seg) {
        return (int)_ENetPeer.connectID$VH.get(seg);
    }
    public static void connectID$set( MemorySegment seg, int x) {
        _ENetPeer.connectID$VH.set(seg, x);
    }
    public static int connectID$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.connectID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void connectID$set(MemorySegment seg, long index, int x) {
        _ENetPeer.connectID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle outgoingSessionID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("outgoingSessionID"));
    public static VarHandle outgoingSessionID$VH() {
        return _ENetPeer.outgoingSessionID$VH;
    }
    public static byte outgoingSessionID$get(MemorySegment seg) {
        return (byte)_ENetPeer.outgoingSessionID$VH.get(seg);
    }
    public static void outgoingSessionID$set( MemorySegment seg, byte x) {
        _ENetPeer.outgoingSessionID$VH.set(seg, x);
    }
    public static byte outgoingSessionID$get(MemorySegment seg, long index) {
        return (byte)_ENetPeer.outgoingSessionID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outgoingSessionID$set(MemorySegment seg, long index, byte x) {
        _ENetPeer.outgoingSessionID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle incomingSessionID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("incomingSessionID"));
    public static VarHandle incomingSessionID$VH() {
        return _ENetPeer.incomingSessionID$VH;
    }
    public static byte incomingSessionID$get(MemorySegment seg) {
        return (byte)_ENetPeer.incomingSessionID$VH.get(seg);
    }
    public static void incomingSessionID$set( MemorySegment seg, byte x) {
        _ENetPeer.incomingSessionID$VH.set(seg, x);
    }
    public static byte incomingSessionID$get(MemorySegment seg, long index) {
        return (byte)_ENetPeer.incomingSessionID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void incomingSessionID$set(MemorySegment seg, long index, byte x) {
        _ENetPeer.incomingSessionID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment address$slice(MemorySegment seg) {
        return seg.asSlice(36, 8);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return _ENetPeer.data$VH;
    }
    public static MemoryAddress data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetPeer.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, MemoryAddress x) {
        _ENetPeer.data$VH.set(seg, x);
    }
    public static MemoryAddress data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetPeer.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetPeer.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle state$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("state"));
    public static VarHandle state$VH() {
        return _ENetPeer.state$VH;
    }
    public static int state$get(MemorySegment seg) {
        return (int)_ENetPeer.state$VH.get(seg);
    }
    public static void state$set( MemorySegment seg, int x) {
        _ENetPeer.state$VH.set(seg, x);
    }
    public static int state$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void state$set(MemorySegment seg, long index, int x) {
        _ENetPeer.state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle channels$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("channels"));
    public static VarHandle channels$VH() {
        return _ENetPeer.channels$VH;
    }
    public static MemoryAddress channels$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_ENetPeer.channels$VH.get(seg);
    }
    public static void channels$set( MemorySegment seg, MemoryAddress x) {
        _ENetPeer.channels$VH.set(seg, x);
    }
    public static MemoryAddress channels$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_ENetPeer.channels$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void channels$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENetPeer.channels$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle channelCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("channelCount"));
    public static VarHandle channelCount$VH() {
        return _ENetPeer.channelCount$VH;
    }
    public static long channelCount$get(MemorySegment seg) {
        return (long)_ENetPeer.channelCount$VH.get(seg);
    }
    public static void channelCount$set( MemorySegment seg, long x) {
        _ENetPeer.channelCount$VH.set(seg, x);
    }
    public static long channelCount$get(MemorySegment seg, long index) {
        return (long)_ENetPeer.channelCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void channelCount$set(MemorySegment seg, long index, long x) {
        _ENetPeer.channelCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle incomingBandwidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("incomingBandwidth"));
    public static VarHandle incomingBandwidth$VH() {
        return _ENetPeer.incomingBandwidth$VH;
    }
    public static int incomingBandwidth$get(MemorySegment seg) {
        return (int)_ENetPeer.incomingBandwidth$VH.get(seg);
    }
    public static void incomingBandwidth$set( MemorySegment seg, int x) {
        _ENetPeer.incomingBandwidth$VH.set(seg, x);
    }
    public static int incomingBandwidth$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.incomingBandwidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void incomingBandwidth$set(MemorySegment seg, long index, int x) {
        _ENetPeer.incomingBandwidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle outgoingBandwidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("outgoingBandwidth"));
    public static VarHandle outgoingBandwidth$VH() {
        return _ENetPeer.outgoingBandwidth$VH;
    }
    public static int outgoingBandwidth$get(MemorySegment seg) {
        return (int)_ENetPeer.outgoingBandwidth$VH.get(seg);
    }
    public static void outgoingBandwidth$set( MemorySegment seg, int x) {
        _ENetPeer.outgoingBandwidth$VH.set(seg, x);
    }
    public static int outgoingBandwidth$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.outgoingBandwidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outgoingBandwidth$set(MemorySegment seg, long index, int x) {
        _ENetPeer.outgoingBandwidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle incomingBandwidthThrottleEpoch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("incomingBandwidthThrottleEpoch"));
    public static VarHandle incomingBandwidthThrottleEpoch$VH() {
        return _ENetPeer.incomingBandwidthThrottleEpoch$VH;
    }
    public static int incomingBandwidthThrottleEpoch$get(MemorySegment seg) {
        return (int)_ENetPeer.incomingBandwidthThrottleEpoch$VH.get(seg);
    }
    public static void incomingBandwidthThrottleEpoch$set( MemorySegment seg, int x) {
        _ENetPeer.incomingBandwidthThrottleEpoch$VH.set(seg, x);
    }
    public static int incomingBandwidthThrottleEpoch$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.incomingBandwidthThrottleEpoch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void incomingBandwidthThrottleEpoch$set(MemorySegment seg, long index, int x) {
        _ENetPeer.incomingBandwidthThrottleEpoch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle outgoingBandwidthThrottleEpoch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("outgoingBandwidthThrottleEpoch"));
    public static VarHandle outgoingBandwidthThrottleEpoch$VH() {
        return _ENetPeer.outgoingBandwidthThrottleEpoch$VH;
    }
    public static int outgoingBandwidthThrottleEpoch$get(MemorySegment seg) {
        return (int)_ENetPeer.outgoingBandwidthThrottleEpoch$VH.get(seg);
    }
    public static void outgoingBandwidthThrottleEpoch$set( MemorySegment seg, int x) {
        _ENetPeer.outgoingBandwidthThrottleEpoch$VH.set(seg, x);
    }
    public static int outgoingBandwidthThrottleEpoch$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.outgoingBandwidthThrottleEpoch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outgoingBandwidthThrottleEpoch$set(MemorySegment seg, long index, int x) {
        _ENetPeer.outgoingBandwidthThrottleEpoch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle incomingDataTotal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("incomingDataTotal"));
    public static VarHandle incomingDataTotal$VH() {
        return _ENetPeer.incomingDataTotal$VH;
    }
    public static int incomingDataTotal$get(MemorySegment seg) {
        return (int)_ENetPeer.incomingDataTotal$VH.get(seg);
    }
    public static void incomingDataTotal$set( MemorySegment seg, int x) {
        _ENetPeer.incomingDataTotal$VH.set(seg, x);
    }
    public static int incomingDataTotal$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.incomingDataTotal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void incomingDataTotal$set(MemorySegment seg, long index, int x) {
        _ENetPeer.incomingDataTotal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle outgoingDataTotal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("outgoingDataTotal"));
    public static VarHandle outgoingDataTotal$VH() {
        return _ENetPeer.outgoingDataTotal$VH;
    }
    public static int outgoingDataTotal$get(MemorySegment seg) {
        return (int)_ENetPeer.outgoingDataTotal$VH.get(seg);
    }
    public static void outgoingDataTotal$set( MemorySegment seg, int x) {
        _ENetPeer.outgoingDataTotal$VH.set(seg, x);
    }
    public static int outgoingDataTotal$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.outgoingDataTotal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outgoingDataTotal$set(MemorySegment seg, long index, int x) {
        _ENetPeer.outgoingDataTotal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lastSendTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lastSendTime"));
    public static VarHandle lastSendTime$VH() {
        return _ENetPeer.lastSendTime$VH;
    }
    public static int lastSendTime$get(MemorySegment seg) {
        return (int)_ENetPeer.lastSendTime$VH.get(seg);
    }
    public static void lastSendTime$set( MemorySegment seg, int x) {
        _ENetPeer.lastSendTime$VH.set(seg, x);
    }
    public static int lastSendTime$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.lastSendTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lastSendTime$set(MemorySegment seg, long index, int x) {
        _ENetPeer.lastSendTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lastReceiveTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lastReceiveTime"));
    public static VarHandle lastReceiveTime$VH() {
        return _ENetPeer.lastReceiveTime$VH;
    }
    public static int lastReceiveTime$get(MemorySegment seg) {
        return (int)_ENetPeer.lastReceiveTime$VH.get(seg);
    }
    public static void lastReceiveTime$set( MemorySegment seg, int x) {
        _ENetPeer.lastReceiveTime$VH.set(seg, x);
    }
    public static int lastReceiveTime$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.lastReceiveTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lastReceiveTime$set(MemorySegment seg, long index, int x) {
        _ENetPeer.lastReceiveTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nextTimeout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nextTimeout"));
    public static VarHandle nextTimeout$VH() {
        return _ENetPeer.nextTimeout$VH;
    }
    public static int nextTimeout$get(MemorySegment seg) {
        return (int)_ENetPeer.nextTimeout$VH.get(seg);
    }
    public static void nextTimeout$set( MemorySegment seg, int x) {
        _ENetPeer.nextTimeout$VH.set(seg, x);
    }
    public static int nextTimeout$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.nextTimeout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nextTimeout$set(MemorySegment seg, long index, int x) {
        _ENetPeer.nextTimeout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle earliestTimeout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("earliestTimeout"));
    public static VarHandle earliestTimeout$VH() {
        return _ENetPeer.earliestTimeout$VH;
    }
    public static int earliestTimeout$get(MemorySegment seg) {
        return (int)_ENetPeer.earliestTimeout$VH.get(seg);
    }
    public static void earliestTimeout$set( MemorySegment seg, int x) {
        _ENetPeer.earliestTimeout$VH.set(seg, x);
    }
    public static int earliestTimeout$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.earliestTimeout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void earliestTimeout$set(MemorySegment seg, long index, int x) {
        _ENetPeer.earliestTimeout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetLossEpoch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetLossEpoch"));
    public static VarHandle packetLossEpoch$VH() {
        return _ENetPeer.packetLossEpoch$VH;
    }
    public static int packetLossEpoch$get(MemorySegment seg) {
        return (int)_ENetPeer.packetLossEpoch$VH.get(seg);
    }
    public static void packetLossEpoch$set( MemorySegment seg, int x) {
        _ENetPeer.packetLossEpoch$VH.set(seg, x);
    }
    public static int packetLossEpoch$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetLossEpoch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetLossEpoch$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetLossEpoch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetsSent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetsSent"));
    public static VarHandle packetsSent$VH() {
        return _ENetPeer.packetsSent$VH;
    }
    public static int packetsSent$get(MemorySegment seg) {
        return (int)_ENetPeer.packetsSent$VH.get(seg);
    }
    public static void packetsSent$set( MemorySegment seg, int x) {
        _ENetPeer.packetsSent$VH.set(seg, x);
    }
    public static int packetsSent$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetsSent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetsSent$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetsSent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetsLost$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetsLost"));
    public static VarHandle packetsLost$VH() {
        return _ENetPeer.packetsLost$VH;
    }
    public static int packetsLost$get(MemorySegment seg) {
        return (int)_ENetPeer.packetsLost$VH.get(seg);
    }
    public static void packetsLost$set( MemorySegment seg, int x) {
        _ENetPeer.packetsLost$VH.set(seg, x);
    }
    public static int packetsLost$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetsLost$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetsLost$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetsLost$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetLoss$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetLoss"));
    public static VarHandle packetLoss$VH() {
        return _ENetPeer.packetLoss$VH;
    }
    public static int packetLoss$get(MemorySegment seg) {
        return (int)_ENetPeer.packetLoss$VH.get(seg);
    }
    public static void packetLoss$set( MemorySegment seg, int x) {
        _ENetPeer.packetLoss$VH.set(seg, x);
    }
    public static int packetLoss$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetLoss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetLoss$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetLoss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetLossVariance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetLossVariance"));
    public static VarHandle packetLossVariance$VH() {
        return _ENetPeer.packetLossVariance$VH;
    }
    public static int packetLossVariance$get(MemorySegment seg) {
        return (int)_ENetPeer.packetLossVariance$VH.get(seg);
    }
    public static void packetLossVariance$set( MemorySegment seg, int x) {
        _ENetPeer.packetLossVariance$VH.set(seg, x);
    }
    public static int packetLossVariance$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetLossVariance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetLossVariance$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetLossVariance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetThrottle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetThrottle"));
    public static VarHandle packetThrottle$VH() {
        return _ENetPeer.packetThrottle$VH;
    }
    public static int packetThrottle$get(MemorySegment seg) {
        return (int)_ENetPeer.packetThrottle$VH.get(seg);
    }
    public static void packetThrottle$set( MemorySegment seg, int x) {
        _ENetPeer.packetThrottle$VH.set(seg, x);
    }
    public static int packetThrottle$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetThrottle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetThrottle$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetThrottle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetThrottleLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetThrottleLimit"));
    public static VarHandle packetThrottleLimit$VH() {
        return _ENetPeer.packetThrottleLimit$VH;
    }
    public static int packetThrottleLimit$get(MemorySegment seg) {
        return (int)_ENetPeer.packetThrottleLimit$VH.get(seg);
    }
    public static void packetThrottleLimit$set( MemorySegment seg, int x) {
        _ENetPeer.packetThrottleLimit$VH.set(seg, x);
    }
    public static int packetThrottleLimit$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetThrottleLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetThrottleLimit$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetThrottleLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetThrottleCounter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetThrottleCounter"));
    public static VarHandle packetThrottleCounter$VH() {
        return _ENetPeer.packetThrottleCounter$VH;
    }
    public static int packetThrottleCounter$get(MemorySegment seg) {
        return (int)_ENetPeer.packetThrottleCounter$VH.get(seg);
    }
    public static void packetThrottleCounter$set( MemorySegment seg, int x) {
        _ENetPeer.packetThrottleCounter$VH.set(seg, x);
    }
    public static int packetThrottleCounter$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetThrottleCounter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetThrottleCounter$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetThrottleCounter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetThrottleEpoch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetThrottleEpoch"));
    public static VarHandle packetThrottleEpoch$VH() {
        return _ENetPeer.packetThrottleEpoch$VH;
    }
    public static int packetThrottleEpoch$get(MemorySegment seg) {
        return (int)_ENetPeer.packetThrottleEpoch$VH.get(seg);
    }
    public static void packetThrottleEpoch$set( MemorySegment seg, int x) {
        _ENetPeer.packetThrottleEpoch$VH.set(seg, x);
    }
    public static int packetThrottleEpoch$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetThrottleEpoch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetThrottleEpoch$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetThrottleEpoch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetThrottleAcceleration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetThrottleAcceleration"));
    public static VarHandle packetThrottleAcceleration$VH() {
        return _ENetPeer.packetThrottleAcceleration$VH;
    }
    public static int packetThrottleAcceleration$get(MemorySegment seg) {
        return (int)_ENetPeer.packetThrottleAcceleration$VH.get(seg);
    }
    public static void packetThrottleAcceleration$set( MemorySegment seg, int x) {
        _ENetPeer.packetThrottleAcceleration$VH.set(seg, x);
    }
    public static int packetThrottleAcceleration$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetThrottleAcceleration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetThrottleAcceleration$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetThrottleAcceleration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetThrottleDeceleration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetThrottleDeceleration"));
    public static VarHandle packetThrottleDeceleration$VH() {
        return _ENetPeer.packetThrottleDeceleration$VH;
    }
    public static int packetThrottleDeceleration$get(MemorySegment seg) {
        return (int)_ENetPeer.packetThrottleDeceleration$VH.get(seg);
    }
    public static void packetThrottleDeceleration$set( MemorySegment seg, int x) {
        _ENetPeer.packetThrottleDeceleration$VH.set(seg, x);
    }
    public static int packetThrottleDeceleration$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetThrottleDeceleration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetThrottleDeceleration$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetThrottleDeceleration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle packetThrottleInterval$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("packetThrottleInterval"));
    public static VarHandle packetThrottleInterval$VH() {
        return _ENetPeer.packetThrottleInterval$VH;
    }
    public static int packetThrottleInterval$get(MemorySegment seg) {
        return (int)_ENetPeer.packetThrottleInterval$VH.get(seg);
    }
    public static void packetThrottleInterval$set( MemorySegment seg, int x) {
        _ENetPeer.packetThrottleInterval$VH.set(seg, x);
    }
    public static int packetThrottleInterval$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.packetThrottleInterval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void packetThrottleInterval$set(MemorySegment seg, long index, int x) {
        _ENetPeer.packetThrottleInterval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pingInterval$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pingInterval"));
    public static VarHandle pingInterval$VH() {
        return _ENetPeer.pingInterval$VH;
    }
    public static int pingInterval$get(MemorySegment seg) {
        return (int)_ENetPeer.pingInterval$VH.get(seg);
    }
    public static void pingInterval$set( MemorySegment seg, int x) {
        _ENetPeer.pingInterval$VH.set(seg, x);
    }
    public static int pingInterval$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.pingInterval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pingInterval$set(MemorySegment seg, long index, int x) {
        _ENetPeer.pingInterval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle timeoutLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("timeoutLimit"));
    public static VarHandle timeoutLimit$VH() {
        return _ENetPeer.timeoutLimit$VH;
    }
    public static int timeoutLimit$get(MemorySegment seg) {
        return (int)_ENetPeer.timeoutLimit$VH.get(seg);
    }
    public static void timeoutLimit$set( MemorySegment seg, int x) {
        _ENetPeer.timeoutLimit$VH.set(seg, x);
    }
    public static int timeoutLimit$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.timeoutLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void timeoutLimit$set(MemorySegment seg, long index, int x) {
        _ENetPeer.timeoutLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle timeoutMinimum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("timeoutMinimum"));
    public static VarHandle timeoutMinimum$VH() {
        return _ENetPeer.timeoutMinimum$VH;
    }
    public static int timeoutMinimum$get(MemorySegment seg) {
        return (int)_ENetPeer.timeoutMinimum$VH.get(seg);
    }
    public static void timeoutMinimum$set( MemorySegment seg, int x) {
        _ENetPeer.timeoutMinimum$VH.set(seg, x);
    }
    public static int timeoutMinimum$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.timeoutMinimum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void timeoutMinimum$set(MemorySegment seg, long index, int x) {
        _ENetPeer.timeoutMinimum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle timeoutMaximum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("timeoutMaximum"));
    public static VarHandle timeoutMaximum$VH() {
        return _ENetPeer.timeoutMaximum$VH;
    }
    public static int timeoutMaximum$get(MemorySegment seg) {
        return (int)_ENetPeer.timeoutMaximum$VH.get(seg);
    }
    public static void timeoutMaximum$set( MemorySegment seg, int x) {
        _ENetPeer.timeoutMaximum$VH.set(seg, x);
    }
    public static int timeoutMaximum$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.timeoutMaximum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void timeoutMaximum$set(MemorySegment seg, long index, int x) {
        _ENetPeer.timeoutMaximum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lastRoundTripTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lastRoundTripTime"));
    public static VarHandle lastRoundTripTime$VH() {
        return _ENetPeer.lastRoundTripTime$VH;
    }
    public static int lastRoundTripTime$get(MemorySegment seg) {
        return (int)_ENetPeer.lastRoundTripTime$VH.get(seg);
    }
    public static void lastRoundTripTime$set( MemorySegment seg, int x) {
        _ENetPeer.lastRoundTripTime$VH.set(seg, x);
    }
    public static int lastRoundTripTime$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.lastRoundTripTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lastRoundTripTime$set(MemorySegment seg, long index, int x) {
        _ENetPeer.lastRoundTripTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lowestRoundTripTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lowestRoundTripTime"));
    public static VarHandle lowestRoundTripTime$VH() {
        return _ENetPeer.lowestRoundTripTime$VH;
    }
    public static int lowestRoundTripTime$get(MemorySegment seg) {
        return (int)_ENetPeer.lowestRoundTripTime$VH.get(seg);
    }
    public static void lowestRoundTripTime$set( MemorySegment seg, int x) {
        _ENetPeer.lowestRoundTripTime$VH.set(seg, x);
    }
    public static int lowestRoundTripTime$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.lowestRoundTripTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lowestRoundTripTime$set(MemorySegment seg, long index, int x) {
        _ENetPeer.lowestRoundTripTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lastRoundTripTimeVariance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lastRoundTripTimeVariance"));
    public static VarHandle lastRoundTripTimeVariance$VH() {
        return _ENetPeer.lastRoundTripTimeVariance$VH;
    }
    public static int lastRoundTripTimeVariance$get(MemorySegment seg) {
        return (int)_ENetPeer.lastRoundTripTimeVariance$VH.get(seg);
    }
    public static void lastRoundTripTimeVariance$set( MemorySegment seg, int x) {
        _ENetPeer.lastRoundTripTimeVariance$VH.set(seg, x);
    }
    public static int lastRoundTripTimeVariance$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.lastRoundTripTimeVariance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lastRoundTripTimeVariance$set(MemorySegment seg, long index, int x) {
        _ENetPeer.lastRoundTripTimeVariance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle highestRoundTripTimeVariance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("highestRoundTripTimeVariance"));
    public static VarHandle highestRoundTripTimeVariance$VH() {
        return _ENetPeer.highestRoundTripTimeVariance$VH;
    }
    public static int highestRoundTripTimeVariance$get(MemorySegment seg) {
        return (int)_ENetPeer.highestRoundTripTimeVariance$VH.get(seg);
    }
    public static void highestRoundTripTimeVariance$set( MemorySegment seg, int x) {
        _ENetPeer.highestRoundTripTimeVariance$VH.set(seg, x);
    }
    public static int highestRoundTripTimeVariance$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.highestRoundTripTimeVariance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void highestRoundTripTimeVariance$set(MemorySegment seg, long index, int x) {
        _ENetPeer.highestRoundTripTimeVariance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle roundTripTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("roundTripTime"));
    public static VarHandle roundTripTime$VH() {
        return _ENetPeer.roundTripTime$VH;
    }
    public static int roundTripTime$get(MemorySegment seg) {
        return (int)_ENetPeer.roundTripTime$VH.get(seg);
    }
    public static void roundTripTime$set( MemorySegment seg, int x) {
        _ENetPeer.roundTripTime$VH.set(seg, x);
    }
    public static int roundTripTime$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.roundTripTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void roundTripTime$set(MemorySegment seg, long index, int x) {
        _ENetPeer.roundTripTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle roundTripTimeVariance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("roundTripTimeVariance"));
    public static VarHandle roundTripTimeVariance$VH() {
        return _ENetPeer.roundTripTimeVariance$VH;
    }
    public static int roundTripTimeVariance$get(MemorySegment seg) {
        return (int)_ENetPeer.roundTripTimeVariance$VH.get(seg);
    }
    public static void roundTripTimeVariance$set( MemorySegment seg, int x) {
        _ENetPeer.roundTripTimeVariance$VH.set(seg, x);
    }
    public static int roundTripTimeVariance$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.roundTripTimeVariance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void roundTripTimeVariance$set(MemorySegment seg, long index, int x) {
        _ENetPeer.roundTripTimeVariance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mtu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mtu"));
    public static VarHandle mtu$VH() {
        return _ENetPeer.mtu$VH;
    }
    public static int mtu$get(MemorySegment seg) {
        return (int)_ENetPeer.mtu$VH.get(seg);
    }
    public static void mtu$set( MemorySegment seg, int x) {
        _ENetPeer.mtu$VH.set(seg, x);
    }
    public static int mtu$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.mtu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mtu$set(MemorySegment seg, long index, int x) {
        _ENetPeer.mtu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle windowSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("windowSize"));
    public static VarHandle windowSize$VH() {
        return _ENetPeer.windowSize$VH;
    }
    public static int windowSize$get(MemorySegment seg) {
        return (int)_ENetPeer.windowSize$VH.get(seg);
    }
    public static void windowSize$set( MemorySegment seg, int x) {
        _ENetPeer.windowSize$VH.set(seg, x);
    }
    public static int windowSize$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.windowSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void windowSize$set(MemorySegment seg, long index, int x) {
        _ENetPeer.windowSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle reliableDataInTransit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reliableDataInTransit"));
    public static VarHandle reliableDataInTransit$VH() {
        return _ENetPeer.reliableDataInTransit$VH;
    }
    public static int reliableDataInTransit$get(MemorySegment seg) {
        return (int)_ENetPeer.reliableDataInTransit$VH.get(seg);
    }
    public static void reliableDataInTransit$set( MemorySegment seg, int x) {
        _ENetPeer.reliableDataInTransit$VH.set(seg, x);
    }
    public static int reliableDataInTransit$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.reliableDataInTransit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reliableDataInTransit$set(MemorySegment seg, long index, int x) {
        _ENetPeer.reliableDataInTransit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle outgoingReliableSequenceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("outgoingReliableSequenceNumber"));
    public static VarHandle outgoingReliableSequenceNumber$VH() {
        return _ENetPeer.outgoingReliableSequenceNumber$VH;
    }
    public static short outgoingReliableSequenceNumber$get(MemorySegment seg) {
        return (short)_ENetPeer.outgoingReliableSequenceNumber$VH.get(seg);
    }
    public static void outgoingReliableSequenceNumber$set( MemorySegment seg, short x) {
        _ENetPeer.outgoingReliableSequenceNumber$VH.set(seg, x);
    }
    public static short outgoingReliableSequenceNumber$get(MemorySegment seg, long index) {
        return (short)_ENetPeer.outgoingReliableSequenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outgoingReliableSequenceNumber$set(MemorySegment seg, long index, short x) {
        _ENetPeer.outgoingReliableSequenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment acknowledgements$slice(MemorySegment seg) {
        return seg.asSlice(224, 16);
    }
    public static MemorySegment sentReliableCommands$slice(MemorySegment seg) {
        return seg.asSlice(240, 16);
    }
    public static MemorySegment sentUnreliableCommands$slice(MemorySegment seg) {
        return seg.asSlice(256, 16);
    }
    public static MemorySegment outgoingReliableCommands$slice(MemorySegment seg) {
        return seg.asSlice(272, 16);
    }
    public static MemorySegment outgoingUnreliableCommands$slice(MemorySegment seg) {
        return seg.asSlice(288, 16);
    }
    public static MemorySegment dispatchedCommands$slice(MemorySegment seg) {
        return seg.asSlice(304, 16);
    }
    static final VarHandle needsDispatch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("needsDispatch"));
    public static VarHandle needsDispatch$VH() {
        return _ENetPeer.needsDispatch$VH;
    }
    public static int needsDispatch$get(MemorySegment seg) {
        return (int)_ENetPeer.needsDispatch$VH.get(seg);
    }
    public static void needsDispatch$set( MemorySegment seg, int x) {
        _ENetPeer.needsDispatch$VH.set(seg, x);
    }
    public static int needsDispatch$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.needsDispatch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void needsDispatch$set(MemorySegment seg, long index, int x) {
        _ENetPeer.needsDispatch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle incomingUnsequencedGroup$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("incomingUnsequencedGroup"));
    public static VarHandle incomingUnsequencedGroup$VH() {
        return _ENetPeer.incomingUnsequencedGroup$VH;
    }
    public static short incomingUnsequencedGroup$get(MemorySegment seg) {
        return (short)_ENetPeer.incomingUnsequencedGroup$VH.get(seg);
    }
    public static void incomingUnsequencedGroup$set( MemorySegment seg, short x) {
        _ENetPeer.incomingUnsequencedGroup$VH.set(seg, x);
    }
    public static short incomingUnsequencedGroup$get(MemorySegment seg, long index) {
        return (short)_ENetPeer.incomingUnsequencedGroup$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void incomingUnsequencedGroup$set(MemorySegment seg, long index, short x) {
        _ENetPeer.incomingUnsequencedGroup$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle outgoingUnsequencedGroup$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("outgoingUnsequencedGroup"));
    public static VarHandle outgoingUnsequencedGroup$VH() {
        return _ENetPeer.outgoingUnsequencedGroup$VH;
    }
    public static short outgoingUnsequencedGroup$get(MemorySegment seg) {
        return (short)_ENetPeer.outgoingUnsequencedGroup$VH.get(seg);
    }
    public static void outgoingUnsequencedGroup$set( MemorySegment seg, short x) {
        _ENetPeer.outgoingUnsequencedGroup$VH.set(seg, x);
    }
    public static short outgoingUnsequencedGroup$get(MemorySegment seg, long index) {
        return (short)_ENetPeer.outgoingUnsequencedGroup$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outgoingUnsequencedGroup$set(MemorySegment seg, long index, short x) {
        _ENetPeer.outgoingUnsequencedGroup$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment unsequencedWindow$slice(MemorySegment seg) {
        return seg.asSlice(328, 128);
    }
    static final VarHandle eventData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("eventData"));
    public static VarHandle eventData$VH() {
        return _ENetPeer.eventData$VH;
    }
    public static int eventData$get(MemorySegment seg) {
        return (int)_ENetPeer.eventData$VH.get(seg);
    }
    public static void eventData$set( MemorySegment seg, int x) {
        _ENetPeer.eventData$VH.set(seg, x);
    }
    public static int eventData$get(MemorySegment seg, long index) {
        return (int)_ENetPeer.eventData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eventData$set(MemorySegment seg, long index, int x) {
        _ENetPeer.eventData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle totalWaitingData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("totalWaitingData"));
    public static VarHandle totalWaitingData$VH() {
        return _ENetPeer.totalWaitingData$VH;
    }
    public static long totalWaitingData$get(MemorySegment seg) {
        return (long)_ENetPeer.totalWaitingData$VH.get(seg);
    }
    public static void totalWaitingData$set( MemorySegment seg, long x) {
        _ENetPeer.totalWaitingData$VH.set(seg, x);
    }
    public static long totalWaitingData$get(MemorySegment seg, long index) {
        return (long)_ENetPeer.totalWaitingData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void totalWaitingData$set(MemorySegment seg, long index, long x) {
        _ENetPeer.totalWaitingData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


