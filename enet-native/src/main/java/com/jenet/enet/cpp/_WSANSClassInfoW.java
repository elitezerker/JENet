// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _WSANSClassInfoW {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("lpszName"),
        Constants$root.C_LONG$LAYOUT.withName("dwNameSpace"),
        Constants$root.C_LONG$LAYOUT.withName("dwValueType"),
        Constants$root.C_LONG$LAYOUT.withName("dwValueSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpValue")
    ).withName("_WSANSClassInfoW");
    public static MemoryLayout $LAYOUT() {
        return _WSANSClassInfoW.$struct$LAYOUT;
    }
    static final VarHandle lpszName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpszName"));
    public static VarHandle lpszName$VH() {
        return _WSANSClassInfoW.lpszName$VH;
    }
    public static MemoryAddress lpszName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSANSClassInfoW.lpszName$VH.get(seg);
    }
    public static void lpszName$set( MemorySegment seg, MemoryAddress x) {
        _WSANSClassInfoW.lpszName$VH.set(seg, x);
    }
    public static MemoryAddress lpszName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSANSClassInfoW.lpszName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszName$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSANSClassInfoW.lpszName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwNameSpace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwNameSpace"));
    public static VarHandle dwNameSpace$VH() {
        return _WSANSClassInfoW.dwNameSpace$VH;
    }
    public static int dwNameSpace$get(MemorySegment seg) {
        return (int)_WSANSClassInfoW.dwNameSpace$VH.get(seg);
    }
    public static void dwNameSpace$set( MemorySegment seg, int x) {
        _WSANSClassInfoW.dwNameSpace$VH.set(seg, x);
    }
    public static int dwNameSpace$get(MemorySegment seg, long index) {
        return (int)_WSANSClassInfoW.dwNameSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwNameSpace$set(MemorySegment seg, long index, int x) {
        _WSANSClassInfoW.dwNameSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwValueType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwValueType"));
    public static VarHandle dwValueType$VH() {
        return _WSANSClassInfoW.dwValueType$VH;
    }
    public static int dwValueType$get(MemorySegment seg) {
        return (int)_WSANSClassInfoW.dwValueType$VH.get(seg);
    }
    public static void dwValueType$set( MemorySegment seg, int x) {
        _WSANSClassInfoW.dwValueType$VH.set(seg, x);
    }
    public static int dwValueType$get(MemorySegment seg, long index) {
        return (int)_WSANSClassInfoW.dwValueType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwValueType$set(MemorySegment seg, long index, int x) {
        _WSANSClassInfoW.dwValueType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwValueSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwValueSize"));
    public static VarHandle dwValueSize$VH() {
        return _WSANSClassInfoW.dwValueSize$VH;
    }
    public static int dwValueSize$get(MemorySegment seg) {
        return (int)_WSANSClassInfoW.dwValueSize$VH.get(seg);
    }
    public static void dwValueSize$set( MemorySegment seg, int x) {
        _WSANSClassInfoW.dwValueSize$VH.set(seg, x);
    }
    public static int dwValueSize$get(MemorySegment seg, long index) {
        return (int)_WSANSClassInfoW.dwValueSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwValueSize$set(MemorySegment seg, long index, int x) {
        _WSANSClassInfoW.dwValueSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpValue"));
    public static VarHandle lpValue$VH() {
        return _WSANSClassInfoW.lpValue$VH;
    }
    public static MemoryAddress lpValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_WSANSClassInfoW.lpValue$VH.get(seg);
    }
    public static void lpValue$set( MemorySegment seg, MemoryAddress x) {
        _WSANSClassInfoW.lpValue$VH.set(seg, x);
    }
    public static MemoryAddress lpValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_WSANSClassInfoW.lpValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpValue$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSANSClassInfoW.lpValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


