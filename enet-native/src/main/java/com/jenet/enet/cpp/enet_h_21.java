// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class enet_h_21 extends enet_h_20 {

    public static int StorageCryptoKeySize192Bits() {
        return (int)2L;
    }
    public static int StorageCryptoKeySize256Bits() {
        return (int)3L;
    }
    public static int StorageCryptoKeySize512Bits() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_CRYPTO_KEY_SIZE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_CRYPTO_CAPABILITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_CRYPTO_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageTierMediaTypeUnspecified() {
        return (int)0L;
    }
    public static int StorageTierMediaTypeDisk() {
        return (int)1L;
    }
    public static int StorageTierMediaTypeSsd() {
        return (int)2L;
    }
    public static int StorageTierMediaTypeScm() {
        return (int)4L;
    }
    public static int StorageTierMediaTypeMax() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_TIER_MEDIA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int StorageTierClassUnspecified() {
        return (int)0L;
    }
    public static int StorageTierClassCapacity() {
        return (int)1L;
    }
    public static int StorageTierClassPerformance() {
        return (int)2L;
    }
    public static int StorageTierClassMax() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_TIER_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_TIERING_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int ProtocolTypeUnknown() {
        return (int)0L;
    }
    public static int ProtocolTypeScsi() {
        return (int)1L;
    }
    public static int ProtocolTypeAta() {
        return (int)2L;
    }
    public static int ProtocolTypeNvme() {
        return (int)3L;
    }
    public static int ProtocolTypeSd() {
        return (int)4L;
    }
    public static int ProtocolTypeUfs() {
        return (int)5L;
    }
    public static int ProtocolTypeProprietary() {
        return (int)126L;
    }
    public static int ProtocolTypeMaxReserved() {
        return (int)127L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int NVMeDataTypeUnknown() {
        return (int)0L;
    }
    public static int NVMeDataTypeIdentify() {
        return (int)1L;
    }
    public static int NVMeDataTypeLogPage() {
        return (int)2L;
    }
    public static int NVMeDataTypeFeature() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_NVME_DATA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int AtaDataTypeUnknown() {
        return (int)0L;
    }
    public static int AtaDataTypeIdentify() {
        return (int)1L;
    }
    public static int AtaDataTypeLogPage() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_ATA_DATA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int UfsDataTypeUnknown() {
        return (int)0L;
    }
    public static int UfsDataTypeQueryDescriptor() {
        return (int)1L;
    }
    public static int UfsDataTypeMax() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_UFS_DATA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_SPECIFIC_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_DATA_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TEMPERATURE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TEMPERATURE_THRESHOLD = Constants$root.C_POINTER$LAYOUT;
    public static int FormFactorUnknown() {
        return (int)0L;
    }
    public static int FormFactor3_5() {
        return (int)1L;
    }
    public static int FormFactor2_5() {
        return (int)2L;
    }
    public static int FormFactor1_8() {
        return (int)3L;
    }
    public static int FormFactor1_8Less() {
        return (int)4L;
    }
    public static int FormFactorEmbedded() {
        return (int)5L;
    }
    public static int FormFactorMemoryCard() {
        return (int)6L;
    }
    public static int FormFactormSata() {
        return (int)7L;
    }
    public static int FormFactorM_2() {
        return (int)8L;
    }
    public static int FormFactorPCIeBoard() {
        return (int)9L;
    }
    public static int FormFactorDimm() {
        return (int)10L;
    }
    public static OfAddress PSTORAGE_DEVICE_FORM_FACTOR = Constants$root.C_POINTER$LAYOUT;
    public static int HealthStatusUnknown() {
        return (int)0L;
    }
    public static int HealthStatusNormal() {
        return (int)1L;
    }
    public static int HealthStatusThrottled() {
        return (int)2L;
    }
    public static int HealthStatusWarning() {
        return (int)3L;
    }
    public static int HealthStatusDisabled() {
        return (int)4L;
    }
    public static int HealthStatusFailed() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_COMPONENT_HEALTH_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_SPEC_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_DEVICE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_ADAPTER_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_NODE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int DiskHealthUnknown() {
        return (int)0L;
    }
    public static int DiskHealthUnhealthy() {
        return (int)1L;
    }
    public static int DiskHealthWarning() {
        return (int)2L;
    }
    public static int DiskHealthHealthy() {
        return (int)3L;
    }
    public static int DiskHealthMax() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_DISK_HEALTH_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int DiskOpStatusNone() {
        return (int)0L;
    }
    public static int DiskOpStatusUnknown() {
        return (int)1L;
    }
    public static int DiskOpStatusOk() {
        return (int)2L;
    }
    public static int DiskOpStatusPredictingFailure() {
        return (int)3L;
    }
    public static int DiskOpStatusInService() {
        return (int)4L;
    }
    public static int DiskOpStatusHardwareError() {
        return (int)5L;
    }
    public static int DiskOpStatusNotUsable() {
        return (int)6L;
    }
    public static int DiskOpStatusTransientError() {
        return (int)7L;
    }
    public static int DiskOpStatusMissing() {
        return (int)8L;
    }
    public static OfAddress PSTORAGE_DISK_OPERATIONAL_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int DiskOpReasonUnknown() {
        return (int)0L;
    }
    public static int DiskOpReasonScsiSenseCode() {
        return (int)1L;
    }
    public static int DiskOpReasonMedia() {
        return (int)2L;
    }
    public static int DiskOpReasonIo() {
        return (int)3L;
    }
    public static int DiskOpReasonThresholdExceeded() {
        return (int)4L;
    }
    public static int DiskOpReasonLostData() {
        return (int)5L;
    }
    public static int DiskOpReasonEnergySource() {
        return (int)6L;
    }
    public static int DiskOpReasonConfiguration() {
        return (int)7L;
    }
    public static int DiskOpReasonDeviceController() {
        return (int)8L;
    }
    public static int DiskOpReasonMediaController() {
        return (int)9L;
    }
    public static int DiskOpReasonComponent() {
        return (int)10L;
    }
    public static int DiskOpReasonNVDIMM_N() {
        return (int)11L;
    }
    public static int DiskOpReasonBackgroundOperation() {
        return (int)12L;
    }
    public static int DiskOpReasonInvalidFirmware() {
        return (int)13L;
    }
    public static int DiskOpReasonHealthCheck() {
        return (int)14L;
    }
    public static int DiskOpReasonLostDataPersistence() {
        return (int)15L;
    }
    public static int DiskOpReasonDisabledByPlatform() {
        return (int)16L;
    }
    public static int DiskOpReasonLostWritePersistence() {
        return (int)17L;
    }
    public static int DiskOpReasonDataPersistenceLossImminent() {
        return (int)18L;
    }
    public static int DiskOpReasonWritePersistenceLossImminent() {
        return (int)19L;
    }
    public static int DiskOpReasonMax() {
        return (int)20L;
    }
    public static OfAddress PSTORAGE_OPERATIONAL_STATUS_REASON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OPERATIONAL_REASON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_MANAGEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ADAPTER_SERIAL_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static int ZonedDeviceTypeUnknown() {
        return (int)0L;
    }
    public static int ZonedDeviceTypeHostManaged() {
        return (int)1L;
    }
    public static int ZonedDeviceTypeHostAware() {
        return (int)2L;
    }
    public static int ZonedDeviceTypeDeviceManaged() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_ZONED_DEVICE_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static int ZoneTypeUnknown() {
        return (int)0L;
    }
    public static int ZoneTypeConventional() {
        return (int)1L;
    }
    public static int ZoneTypeSequentialWriteRequired() {
        return (int)2L;
    }
    public static int ZoneTypeSequentialWritePreferred() {
        return (int)3L;
    }
    public static int ZoneTypeMax() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_ZONE_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ZONE_GROUP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ZONED_DEVICE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_LOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_LOCATION_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMA_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_ENDURANCE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_MANAGE_DATA_SET_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_DEFINITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_NOTIFICATION_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OFFLOAD_TOKEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_OFFLOAD_READ_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OFFLOAD_READ_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OFFLOAD_WRITE_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_LBP_STATE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_ALLOCATION_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_LB_PROVISIONING_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_ALLOCATION_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_ALLOCATION_OUTPUT2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_REPAIR_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPAIR_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_REPAIR_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPAIR_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_SCRUB_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_SCRUB_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_SCRUB_EX_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_SCRUB_OUTPUT2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TIERING_QUERY_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TIERING_QUERY_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TIER_REGION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TIERING_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_STORAGE_ADDRESS_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPORT_ZONES_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static int ZonesAttributeTypeAndLengthMayDifferent() {
        return (int)0L;
    }
    public static int ZonesAttributeTypeSameLengthSame() {
        return (int)1L;
    }
    public static int ZonesAttributeTypeSameLastZoneLengthDifferent() {
        return (int)2L;
    }
    public static int ZonesAttributeTypeMayDifferentLengthSame() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_ZONES_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static int ZoneConditionConventional() {
        return (int)0L;
    }
    public static int ZoneConditionEmpty() {
        return (int)1L;
    }
    public static int ZoneConditionImplicitlyOpened() {
        return (int)2L;
    }
    public static int ZoneConditionExplicitlyOpened() {
        return (int)3L;
    }
    public static int ZoneConditionClosed() {
        return (int)4L;
    }
    public static int ZoneConditionReadOnly() {
        return (int)13L;
    }
    public static int ZoneConditionFull() {
        return (int)14L;
    }
    public static int ZoneConditionOffline() {
        return (int)15L;
    }
    public static OfAddress PSTORAGE_ZONE_CONDITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ZONE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPORT_ZONES_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPORT_ZONES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_STORAGE_RANGE_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_RANGE_ERROR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_RANGE_ERROR_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_LOST_QUERY_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_LOST_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_FREE_SPACE_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_CONVERSION_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DeviceDsmParameterBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$902.DeviceDsmParameterBlock$MH,"DeviceDsmParameterBlock");
    }
    public static MemoryAddress DeviceDsmParameterBlock ( Addressable Input) {
        var mh$ = DeviceDsmParameterBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmDataSetRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$902.DeviceDsmDataSetRanges$MH,"DeviceDsmDataSetRanges");
    }
    public static MemoryAddress DeviceDsmDataSetRanges ( Addressable Input) {
        var mh$ = DeviceDsmDataSetRanges$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmNumberOfDataSetRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$902.DeviceDsmNumberOfDataSetRanges$MH,"DeviceDsmNumberOfDataSetRanges");
    }
    public static int DeviceDsmNumberOfDataSetRanges ( Addressable Input) {
        var mh$ = DeviceDsmNumberOfDataSetRanges$MH();
        try {
            return (int)mh$.invokeExact(Input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetInputLength$MH() {
        return RuntimeHelper.requireNonNull(constants$903.DeviceDsmGetInputLength$MH,"DeviceDsmGetInputLength");
    }
    public static int DeviceDsmGetInputLength ( Addressable Definition,  int ParameterBlockLength,  int NumberOfDataSetRanges) {
        var mh$ = DeviceDsmGetInputLength$MH();
        try {
            return (int)mh$.invokeExact(Definition, ParameterBlockLength, NumberOfDataSetRanges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetNumberOfDataSetRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$903.DeviceDsmGetNumberOfDataSetRanges$MH,"DeviceDsmGetNumberOfDataSetRanges");
    }
    public static int DeviceDsmGetNumberOfDataSetRanges ( Addressable Definition,  int InputLength,  int ParameterBlockLength) {
        var mh$ = DeviceDsmGetNumberOfDataSetRanges$MH();
        try {
            return (int)mh$.invokeExact(Definition, InputLength, ParameterBlockLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmInitializeInput$MH() {
        return RuntimeHelper.requireNonNull(constants$903.DeviceDsmInitializeInput$MH,"DeviceDsmInitializeInput");
    }
    public static void DeviceDsmInitializeInput ( Addressable Definition,  Addressable Input,  int InputLength,  int Flags,  Addressable Parameters,  int ParameterBlockLength) {
        var mh$ = DeviceDsmInitializeInput$MH();
        try {
            mh$.invokeExact(Definition, Input, InputLength, Flags, Parameters, ParameterBlockLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmAddDataSetRange$MH() {
        return RuntimeHelper.requireNonNull(constants$903.DeviceDsmAddDataSetRange$MH,"DeviceDsmAddDataSetRange");
    }
    public static byte DeviceDsmAddDataSetRange ( Addressable Input,  int InputLength,  long Offset,  long Length) {
        var mh$ = DeviceDsmAddDataSetRange$MH();
        try {
            return (byte)mh$.invokeExact(Input, InputLength, Offset, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmValidateInput$MH() {
        return RuntimeHelper.requireNonNull(constants$903.DeviceDsmValidateInput$MH,"DeviceDsmValidateInput");
    }
    public static byte DeviceDsmValidateInput ( Addressable Definition,  Addressable Input,  int InputLength) {
        var mh$ = DeviceDsmValidateInput$MH();
        try {
            return (byte)mh$.invokeExact(Definition, Input, InputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmOutputBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$903.DeviceDsmOutputBlock$MH,"DeviceDsmOutputBlock");
    }
    public static MemoryAddress DeviceDsmOutputBlock ( Addressable Output) {
        var mh$ = DeviceDsmOutputBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Output);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetOutputLength$MH() {
        return RuntimeHelper.requireNonNull(constants$904.DeviceDsmGetOutputLength$MH,"DeviceDsmGetOutputLength");
    }
    public static int DeviceDsmGetOutputLength ( Addressable Definition,  int OutputBlockLength) {
        var mh$ = DeviceDsmGetOutputLength$MH();
        try {
            return (int)mh$.invokeExact(Definition, OutputBlockLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmValidateOutputLength$MH() {
        return RuntimeHelper.requireNonNull(constants$904.DeviceDsmValidateOutputLength$MH,"DeviceDsmValidateOutputLength");
    }
    public static byte DeviceDsmValidateOutputLength ( Addressable Definition,  int OutputLength) {
        var mh$ = DeviceDsmValidateOutputLength$MH();
        try {
            return (byte)mh$.invokeExact(Definition, OutputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetOutputBlockLength$MH() {
        return RuntimeHelper.requireNonNull(constants$904.DeviceDsmGetOutputBlockLength$MH,"DeviceDsmGetOutputBlockLength");
    }
    public static int DeviceDsmGetOutputBlockLength ( Addressable Definition,  int OutputLength) {
        var mh$ = DeviceDsmGetOutputBlockLength$MH();
        try {
            return (int)mh$.invokeExact(Definition, OutputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmInitializeOutput$MH() {
        return RuntimeHelper.requireNonNull(constants$904.DeviceDsmInitializeOutput$MH,"DeviceDsmInitializeOutput");
    }
    public static void DeviceDsmInitializeOutput ( Addressable Definition,  Addressable Output,  int OutputLength,  int Flags) {
        var mh$ = DeviceDsmInitializeOutput$MH();
        try {
            mh$.invokeExact(Definition, Output, OutputLength, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmValidateOutput$MH() {
        return RuntimeHelper.requireNonNull(constants$904.DeviceDsmValidateOutput$MH,"DeviceDsmValidateOutput");
    }
    public static byte DeviceDsmValidateOutput ( Addressable Definition,  Addressable Output,  int OutputLength) {
        var mh$ = DeviceDsmValidateOutput$MH();
        try {
            return (byte)mh$.invokeExact(Definition, Output, OutputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSTORAGE_GET_BC_PROPERTIES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ALLOCATE_BC_STREAM_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PRIORITY_HINT_SUPPORT = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDiagnosticLevelDefault() {
        return (int)0L;
    }
    public static int StorageDiagnosticLevelMax() {
        return (int)1L;
    }
    public static OfAddress PSTORAGE_DIAGNOSTIC_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDiagnosticTargetTypeUndefined() {
        return (int)0L;
    }
    public static int StorageDiagnosticTargetTypePort() {
        return (int)1L;
    }
    public static int StorageDiagnosticTargetTypeMiniport() {
        return (int)2L;
    }
    public static int StorageDiagnosticTargetTypeHbaFirmware() {
        return (int)3L;
    }
    public static int StorageDiagnosticTargetTypeMax() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_DIAGNOSTIC_TARGET_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DIAGNOSTIC_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DIAGNOSTIC_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPHYSICAL_ELEMENT_STATUS_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPHYSICAL_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static int DeviceInternalStatusDataRequestTypeUndefined() {
        return (int)0L;
    }
    public static int DeviceCurrentInternalStatusDataHeader() {
        return (int)1L;
    }
    public static int DeviceCurrentInternalStatusData() {
        return (int)2L;
    }
    public static OfAddress PDEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int DeviceStatusDataSetUndefined() {
        return (int)0L;
    }
    public static int DeviceStatusDataSet1() {
        return (int)1L;
    }
    public static int DeviceStatusDataSet2() {
        return (int)2L;
    }
    public static int DeviceStatusDataSet3() {
        return (int)3L;
    }
    public static int DeviceStatusDataSet4() {
        return (int)4L;
    }
    public static int DeviceStatusDataSetMax() {
        return (int)5L;
    }
    public static OfAddress PDEVICE_INTERNAL_STATUS_DATA_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_INTERNAL_STATUS_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_MEDIA_SERIAL_NUMBER_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_READ_CAPACITY = Constants$root.C_POINTER$LAYOUT;
    public static int WriteCacheTypeUnknown() {
        return (int)0L;
    }
    public static int WriteCacheTypeNone() {
        return (int)1L;
    }
    public static int WriteCacheTypeWriteBack() {
        return (int)2L;
    }
    public static int WriteCacheTypeWriteThrough() {
        return (int)3L;
    }
    public static int WriteCacheEnableUnknown() {
        return (int)0L;
    }
    public static int WriteCacheDisabled() {
        return (int)1L;
    }
    public static int WriteCacheEnabled() {
        return (int)2L;
    }
    public static int WriteCacheChangeUnknown() {
        return (int)0L;
    }
    public static int WriteCacheNotChangeable() {
        return (int)1L;
    }
    public static int WriteCacheChangeable() {
        return (int)2L;
    }
    public static int WriteThroughUnknown() {
        return (int)0L;
    }
    public static int WriteThroughNotSupported() {
        return (int)1L;
    }
    public static int WriteThroughSupported() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_WRITE_CACHE_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERSISTENT_RESERVE_COMMAND = Constants$root.C_POINTER$LAYOUT;
    public static int TCCollectionBugCheck() {
        return (int)1L;
    }
    public static int TCCollectionApplicationRequested() {
        return (int)2L;
    }
    public static int TCCollectionDeviceRequested() {
        return (int)3L;
    }
    public static OfAddress PDEVICEDUMP_COLLECTION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_SUBSECTION_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STRUCTURE_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_SECTION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGP_LOG_PAGE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_PUBLIC_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_RESTRICTED_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_PRIVATE_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGEDEVICE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_IDLE_POWER = Constants$root.C_POINTER$LAYOUT;
    public static int StoragePowerupUnknown() {
        return (int)0L;
    }
    public static int StoragePowerupIO() {
        return (int)1L;
    }
    public static int StoragePowerupDeviceAttention() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_POWERUP_REASON_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_IDLE_POWERUP_REASON = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDevicePowerCapUnitsPercent() {
        return (int)0L;
    }
    public static int StorageDevicePowerCapUnitsMilliwatts() {
        return (int)1L;
    }
    public static OfAddress PSTORAGE_DEVICE_POWER_CAP_UNITS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_POWER_CAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_RPMB_DATA_FRAME = Constants$root.C_POINTER$LAYOUT;
    public static int StorRpmbProgramAuthKey() {
        return (int)1L;
    }
    public static int StorRpmbQueryWriteCounter() {
        return (int)2L;
    }
    public static int StorRpmbAuthenticatedWrite() {
        return (int)3L;
    }
    public static int StorRpmbAuthenticatedRead() {
        return (int)4L;
    }
    public static int StorRpmbReadResultRequest() {
        return (int)5L;
    }
    public static int StorRpmbAuthenticatedDeviceConfigWrite() {
        return (int)6L;
    }
    public static int StorRpmbAuthenticatedDeviceConfigRead() {
        return (int)7L;
    }
    public static OfAddress PSTORAGE_RPMB_COMMAND_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_EVENT_NOTIFICATION = Constants$root.C_POINTER$LAYOUT;
    public static int StorageCounterTypeUnknown() {
        return (int)0L;
    }
    public static int StorageCounterTypeTemperatureCelsius() {
        return (int)1L;
    }
    public static int StorageCounterTypeTemperatureCelsiusMax() {
        return (int)2L;
    }
    public static int StorageCounterTypeReadErrorsTotal() {
        return (int)3L;
    }
    public static int StorageCounterTypeReadErrorsCorrected() {
        return (int)4L;
    }
    public static int StorageCounterTypeReadErrorsUncorrected() {
        return (int)5L;
    }
    public static int StorageCounterTypeWriteErrorsTotal() {
        return (int)6L;
    }
    public static int StorageCounterTypeWriteErrorsCorrected() {
        return (int)7L;
    }
    public static int StorageCounterTypeWriteErrorsUncorrected() {
        return (int)8L;
    }
    public static int StorageCounterTypeManufactureDate() {
        return (int)9L;
    }
    public static int StorageCounterTypeStartStopCycleCount() {
        return (int)10L;
    }
    public static int StorageCounterTypeStartStopCycleCountMax() {
        return (int)11L;
    }
    public static int StorageCounterTypeLoadUnloadCycleCount() {
        return (int)12L;
    }
    public static int StorageCounterTypeLoadUnloadCycleCountMax() {
        return (int)13L;
    }
    public static int StorageCounterTypeWearPercentage() {
        return (int)14L;
    }
    public static int StorageCounterTypeWearPercentageWarning() {
        return (int)15L;
    }
    public static int StorageCounterTypeWearPercentageMax() {
        return (int)16L;
    }
    public static int StorageCounterTypePowerOnHours() {
        return (int)17L;
    }
    public static int StorageCounterTypeReadLatency100NSMax() {
        return (int)18L;
    }
    public static int StorageCounterTypeWriteLatency100NSMax() {
        return (int)19L;
    }
    public static int StorageCounterTypeFlushLatency100NSMax() {
        return (int)20L;
    }
    public static int StorageCounterTypeMax() {
        return (int)21L;
    }
    public static OfAddress PSTORAGE_COUNTER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_COUNTER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_COUNTERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_INFO_QUERY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_SLOT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_DOWNLOAD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_ACTIVATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_COMMAND = Constants$root.C_POINTER$LAYOUT;
    public static int StorAttributeMgmt_ClearAttribute() {
        return (int)0L;
    }
    public static int StorAttributeMgmt_SetAttribute() {
        return (int)1L;
    }
    public static int StorAttributeMgmt_ResetAttribute() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_ATTRIBUTE_MGMT_ACTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ATTRIBUTE_MGMT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_HEALTH_NOTIFICATION_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_LOGICAL_DEVICE_INSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_LOGICAL_DEVICES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PHYSICAL_DEVICE_INSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PHYSICAL_DEVICES = Constants$root.C_POINTER$LAYOUT;
    public static int ScmRegionFlagNone() {
        return (int)0L;
    }
    public static int ScmRegionFlagLabel() {
        return (int)1L;
    }
    public static OfAddress PSCM_REGION_FLAG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_REGION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_REGIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_INTERLEAVED_PD_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_LD_INTERLEAVE_SET_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceQuery_Descriptor() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceQuery_IsSupported() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceQuery_Max() {
        return (int)2L;
    }
    public static OfAddress PSCM_PD_QUERY_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceProperty_DeviceInfo() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceProperty_ManagementStatus() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceProperty_FirmwareInfo() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceProperty_LocationString() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceProperty_DeviceSpecificInfo() {
        return (int)4L;
    }
    public static int ScmPhysicalDeviceProperty_DeviceHandle() {
        return (int)5L;
    }
    public static int ScmPhysicalDeviceProperty_Max() {
        return (int)6L;
    }
    public static OfAddress PSCM_PD_PROPERTY_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PROPERTY_QUERY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DESCRIPTOR_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_SPECIFIC_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_SPECIFIC_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_SLOT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceHealth_Unknown() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceHealth_Unhealthy() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceHealth_Warning() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceHealth_Healthy() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceHealth_Max() {
        return (int)4L;
    }
    public static OfAddress PSCM_PD_HEALTH_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceOpStatus_Unknown() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceOpStatus_Ok() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceOpStatus_PredictingFailure() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceOpStatus_InService() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceOpStatus_HardwareError() {
        return (int)4L;
    }
    public static int ScmPhysicalDeviceOpStatus_NotUsable() {
        return (int)5L;
    }
    public static int ScmPhysicalDeviceOpStatus_TransientError() {
        return (int)6L;
    }
    public static int ScmPhysicalDeviceOpStatus_Missing() {
        return (int)7L;
    }
    public static int ScmPhysicalDeviceOpStatus_Max() {
        return (int)8L;
    }
    public static OfAddress PSCM_PD_OPERATIONAL_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceOpReason_Unknown() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceOpReason_Media() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceOpReason_ThresholdExceeded() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceOpReason_LostData() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceOpReason_EnergySource() {
        return (int)4L;
    }
    public static int ScmPhysicalDeviceOpReason_Configuration() {
        return (int)5L;
    }
    public static int ScmPhysicalDeviceOpReason_DeviceController() {
        return (int)6L;
    }
    public static int ScmPhysicalDeviceOpReason_MediaController() {
        return (int)7L;
    }
    public static int ScmPhysicalDeviceOpReason_Component() {
        return (int)8L;
    }
    public static int ScmPhysicalDeviceOpReason_BackgroundOperation() {
        return (int)9L;
    }
    public static int ScmPhysicalDeviceOpReason_InvalidFirmware() {
        return (int)10L;
    }
    public static int ScmPhysicalDeviceOpReason_HealthCheck() {
        return (int)11L;
    }
    public static int ScmPhysicalDeviceOpReason_LostDataPersistence() {
        return (int)12L;
    }
    public static int ScmPhysicalDeviceOpReason_DisabledByPlatform() {
        return (int)13L;
    }
    public static int ScmPhysicalDeviceOpReason_PermanentError() {
        return (int)14L;
    }
    public static int ScmPhysicalDeviceOpReason_LostWritePersistence() {
        return (int)15L;
    }
    public static int ScmPhysicalDeviceOpReason_FatalError() {
        return (int)16L;
    }
    public static int ScmPhysicalDeviceOpReason_DataPersistenceLossImminent() {
        return (int)17L;
    }
    public static int ScmPhysicalDeviceOpReason_WritePersistenceLossImminent() {
        return (int)18L;
    }
    public static int ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock() {
        return (int)19L;
    }
    public static int ScmPhysicalDeviceOpReason_PerformanceDegradation() {
        return (int)20L;
    }
    public static int ScmPhysicalDeviceOpReason_ExcessiveTemperature() {
        return (int)21L;
    }
    public static int ScmPhysicalDeviceOpReason_Max() {
        return (int)22L;
    }
    public static OfAddress PSCM_PD_OPERATIONAL_STATUS_REASON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_MANAGEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_LOCATION_STRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_DOWNLOAD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_ACTIVATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_INVDIMM_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_REINITIALIZE_MEDIA_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceReinit_Success() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceReinit_RebootNeeded() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceReinit_ColdBootNeeded() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceReinit_Max() {
        return (int)3L;
    }
    public static OfAddress PSCM_PD_MEDIA_REINITIALIZATION_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_REINITIALIZE_MEDIA_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static int Unknown() {
        return (int)0L;
    }
    public static int F5_1Pt2_512() {
        return (int)1L;
    }
    public static int F3_1Pt44_512() {
        return (int)2L;
    }
    public static int F3_2Pt88_512() {
        return (int)3L;
    }
    public static int F3_20Pt8_512() {
        return (int)4L;
    }
    public static int F3_720_512() {
        return (int)5L;
    }
    public static int F5_360_512() {
        return (int)6L;
    }
    public static int F5_320_512() {
        return (int)7L;
    }
    public static int F5_320_1024() {
        return (int)8L;
    }
    public static int F5_180_512() {
        return (int)9L;
    }
    public static int F5_160_512() {
        return (int)10L;
    }
    public static int RemovableMedia() {
        return (int)11L;
    }
    public static int FixedMedia() {
        return (int)12L;
    }
    public static int F3_120M_512() {
        return (int)13L;
    }
    public static int F3_640_512() {
        return (int)14L;
    }
    public static int F5_640_512() {
        return (int)15L;
    }
    public static int F5_720_512() {
        return (int)16L;
    }
    public static int F3_1Pt2_512() {
        return (int)17L;
    }
    public static int F3_1Pt23_1024() {
        return (int)18L;
    }
    public static int F5_1Pt23_1024() {
        return (int)19L;
    }
    public static int F3_128Mb_512() {
        return (int)20L;
    }
    public static int F3_230Mb_512() {
        return (int)21L;
    }
    public static int F8_256_128() {
        return (int)22L;
    }
    public static int F3_200Mb_512() {
        return (int)23L;
    }
    public static int F3_240M_512() {
        return (int)24L;
    }
    public static int F3_32M_512() {
        return (int)25L;
    }
    public static OfAddress PMEDIA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBAD_TRACK_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_EX_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_GEOMETRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARTITION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_PARTITION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVERIFY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREASSIGN_BLOCKS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREASSIGN_BLOCKS_EX = Constants$root.C_POINTER$LAYOUT;
    public static int PARTITION_STYLE_MBR() {
        return (int)0L;
    }
    public static int PARTITION_STYLE_GPT() {
        return (int)1L;
    }
    public static int PARTITION_STYLE_RAW() {
        return (int)2L;
    }
    public static OfAddress PPARTITION_INFORMATION_GPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARTITION_INFORMATION_MBR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_PARTITION_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_DISK_GPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_DISK_MBR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_DISK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_LENGTH_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARTITION_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION_GPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION_MBR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static int DetectNone() {
        return (int)0L;
    }
    public static int DetectInt13() {
        return (int)1L;
    }
    public static int DetectExInt13() {
        return (int)2L;
    }
    public static OfAddress PDISK_INT13_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_EX_INT13_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_DETECTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_PARTITION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_GEOMETRY_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_CONTROLLER_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static int EqualPriority() {
        return (int)0L;
    }
    public static int KeepPrefetchedData() {
        return (int)1L;
    }
    public static int KeepReadData() {
        return (int)2L;
    }
    public static OfAddress PDISK_CACHE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_GROW_PARTITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHISTOGRAM_BUCKET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_HISTOGRAM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_PERFORMANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_LOGGING = Constants$root.C_POINTER$LAYOUT;
    public static int RequestSize() {
        return (int)0L;
    }
    public static int RequestLocation() {
        return (int)1L;
    }
    public static OfAddress PBIN_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERF_BIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBIN_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBIN_RESULTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGETVERSIONINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGETVERSIONINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIDEREGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIDEREGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSENDCMDINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSENDCMDINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVERSTATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVERSTATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSENDCMDOUTPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSENDCMDOUTPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_DISK_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_DISK_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static int AllElements() {
        return (int)0L;
    }
    public static int ChangerTransport() {
        return (int)1L;
    }
    public static int ChangerSlot() {
        return (int)2L;
    }
    public static int ChangerIEPort() {
        return (int)3L;
    }
    public static int ChangerDrive() {
        return (int)4L;
    }
    public static int ChangerDoor() {
        return (int)5L;
    }
    public static int ChangerKeypad() {
        return (int)6L;
    }
    public static int ChangerMaxElement() {
        return (int)7L;
    }
    public static OfAddress PELEMENT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_CHANGER_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_PRODUCT_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_SET_ACCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_READ_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT_STATUS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_INITIALIZE_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_SET_POSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_EXCHANGE_MEDIUM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_MOVE_MEDIUM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_SEND_VOLUME_TAG_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_ELEMENT_ADDRESS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int DeviceProblemNone() {
        return (int)0L;
    }
    public static int DeviceProblemHardware() {
        return (int)1L;
    }
    public static int DeviceProblemCHMError() {
        return (int)2L;
    }
    public static int DeviceProblemDoorOpen() {
        return (int)3L;
    }
    public static int DeviceProblemCalibrationError() {
        return (int)4L;
    }
    public static int DeviceProblemTargetFailure() {
        return (int)5L;
    }
    public static int DeviceProblemCHMMoveError() {
        return (int)6L;
    }
    public static int DeviceProblemCHMZeroError() {
        return (int)7L;
    }
    public static int DeviceProblemCartridgeInsertError() {
        return (int)8L;
    }
    public static int DeviceProblemPositionError() {
        return (int)9L;
    }
    public static int DeviceProblemSensorError() {
        return (int)10L;
    }
    public static int DeviceProblemCartridgeEjectError() {
        return (int)11L;
    }
    public static int DeviceProblemGripperError() {
        return (int)12L;
    }
    public static int DeviceProblemDriveError() {
        return (int)13L;
    }
    public static OfAddress PCHANGER_DEVICE_PROBLEM_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPATHNAME_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_QUERY_FAT_BPB_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_VOLUME_DATA_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_EXTENDED_VOLUME_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREFS_VOLUME_DATA_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTARTING_LCN_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTARTING_LCN_INPUT_BUFFER_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOLUME_BITMAP_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTARTING_VCN_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTERS_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTER_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_FILE_RECORD_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_FILE_RECORD_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOVE_FILE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOVE_FILE_RECORD_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOVE_FILE_DATA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFIND_BY_SID_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFIND_BY_SID_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMFT_ENUM_DATA_V0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMFT_ENUM_DATA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMFT_ENUM_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_USN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_FILE_USN_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_USN_JOURNAL_DATA_V0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_USN_JOURNAL_DATA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_USN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_TRACK_MODIFIED_RANGES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RANGE_TRACK_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_V3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_COMMON_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_EXTENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_V4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_UNION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA_V0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDELETE_USN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMARK_HANDLE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMARK_HANDLE_INFO32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBULK_SECURITY_TEST_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PREFETCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PREFETCH_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILESYSTEM_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFAT_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXFAT_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILESYSTEM_STATISTICS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_STATISTICS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_OBJECTID_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_SET_SPARSE_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ZERO_DATA_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ZERO_DATA_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ALLOCATED_RANGE_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDECRYPTION_STATUS_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREQUEST_RAW_ENCRYPTED_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTED_DATA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTENDED_ENCRYPTED_DATA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPLEX_READ_DATA_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSI_COPYFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_MAKE_COMPATIBLE_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_SET_DEFECT_MGMT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_QUERY_SPARING_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_INITIATE_REPAIR_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static int ShrinkPrepare() {
        return (int)1L;
    }
    public static int ShrinkCommit() {
        return (int)2L;
    }
    public static int ShrinkAbort() {
        return (int)3L;
    }
    public static OfAddress PSHRINK_VOLUME_REQUEST_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSHRINK_VOLUME_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_MODIFY_RM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_QUERY_RM_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_ROLLFORWARD_REDO_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_START_RM_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_GET_METADATA_INFO_OUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTION_LOCKED_FILES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTIONS_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_READ_BACKUP_INFORMATION_OUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_WRITE_BACKUP_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_GET_TRANSACTED_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_SAVEPOINT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_CREATE_MINIVERSION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_TRANSACTION_ACTIVE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBOOT_AREA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTER_BASE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_FS_PERSISTENT_VOLUME_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_SYSTEM_RECOGNITION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREQUEST_OPLOCK_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREQUEST_OPLOCK_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIRTUAL_STORAGE_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_CHANGE_MACHINE_SID_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_CHANGE_MACHINE_SID_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_QUERY_STATS_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_QUERY_STATS_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_ENUM_SDS_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_ENUM_SDS_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_ENUM_SDS_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_GLOBAL_CHANGE_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_GLOBAL_CHANGE_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOOKUP_STREAM_FROM_CLUSTER_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOOKUP_STREAM_FROM_CLUSTER_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_TYPE_NOTIFICATION_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$904.FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$SEGMENT,"FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE");
    }
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$905.FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$SEGMENT,"FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE");
    }
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$905.FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$SEGMENT,"FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE");
    }
    public static OfAddress PCSV_MGMT_LOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_NAMESPACE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int CsvControlStartRedirectFile() {
        return (int)2L;
    }
    public static int CsvControlStopRedirectFile() {
        return (int)3L;
    }
    public static int CsvControlQueryRedirectState() {
        return (int)4L;
    }
    public static int CsvControlQueryFileRevision() {
        return (int)6L;
    }
    public static int CsvControlQueryMdsPath() {
        return (int)8L;
    }
    public static int CsvControlQueryFileRevisionFileId128() {
        return (int)9L;
    }
    public static int CsvControlQueryVolumeRedirectState() {
        return (int)10L;
    }
    public static int CsvControlEnableUSNRangeModificationTracking() {
        return (int)13L;
    }
    public static int CsvControlMarkHandleLocalVolumeMount() {
        return (int)14L;
    }
    public static int CsvControlUnmarkHandleLocalVolumeMount() {
        return (int)15L;
    }
    public static int CsvControlGetCsvFsMdsPathV2() {
        return (int)18L;
    }
    public static int CsvControlDisableCaching() {
        return (int)19L;
    }
    public static int CsvControlEnableCaching() {
        return (int)20L;
    }
    public static int CsvControlStartForceDFO() {
        return (int)21L;
    }
    public static int CsvControlStopForceDFO() {
        return (int)22L;
    }
    public static OfAddress PCSV_CONTROL_OP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_CONTROL_PARAM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_REDIRECT_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_FILE_REVISION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_FILE_REVISION_FILE_ID_128 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_MDS_PATH = Constants$root.C_POINTER$LAYOUT;
    public static int CsvFsDiskConnectivityNone() {
        return (int)0L;
    }
    public static int CsvFsDiskConnectivityMdsNodeOnly() {
        return (int)1L;
    }
    public static int CsvFsDiskConnectivitySubsetOfNodes() {
        return (int)2L;
    }
    public static int CsvFsDiskConnectivityAllNodes() {
        return (int)3L;
    }
    public static OfAddress PCSVFS_DISK_CONNECTIVITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_VOLUME_REDIRECT_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_MDS_PATH_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static int StorageReserveIdNone() {
        return (int)0L;
    }
    public static int StorageReserveIdHard() {
        return (int)1L;
    }
    public static int StorageReserveIdSoft() {
        return (int)2L;
    }
    public static int StorageReserveIdUpdateScratch() {
        return (int)3L;
    }
    public static int StorageReserveIdMax() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_RESERVE_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSV_IS_OWNED_BY_CSVFS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LEVEL_TRIM_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LEVEL_TRIM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LEVEL_TRIM_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_NONE() {
        return (int)0L;
    }
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS() {
        return (int)1L;
    }
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID() {
        return (int)2L;
    }
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID() {
        return (int)3L;
    }
    public static int QUERY_FILE_LAYOUT_NUM_FILTER_TYPES() {
        return (int)4L;
    }
    public static OfAddress PCLUSTER_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_REFERENCE_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_FILE_LAYOUT_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_FILE_LAYOUT_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LAYOUT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LAYOUT_NAME_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_LAYOUT_INFO_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAM_LAYOUT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAM_EXTENT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_OFFLOAD_READ_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_OFFLOAD_READ_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_OFFLOAD_WRITE_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_OFFLOAD_WRITE_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_PURGE_FAILURE_MODE_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREPAIR_COPIES_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREPAIR_COPIES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_REGION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_REGION_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_REGION_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWRITE_USN_REASON_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static int FileStorageTierMediaTypeUnspecified() {
        return (int)0L;
    }
    public static int FileStorageTierMediaTypeDisk() {
        return (int)1L;
    }
    public static int FileStorageTierMediaTypeSsd() {
        return (int)2L;
    }
    public static int FileStorageTierMediaTypeScm() {
        return (int)4L;
    }
    public static int FileStorageTierMediaTypeMax() {
        return (int)5L;
    }
    public static OfAddress PFILE_STORAGE_TIER_MEDIA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int FileStorageTierClassUnspecified() {
        return (int)0L;
    }
    public static int FileStorageTierClassCapacity() {
        return (int)1L;
    }
    public static int FileStorageTierClassPerformance() {
        return (int)2L;
    }
    public static int FileStorageTierClassMax() {
        return (int)3L;
    }
    public static OfAddress PFILE_STORAGE_TIER_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_STORAGE_TIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAM_INFORMATION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_QUERY_REGION_INFO_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_STORAGE_TIER_REGION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_QUERY_REGION_INFO_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_DESIRED_STORAGE_CLASS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDUPLICATE_EXTENTS_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDUPLICATE_EXTENTS_DATA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDUPLICATE_EXTENTS_DATA_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDUPLICATE_EXTENTS_DATA_EX32 = Constants$root.C_POINTER$LAYOUT;
    public static int SmrGcStateInactive() {
        return (int)0L;
    }
    public static int SmrGcStatePaused() {
        return (int)1L;
    }
    public static int SmrGcStateActive() {
        return (int)2L;
    }
    public static int SmrGcStateActiveFullSpeed() {
        return (int)3L;
    }
    public static OfAddress PREFS_SMR_VOLUME_GC_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREFS_SMR_VOLUME_INFO_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static int SmrGcActionStart() {
        return (int)1L;
    }
    public static int SmrGcActionStartFullSpeed() {
        return (int)2L;
    }
    public static int SmrGcActionPause() {
        return (int)3L;
    }
    public static int SmrGcActionStop() {
        return (int)4L;
    }
    public static OfAddress PREFS_SMR_VOLUME_GC_ACTION = Constants$root.C_POINTER$LAYOUT;
    public static int SmrGcMethodCompaction() {
        return (int)1L;
    }
    public static int SmrGcMethodCompression() {
        return (int)2L;
    }
    public static int SmrGcMethodRotation() {
        return (int)3L;
    }
    public static OfAddress PREFS_SMR_VOLUME_GC_METHOD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREFS_SMR_VOLUME_GC_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTREAMS_QUERY_ID_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_BAD_RANGES_INPUT_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_BAD_RANGES_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_BAD_RANGES_OUTPUT_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUERY_BAD_RANGES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static int VirtualStorageBehaviorUndefined() {
        return (int)0L;
    }
    public static int VirtualStorageBehaviorCacheWriteThrough() {
        return (int)1L;
    }
    public static int VirtualStorageBehaviorCacheWriteBack() {
        return (int)2L;
    }
    public static OfAddress PVIRTUAL_STORAGE_BEHAVIOR_CODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_KEY_CTRL_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOF_EXTERNAL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOF_EXTERNAL_FILE_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOF_VERSION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_EXTERNAL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_ADD_OVERLAY_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_UPDATE_OVERLAY_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_REMOVE_OVERLAY_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIM_PROVIDER_OVERLAY_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PROVIDER_EXTERNAL_INFO_V0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PROVIDER_EXTERNAL_INFO_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PROVIDER_EXTERNAL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONTAINER_VOLUME_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONTAINER_ROOT_INFO_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONTAINER_ROOT_INFO_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIRTUALIZATION_INSTANCE_INFO_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIRTUALIZATION_INSTANCE_INFO_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_FILTER_FILE_IDENTIFIER_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_FILTER_FILE_IDENTIFIER_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_EXTENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOLUME_DISK_EXTENTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIO_IRP_EXT_TRACK_OFFSET_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static MemorySegment GUID_DEVINTERFACE_SMARTCARD_READER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$905.GUID_DEVINTERFACE_SMARTCARD_READER$SEGMENT,"GUID_DEVINTERFACE_SMARTCARD_READER");
    }
    public static OfAddress PSCARD_IO_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_IO_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCSCARD_IO_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_T0_COMMAND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCARD_T0_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_T0_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCARD_T1_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_T1_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCVOID = Constants$root.C_POINTER$LAYOUT;
    public static MemorySegment g_rgSCardT0Pci$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$905.g_rgSCardT0Pci$SEGMENT,"g_rgSCardT0Pci");
    }
    public static MemorySegment g_rgSCardT1Pci$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$906.g_rgSCardT1Pci$SEGMENT,"g_rgSCardT1Pci");
    }
    public static MemorySegment g_rgSCardRawPci$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$906.g_rgSCardRawPci$SEGMENT,"g_rgSCardRawPci");
    }
    public static OfAddress PSCARDCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARDCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCARDHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARDHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SCardEstablishContext$MH() {
        return RuntimeHelper.requireNonNull(constants$906.SCardEstablishContext$MH,"SCardEstablishContext");
    }
    public static int SCardEstablishContext ( int dwScope,  Addressable pvReserved1,  Addressable pvReserved2,  Addressable phContext) {
        var mh$ = SCardEstablishContext$MH();
        try {
            return (int)mh$.invokeExact(dwScope, pvReserved1, pvReserved2, phContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$906.SCardReleaseContext$MH,"SCardReleaseContext");
    }
    public static int SCardReleaseContext ( long hContext) {
        var mh$ = SCardReleaseContext$MH();
        try {
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIsValidContext$MH() {
        return RuntimeHelper.requireNonNull(constants$906.SCardIsValidContext$MH,"SCardIsValidContext");
    }
    public static int SCardIsValidContext ( long hContext) {
        var mh$ = SCardIsValidContext$MH();
        try {
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReaderGroupsA$MH() {
        return RuntimeHelper.requireNonNull(constants$906.SCardListReaderGroupsA$MH,"SCardListReaderGroupsA");
    }
    public static int SCardListReaderGroupsA ( long hContext,  Addressable mszGroups,  Addressable pcchGroups) {
        var mh$ = SCardListReaderGroupsA$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszGroups, pcchGroups);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReaderGroupsW$MH() {
        return RuntimeHelper.requireNonNull(constants$907.SCardListReaderGroupsW$MH,"SCardListReaderGroupsW");
    }
    public static int SCardListReaderGroupsW ( long hContext,  Addressable mszGroups,  Addressable pcchGroups) {
        var mh$ = SCardListReaderGroupsW$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszGroups, pcchGroups);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReadersA$MH() {
        return RuntimeHelper.requireNonNull(constants$907.SCardListReadersA$MH,"SCardListReadersA");
    }
    public static int SCardListReadersA ( long hContext,  Addressable mszGroups,  Addressable mszReaders,  Addressable pcchReaders) {
        var mh$ = SCardListReadersA$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszGroups, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReadersW$MH() {
        return RuntimeHelper.requireNonNull(constants$907.SCardListReadersW$MH,"SCardListReadersW");
    }
    public static int SCardListReadersW ( long hContext,  Addressable mszGroups,  Addressable mszReaders,  Addressable pcchReaders) {
        var mh$ = SCardListReadersW$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszGroups, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListCardsA$MH() {
        return RuntimeHelper.requireNonNull(constants$907.SCardListCardsA$MH,"SCardListCardsA");
    }
    public static int SCardListCardsA ( long hContext,  Addressable pbAtr,  Addressable rgquidInterfaces,  int cguidInterfaceCount,  Addressable mszCards,  Addressable pcchCards) {
        var mh$ = SCardListCardsA$MH();
        try {
            return (int)mh$.invokeExact(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListCardsW$MH() {
        return RuntimeHelper.requireNonNull(constants$907.SCardListCardsW$MH,"SCardListCardsW");
    }
    public static int SCardListCardsW ( long hContext,  Addressable pbAtr,  Addressable rgquidInterfaces,  int cguidInterfaceCount,  Addressable mszCards,  Addressable pcchCards) {
        var mh$ = SCardListCardsW$MH();
        try {
            return (int)mh$.invokeExact(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListInterfacesA$MH() {
        return RuntimeHelper.requireNonNull(constants$907.SCardListInterfacesA$MH,"SCardListInterfacesA");
    }
    public static int SCardListInterfacesA ( long hContext,  Addressable szCard,  Addressable pguidInterfaces,  Addressable pcguidInterfaces) {
        var mh$ = SCardListInterfacesA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListInterfacesW$MH() {
        return RuntimeHelper.requireNonNull(constants$908.SCardListInterfacesW$MH,"SCardListInterfacesW");
    }
    public static int SCardListInterfacesW ( long hContext,  Addressable szCard,  Addressable pguidInterfaces,  Addressable pcguidInterfaces) {
        var mh$ = SCardListInterfacesW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetProviderIdA$MH() {
        return RuntimeHelper.requireNonNull(constants$908.SCardGetProviderIdA$MH,"SCardGetProviderIdA");
    }
    public static int SCardGetProviderIdA ( long hContext,  Addressable szCard,  Addressable pguidProviderId) {
        var mh$ = SCardGetProviderIdA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCard, pguidProviderId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetProviderIdW$MH() {
        return RuntimeHelper.requireNonNull(constants$908.SCardGetProviderIdW$MH,"SCardGetProviderIdW");
    }
    public static int SCardGetProviderIdW ( long hContext,  Addressable szCard,  Addressable pguidProviderId) {
        var mh$ = SCardGetProviderIdW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCard, pguidProviderId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetCardTypeProviderNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$908.SCardGetCardTypeProviderNameA$MH,"SCardGetCardTypeProviderNameA");
    }
    public static int SCardGetCardTypeProviderNameA ( long hContext,  Addressable szCardName,  int dwProviderId,  Addressable szProvider,  Addressable pcchProvider) {
        var mh$ = SCardGetCardTypeProviderNameA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetCardTypeProviderNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$908.SCardGetCardTypeProviderNameW$MH,"SCardGetCardTypeProviderNameW");
    }
    public static int SCardGetCardTypeProviderNameW ( long hContext,  Addressable szCardName,  int dwProviderId,  Addressable szProvider,  Addressable pcchProvider) {
        var mh$ = SCardGetCardTypeProviderNameW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceReaderGroupA$MH() {
        return RuntimeHelper.requireNonNull(constants$908.SCardIntroduceReaderGroupA$MH,"SCardIntroduceReaderGroupA");
    }
    public static int SCardIntroduceReaderGroupA ( long hContext,  Addressable szGroupName) {
        var mh$ = SCardIntroduceReaderGroupA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceReaderGroupW$MH() {
        return RuntimeHelper.requireNonNull(constants$909.SCardIntroduceReaderGroupW$MH,"SCardIntroduceReaderGroupW");
    }
    public static int SCardIntroduceReaderGroupW ( long hContext,  Addressable szGroupName) {
        var mh$ = SCardIntroduceReaderGroupW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetReaderGroupA$MH() {
        return RuntimeHelper.requireNonNull(constants$909.SCardForgetReaderGroupA$MH,"SCardForgetReaderGroupA");
    }
    public static int SCardForgetReaderGroupA ( long hContext,  Addressable szGroupName) {
        var mh$ = SCardForgetReaderGroupA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetReaderGroupW$MH() {
        return RuntimeHelper.requireNonNull(constants$909.SCardForgetReaderGroupW$MH,"SCardForgetReaderGroupW");
    }
    public static int SCardForgetReaderGroupW ( long hContext,  Addressable szGroupName) {
        var mh$ = SCardForgetReaderGroupW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceReaderA$MH() {
        return RuntimeHelper.requireNonNull(constants$909.SCardIntroduceReaderA$MH,"SCardIntroduceReaderA");
    }
    public static int SCardIntroduceReaderA ( long hContext,  Addressable szReaderName,  Addressable szDeviceName) {
        var mh$ = SCardIntroduceReaderA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceReaderW$MH() {
        return RuntimeHelper.requireNonNull(constants$909.SCardIntroduceReaderW$MH,"SCardIntroduceReaderW");
    }
    public static int SCardIntroduceReaderW ( long hContext,  Addressable szReaderName,  Addressable szDeviceName) {
        var mh$ = SCardIntroduceReaderW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetReaderA$MH() {
        return RuntimeHelper.requireNonNull(constants$909.SCardForgetReaderA$MH,"SCardForgetReaderA");
    }
    public static int SCardForgetReaderA ( long hContext,  Addressable szReaderName) {
        var mh$ = SCardForgetReaderA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetReaderW$MH() {
        return RuntimeHelper.requireNonNull(constants$910.SCardForgetReaderW$MH,"SCardForgetReaderW");
    }
    public static int SCardForgetReaderW ( long hContext,  Addressable szReaderName) {
        var mh$ = SCardForgetReaderW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardAddReaderToGroupA$MH() {
        return RuntimeHelper.requireNonNull(constants$910.SCardAddReaderToGroupA$MH,"SCardAddReaderToGroupA");
    }
    public static int SCardAddReaderToGroupA ( long hContext,  Addressable szReaderName,  Addressable szGroupName) {
        var mh$ = SCardAddReaderToGroupA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardAddReaderToGroupW$MH() {
        return RuntimeHelper.requireNonNull(constants$910.SCardAddReaderToGroupW$MH,"SCardAddReaderToGroupW");
    }
    public static int SCardAddReaderToGroupW ( long hContext,  Addressable szReaderName,  Addressable szGroupName) {
        var mh$ = SCardAddReaderToGroupW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardRemoveReaderFromGroupA$MH() {
        return RuntimeHelper.requireNonNull(constants$910.SCardRemoveReaderFromGroupA$MH,"SCardRemoveReaderFromGroupA");
    }
    public static int SCardRemoveReaderFromGroupA ( long hContext,  Addressable szReaderName,  Addressable szGroupName) {
        var mh$ = SCardRemoveReaderFromGroupA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardRemoveReaderFromGroupW$MH() {
        return RuntimeHelper.requireNonNull(constants$910.SCardRemoveReaderFromGroupW$MH,"SCardRemoveReaderFromGroupW");
    }
    public static int SCardRemoveReaderFromGroupW ( long hContext,  Addressable szReaderName,  Addressable szGroupName) {
        var mh$ = SCardRemoveReaderFromGroupW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceCardTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$910.SCardIntroduceCardTypeA$MH,"SCardIntroduceCardTypeA");
    }
    public static int SCardIntroduceCardTypeA ( long hContext,  Addressable szCardName,  Addressable pguidPrimaryProvider,  Addressable rgguidInterfaces,  int dwInterfaceCount,  Addressable pbAtr,  Addressable pbAtrMask,  int cbAtrLen) {
        var mh$ = SCardIntroduceCardTypeA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardIntroduceCardTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$911.SCardIntroduceCardTypeW$MH,"SCardIntroduceCardTypeW");
    }
    public static int SCardIntroduceCardTypeW ( long hContext,  Addressable szCardName,  Addressable pguidPrimaryProvider,  Addressable rgguidInterfaces,  int dwInterfaceCount,  Addressable pbAtr,  Addressable pbAtrMask,  int cbAtrLen) {
        var mh$ = SCardIntroduceCardTypeW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardSetCardTypeProviderNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$911.SCardSetCardTypeProviderNameA$MH,"SCardSetCardTypeProviderNameA");
    }
    public static int SCardSetCardTypeProviderNameA ( long hContext,  Addressable szCardName,  int dwProviderId,  Addressable szProvider) {
        var mh$ = SCardSetCardTypeProviderNameA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardSetCardTypeProviderNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$911.SCardSetCardTypeProviderNameW$MH,"SCardSetCardTypeProviderNameW");
    }
    public static int SCardSetCardTypeProviderNameW ( long hContext,  Addressable szCardName,  int dwProviderId,  Addressable szProvider) {
        var mh$ = SCardSetCardTypeProviderNameW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetCardTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$911.SCardForgetCardTypeA$MH,"SCardForgetCardTypeA");
    }
    public static int SCardForgetCardTypeA ( long hContext,  Addressable szCardName) {
        var mh$ = SCardForgetCardTypeA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardForgetCardTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$911.SCardForgetCardTypeW$MH,"SCardForgetCardTypeW");
    }
    public static int SCardForgetCardTypeW ( long hContext,  Addressable szCardName) {
        var mh$ = SCardForgetCardTypeW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szCardName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardFreeMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$911.SCardFreeMemory$MH,"SCardFreeMemory");
    }
    public static int SCardFreeMemory ( long hContext,  Addressable pvMem) {
        var mh$ = SCardFreeMemory$MH();
        try {
            return (int)mh$.invokeExact(hContext, pvMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardAccessStartedEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$912.SCardAccessStartedEvent$MH,"SCardAccessStartedEvent");
    }
    public static MemoryAddress SCardAccessStartedEvent () {
        var mh$ = SCardAccessStartedEvent$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardReleaseStartedEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$912.SCardReleaseStartedEvent$MH,"SCardReleaseStartedEvent");
    }
    public static void SCardReleaseStartedEvent () {
        var mh$ = SCardReleaseStartedEvent$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSCARD_READERSTATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_READERSTATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCARD_READERSTATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_READERSTATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCARD_READERSTATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_READERSTATE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SCardLocateCardsA$MH() {
        return RuntimeHelper.requireNonNull(constants$912.SCardLocateCardsA$MH,"SCardLocateCardsA");
    }
    public static int SCardLocateCardsA ( long hContext,  Addressable mszCards,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardLocateCardsA$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszCards, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardLocateCardsW$MH() {
        return RuntimeHelper.requireNonNull(constants$912.SCardLocateCardsW$MH,"SCardLocateCardsW");
    }
    public static int SCardLocateCardsW ( long hContext,  Addressable mszCards,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardLocateCardsW$MH();
        try {
            return (int)mh$.invokeExact(hContext, mszCards, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSCARD_ATRMASK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCARD_ATRMASK = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SCardLocateCardsByATRA$MH() {
        return RuntimeHelper.requireNonNull(constants$912.SCardLocateCardsByATRA$MH,"SCardLocateCardsByATRA");
    }
    public static int SCardLocateCardsByATRA ( long hContext,  Addressable rgAtrMasks,  int cAtrs,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardLocateCardsByATRA$MH();
        try {
            return (int)mh$.invokeExact(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardLocateCardsByATRW$MH() {
        return RuntimeHelper.requireNonNull(constants$912.SCardLocateCardsByATRW$MH,"SCardLocateCardsByATRW");
    }
    public static int SCardLocateCardsByATRW ( long hContext,  Addressable rgAtrMasks,  int cAtrs,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardLocateCardsByATRW$MH();
        try {
            return (int)mh$.invokeExact(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetStatusChangeA$MH() {
        return RuntimeHelper.requireNonNull(constants$913.SCardGetStatusChangeA$MH,"SCardGetStatusChangeA");
    }
    public static int SCardGetStatusChangeA ( long hContext,  int dwTimeout,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardGetStatusChangeA$MH();
        try {
            return (int)mh$.invokeExact(hContext, dwTimeout, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetStatusChangeW$MH() {
        return RuntimeHelper.requireNonNull(constants$913.SCardGetStatusChangeW$MH,"SCardGetStatusChangeW");
    }
    public static int SCardGetStatusChangeW ( long hContext,  int dwTimeout,  Addressable rgReaderStates,  int cReaders) {
        var mh$ = SCardGetStatusChangeW$MH();
        try {
            return (int)mh$.invokeExact(hContext, dwTimeout, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardCancel$MH() {
        return RuntimeHelper.requireNonNull(constants$913.SCardCancel$MH,"SCardCancel");
    }
    public static int SCardCancel ( long hContext) {
        var mh$ = SCardCancel$MH();
        try {
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardConnectA$MH() {
        return RuntimeHelper.requireNonNull(constants$913.SCardConnectA$MH,"SCardConnectA");
    }
    public static int SCardConnectA ( long hContext,  Addressable szReader,  int dwShareMode,  int dwPreferredProtocols,  Addressable phCard,  Addressable pdwActiveProtocol) {
        var mh$ = SCardConnectA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardConnectW$MH() {
        return RuntimeHelper.requireNonNull(constants$913.SCardConnectW$MH,"SCardConnectW");
    }
    public static int SCardConnectW ( long hContext,  Addressable szReader,  int dwShareMode,  int dwPreferredProtocols,  Addressable phCard,  Addressable pdwActiveProtocol) {
        var mh$ = SCardConnectW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardReconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$913.SCardReconnect$MH,"SCardReconnect");
    }
    public static int SCardReconnect ( long hCard,  int dwShareMode,  int dwPreferredProtocols,  int dwInitialization,  Addressable pdwActiveProtocol) {
        var mh$ = SCardReconnect$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwShareMode, dwPreferredProtocols, dwInitialization, pdwActiveProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardDisconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$914.SCardDisconnect$MH,"SCardDisconnect");
    }
    public static int SCardDisconnect ( long hCard,  int dwDisposition) {
        var mh$ = SCardDisconnect$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwDisposition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardBeginTransaction$MH() {
        return RuntimeHelper.requireNonNull(constants$914.SCardBeginTransaction$MH,"SCardBeginTransaction");
    }
    public static int SCardBeginTransaction ( long hCard) {
        var mh$ = SCardBeginTransaction$MH();
        try {
            return (int)mh$.invokeExact(hCard);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardEndTransaction$MH() {
        return RuntimeHelper.requireNonNull(constants$914.SCardEndTransaction$MH,"SCardEndTransaction");
    }
    public static int SCardEndTransaction ( long hCard,  int dwDisposition) {
        var mh$ = SCardEndTransaction$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwDisposition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardCancelTransaction$MH() {
        return RuntimeHelper.requireNonNull(constants$914.SCardCancelTransaction$MH,"SCardCancelTransaction");
    }
    public static int SCardCancelTransaction ( long hCard) {
        var mh$ = SCardCancelTransaction$MH();
        try {
            return (int)mh$.invokeExact(hCard);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardState$MH() {
        return RuntimeHelper.requireNonNull(constants$914.SCardState$MH,"SCardState");
    }
    public static int SCardState ( long hCard,  Addressable pdwState,  Addressable pdwProtocol,  Addressable pbAtr,  Addressable pcbAtrLen) {
        var mh$ = SCardState$MH();
        try {
            return (int)mh$.invokeExact(hCard, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardStatusA$MH() {
        return RuntimeHelper.requireNonNull(constants$914.SCardStatusA$MH,"SCardStatusA");
    }
    public static int SCardStatusA ( long hCard,  Addressable mszReaderNames,  Addressable pcchReaderLen,  Addressable pdwState,  Addressable pdwProtocol,  Addressable pbAtr,  Addressable pcbAtrLen) {
        var mh$ = SCardStatusA$MH();
        try {
            return (int)mh$.invokeExact(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardStatusW$MH() {
        return RuntimeHelper.requireNonNull(constants$915.SCardStatusW$MH,"SCardStatusW");
    }
    public static int SCardStatusW ( long hCard,  Addressable mszReaderNames,  Addressable pcchReaderLen,  Addressable pdwState,  Addressable pdwProtocol,  Addressable pbAtr,  Addressable pcbAtrLen) {
        var mh$ = SCardStatusW$MH();
        try {
            return (int)mh$.invokeExact(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardTransmit$MH() {
        return RuntimeHelper.requireNonNull(constants$915.SCardTransmit$MH,"SCardTransmit");
    }
    public static int SCardTransmit ( long hCard,  Addressable pioSendPci,  Addressable pbSendBuffer,  int cbSendLength,  Addressable pioRecvPci,  Addressable pbRecvBuffer,  Addressable pcbRecvLength) {
        var mh$ = SCardTransmit$MH();
        try {
            return (int)mh$.invokeExact(hCard, pioSendPci, pbSendBuffer, cbSendLength, pioRecvPci, pbRecvBuffer, pcbRecvLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetTransmitCount$MH() {
        return RuntimeHelper.requireNonNull(constants$915.SCardGetTransmitCount$MH,"SCardGetTransmitCount");
    }
    public static int SCardGetTransmitCount ( long hCard,  Addressable pcTransmitCount) {
        var mh$ = SCardGetTransmitCount$MH();
        try {
            return (int)mh$.invokeExact(hCard, pcTransmitCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardControl$MH() {
        return RuntimeHelper.requireNonNull(constants$915.SCardControl$MH,"SCardControl");
    }
    public static int SCardControl ( long hCard,  int dwControlCode,  Addressable lpInBuffer,  int cbInBufferSize,  Addressable lpOutBuffer,  int cbOutBufferSize,  Addressable lpBytesReturned) {
        var mh$ = SCardControl$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$915.SCardGetAttrib$MH,"SCardGetAttrib");
    }
    public static int SCardGetAttrib ( long hCard,  int dwAttrId,  Addressable pbAttr,  Addressable pcbAttrLen) {
        var mh$ = SCardGetAttrib$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwAttrId, pbAttr, pcbAttrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardSetAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$915.SCardSetAttrib$MH,"SCardSetAttrib");
    }
    public static int SCardSetAttrib ( long hCard,  int dwAttrId,  Addressable pbAttr,  int cbAttrLen) {
        var mh$ = SCardSetAttrib$MH();
        try {
            return (int)mh$.invokeExact(hCard, dwAttrId, pbAttr, cbAttrLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress POPENCARD_SEARCH_CRITERIAA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARD_SEARCH_CRITERIAA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARD_SEARCH_CRITERIAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARD_SEARCH_CRITERIAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARD_SEARCH_CRITERIA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARD_SEARCH_CRITERIA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARDNAME_EXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAME_EXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARDNAME_EXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAME_EXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARDNAME_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAME_EX = Constants$root.C_POINTER$LAYOUT;
    public static int RSR_MATCH_TYPE_READER_AND_CONTAINER() {
        return (int)1L;
    }
    public static int RSR_MATCH_TYPE_SERIAL_NUMBER() {
        return (int)2L;
    }
    public static int RSR_MATCH_TYPE_ALL_CARDS() {
        return (int)3L;
    }
    public static OfAddress PREADER_SEL_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREADER_SEL_RESPONSE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SCardUIDlgSelectCardA$MH() {
        return RuntimeHelper.requireNonNull(constants$917.SCardUIDlgSelectCardA$MH,"SCardUIDlgSelectCardA");
    }
    public static int SCardUIDlgSelectCardA ( Addressable x0) {
        var mh$ = SCardUIDlgSelectCardA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardUIDlgSelectCardW$MH() {
        return RuntimeHelper.requireNonNull(constants$917.SCardUIDlgSelectCardW$MH,"SCardUIDlgSelectCardW");
    }
    public static int SCardUIDlgSelectCardW ( Addressable x0) {
        var mh$ = SCardUIDlgSelectCardW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress POPENCARDNAMEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAMEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARDNAMEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAMEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPENCARDNAME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENCARDNAME = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetOpenCardNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$917.GetOpenCardNameA$MH,"GetOpenCardNameA");
    }
    public static int GetOpenCardNameA ( Addressable x0) {
        var mh$ = GetOpenCardNameA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOpenCardNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$917.GetOpenCardNameW$MH,"GetOpenCardNameW");
    }
    public static int GetOpenCardNameW ( Addressable x0) {
        var mh$ = GetOpenCardNameW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardDlgExtendedError$MH() {
        return RuntimeHelper.requireNonNull(constants$918.SCardDlgExtendedError$MH,"SCardDlgExtendedError");
    }
    public static int SCardDlgExtendedError () {
        var mh$ = SCardDlgExtendedError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardReadCacheA$MH() {
        return RuntimeHelper.requireNonNull(constants$918.SCardReadCacheA$MH,"SCardReadCacheA");
    }
    public static int SCardReadCacheA ( long hContext,  Addressable CardIdentifier,  int FreshnessCounter,  Addressable LookupName,  Addressable Data,  Addressable DataLen) {
        var mh$ = SCardReadCacheA$MH();
        try {
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardReadCacheW$MH() {
        return RuntimeHelper.requireNonNull(constants$918.SCardReadCacheW$MH,"SCardReadCacheW");
    }
    public static int SCardReadCacheW ( long hContext,  Addressable CardIdentifier,  int FreshnessCounter,  Addressable LookupName,  Addressable Data,  Addressable DataLen) {
        var mh$ = SCardReadCacheW$MH();
        try {
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardWriteCacheA$MH() {
        return RuntimeHelper.requireNonNull(constants$918.SCardWriteCacheA$MH,"SCardWriteCacheA");
    }
    public static int SCardWriteCacheA ( long hContext,  Addressable CardIdentifier,  int FreshnessCounter,  Addressable LookupName,  Addressable Data,  int DataLen) {
        var mh$ = SCardWriteCacheA$MH();
        try {
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardWriteCacheW$MH() {
        return RuntimeHelper.requireNonNull(constants$918.SCardWriteCacheW$MH,"SCardWriteCacheW");
    }
    public static int SCardWriteCacheW ( long hContext,  Addressable CardIdentifier,  int FreshnessCounter,  Addressable LookupName,  Addressable Data,  int DataLen) {
        var mh$ = SCardWriteCacheW$MH();
        try {
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetReaderIconA$MH() {
        return RuntimeHelper.requireNonNull(constants$918.SCardGetReaderIconA$MH,"SCardGetReaderIconA");
    }
    public static int SCardGetReaderIconA ( long hContext,  Addressable szReaderName,  Addressable pbIcon,  Addressable pcbIcon) {
        var mh$ = SCardGetReaderIconA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, pbIcon, pcbIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetReaderIconW$MH() {
        return RuntimeHelper.requireNonNull(constants$919.SCardGetReaderIconW$MH,"SCardGetReaderIconW");
    }
    public static int SCardGetReaderIconW ( long hContext,  Addressable szReaderName,  Addressable pbIcon,  Addressable pcbIcon) {
        var mh$ = SCardGetReaderIconW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, pbIcon, pcbIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetDeviceTypeIdA$MH() {
        return RuntimeHelper.requireNonNull(constants$919.SCardGetDeviceTypeIdA$MH,"SCardGetDeviceTypeIdA");
    }
    public static int SCardGetDeviceTypeIdA ( long hContext,  Addressable szReaderName,  Addressable pdwDeviceTypeId) {
        var mh$ = SCardGetDeviceTypeIdA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, pdwDeviceTypeId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetDeviceTypeIdW$MH() {
        return RuntimeHelper.requireNonNull(constants$919.SCardGetDeviceTypeIdW$MH,"SCardGetDeviceTypeIdW");
    }
    public static int SCardGetDeviceTypeIdW ( long hContext,  Addressable szReaderName,  Addressable pdwDeviceTypeId) {
        var mh$ = SCardGetDeviceTypeIdW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, pdwDeviceTypeId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetReaderDeviceInstanceIdA$MH() {
        return RuntimeHelper.requireNonNull(constants$919.SCardGetReaderDeviceInstanceIdA$MH,"SCardGetReaderDeviceInstanceIdA");
    }
    public static int SCardGetReaderDeviceInstanceIdA ( long hContext,  Addressable szReaderName,  Addressable szDeviceInstanceId,  Addressable pcchDeviceInstanceId) {
        var mh$ = SCardGetReaderDeviceInstanceIdA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardGetReaderDeviceInstanceIdW$MH() {
        return RuntimeHelper.requireNonNull(constants$919.SCardGetReaderDeviceInstanceIdW$MH,"SCardGetReaderDeviceInstanceIdW");
    }
    public static int SCardGetReaderDeviceInstanceIdW ( long hContext,  Addressable szReaderName,  Addressable szDeviceInstanceId,  Addressable pcchDeviceInstanceId) {
        var mh$ = SCardGetReaderDeviceInstanceIdW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReadersWithDeviceInstanceIdA$MH() {
        return RuntimeHelper.requireNonNull(constants$919.SCardListReadersWithDeviceInstanceIdA$MH,"SCardListReadersWithDeviceInstanceIdA");
    }
    public static int SCardListReadersWithDeviceInstanceIdA ( long hContext,  Addressable szDeviceInstanceId,  Addressable mszReaders,  Addressable pcchReaders) {
        var mh$ = SCardListReadersWithDeviceInstanceIdA$MH();
        try {
            return (int)mh$.invokeExact(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardListReadersWithDeviceInstanceIdW$MH() {
        return RuntimeHelper.requireNonNull(constants$920.SCardListReadersWithDeviceInstanceIdW$MH,"SCardListReadersWithDeviceInstanceIdW");
    }
    public static int SCardListReadersWithDeviceInstanceIdW ( long hContext,  Addressable szDeviceInstanceId,  Addressable mszReaders,  Addressable pcchReaders) {
        var mh$ = SCardListReadersWithDeviceInstanceIdW$MH();
        try {
            return (int)mh$.invokeExact(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCardAudit$MH() {
        return RuntimeHelper.requireNonNull(constants$920.SCardAudit$MH,"SCardAudit");
    }
    public static int SCardAudit ( long hContext,  int dwEvent) {
        var mh$ = SCardAudit$MH();
        try {
            return (int)mh$.invokeExact(hContext, dwEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HPROPSHEETPAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PROPSHEETPAGE_RESOURCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEA_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEA_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEA_V3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEA_V3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEA_V4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEA_V4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEW_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEW_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEW_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEW_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEW_V3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEW_V3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEW_V4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEW_V4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEA_LATEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEW_LATEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEA_LATEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEW_LATEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETPAGEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETPAGEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETHEADERA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETHEADERA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETHEADERA_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETHEADERA_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETHEADERW_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETHEADERW_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETHEADERW_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETHEADERW_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETHEADERA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROPSHEETHEADERW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETHEADERA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPROPSHEETHEADERW = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreatePropertySheetPageA$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CreatePropertySheetPageA$MH,"CreatePropertySheetPageA");
    }
    public static MemoryAddress CreatePropertySheetPageA ( Addressable constPropSheetPagePointer) {
        var mh$ = CreatePropertySheetPageA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(constPropSheetPagePointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePropertySheetPageW$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CreatePropertySheetPageW$MH,"CreatePropertySheetPageW");
    }
    public static MemoryAddress CreatePropertySheetPageW ( Addressable constPropSheetPagePointer) {
        var mh$ = CreatePropertySheetPageW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(constPropSheetPagePointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyPropertySheetPage$MH() {
        return RuntimeHelper.requireNonNull(constants$921.DestroyPropertySheetPage$MH,"DestroyPropertySheetPage");
    }
    public static int DestroyPropertySheetPage ( Addressable x0) {
        var mh$ = DestroyPropertySheetPage$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PropertySheetA$MH() {
        return RuntimeHelper.requireNonNull(constants$921.PropertySheetA$MH,"PropertySheetA");
    }
    public static long PropertySheetA ( Addressable x0) {
        var mh$ = PropertySheetA$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PropertySheetW$MH() {
        return RuntimeHelper.requireNonNull(constants$922.PropertySheetW$MH,"PropertySheetW");
    }
    public static long PropertySheetW ( Addressable x0) {
        var mh$ = PropertySheetW$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPPSHNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_1A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_1W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_4A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_4A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_4W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_4W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_5A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_5A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_5W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_5W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_5 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTER_INFO_5 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRINTER_INFO_6 = Constants$root.C_POINTER$LAYOUT;
}


