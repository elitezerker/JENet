// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _flowspec {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("TokenRate"),
        Constants$root.C_LONG$LAYOUT.withName("TokenBucketSize"),
        Constants$root.C_LONG$LAYOUT.withName("PeakBandwidth"),
        Constants$root.C_LONG$LAYOUT.withName("Latency"),
        Constants$root.C_LONG$LAYOUT.withName("DelayVariation"),
        Constants$root.C_LONG$LAYOUT.withName("ServiceType"),
        Constants$root.C_LONG$LAYOUT.withName("MaxSduSize"),
        Constants$root.C_LONG$LAYOUT.withName("MinimumPolicedSize")
    ).withName("_flowspec");
    public static MemoryLayout $LAYOUT() {
        return _flowspec.$struct$LAYOUT;
    }
    static final VarHandle TokenRate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TokenRate"));
    public static VarHandle TokenRate$VH() {
        return _flowspec.TokenRate$VH;
    }
    public static int TokenRate$get(MemorySegment seg) {
        return (int)_flowspec.TokenRate$VH.get(seg);
    }
    public static void TokenRate$set( MemorySegment seg, int x) {
        _flowspec.TokenRate$VH.set(seg, x);
    }
    public static int TokenRate$get(MemorySegment seg, long index) {
        return (int)_flowspec.TokenRate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TokenRate$set(MemorySegment seg, long index, int x) {
        _flowspec.TokenRate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TokenBucketSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TokenBucketSize"));
    public static VarHandle TokenBucketSize$VH() {
        return _flowspec.TokenBucketSize$VH;
    }
    public static int TokenBucketSize$get(MemorySegment seg) {
        return (int)_flowspec.TokenBucketSize$VH.get(seg);
    }
    public static void TokenBucketSize$set( MemorySegment seg, int x) {
        _flowspec.TokenBucketSize$VH.set(seg, x);
    }
    public static int TokenBucketSize$get(MemorySegment seg, long index) {
        return (int)_flowspec.TokenBucketSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TokenBucketSize$set(MemorySegment seg, long index, int x) {
        _flowspec.TokenBucketSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PeakBandwidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PeakBandwidth"));
    public static VarHandle PeakBandwidth$VH() {
        return _flowspec.PeakBandwidth$VH;
    }
    public static int PeakBandwidth$get(MemorySegment seg) {
        return (int)_flowspec.PeakBandwidth$VH.get(seg);
    }
    public static void PeakBandwidth$set( MemorySegment seg, int x) {
        _flowspec.PeakBandwidth$VH.set(seg, x);
    }
    public static int PeakBandwidth$get(MemorySegment seg, long index) {
        return (int)_flowspec.PeakBandwidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PeakBandwidth$set(MemorySegment seg, long index, int x) {
        _flowspec.PeakBandwidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Latency$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Latency"));
    public static VarHandle Latency$VH() {
        return _flowspec.Latency$VH;
    }
    public static int Latency$get(MemorySegment seg) {
        return (int)_flowspec.Latency$VH.get(seg);
    }
    public static void Latency$set( MemorySegment seg, int x) {
        _flowspec.Latency$VH.set(seg, x);
    }
    public static int Latency$get(MemorySegment seg, long index) {
        return (int)_flowspec.Latency$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Latency$set(MemorySegment seg, long index, int x) {
        _flowspec.Latency$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DelayVariation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DelayVariation"));
    public static VarHandle DelayVariation$VH() {
        return _flowspec.DelayVariation$VH;
    }
    public static int DelayVariation$get(MemorySegment seg) {
        return (int)_flowspec.DelayVariation$VH.get(seg);
    }
    public static void DelayVariation$set( MemorySegment seg, int x) {
        _flowspec.DelayVariation$VH.set(seg, x);
    }
    public static int DelayVariation$get(MemorySegment seg, long index) {
        return (int)_flowspec.DelayVariation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DelayVariation$set(MemorySegment seg, long index, int x) {
        _flowspec.DelayVariation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ServiceType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ServiceType"));
    public static VarHandle ServiceType$VH() {
        return _flowspec.ServiceType$VH;
    }
    public static int ServiceType$get(MemorySegment seg) {
        return (int)_flowspec.ServiceType$VH.get(seg);
    }
    public static void ServiceType$set( MemorySegment seg, int x) {
        _flowspec.ServiceType$VH.set(seg, x);
    }
    public static int ServiceType$get(MemorySegment seg, long index) {
        return (int)_flowspec.ServiceType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServiceType$set(MemorySegment seg, long index, int x) {
        _flowspec.ServiceType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxSduSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxSduSize"));
    public static VarHandle MaxSduSize$VH() {
        return _flowspec.MaxSduSize$VH;
    }
    public static int MaxSduSize$get(MemorySegment seg) {
        return (int)_flowspec.MaxSduSize$VH.get(seg);
    }
    public static void MaxSduSize$set( MemorySegment seg, int x) {
        _flowspec.MaxSduSize$VH.set(seg, x);
    }
    public static int MaxSduSize$get(MemorySegment seg, long index) {
        return (int)_flowspec.MaxSduSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxSduSize$set(MemorySegment seg, long index, int x) {
        _flowspec.MaxSduSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinimumPolicedSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MinimumPolicedSize"));
    public static VarHandle MinimumPolicedSize$VH() {
        return _flowspec.MinimumPolicedSize$VH;
    }
    public static int MinimumPolicedSize$get(MemorySegment seg) {
        return (int)_flowspec.MinimumPolicedSize$VH.get(seg);
    }
    public static void MinimumPolicedSize$set( MemorySegment seg, int x) {
        _flowspec.MinimumPolicedSize$VH.set(seg, x);
    }
    public static int MinimumPolicedSize$get(MemorySegment seg, long index) {
        return (int)_flowspec.MinimumPolicedSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinimumPolicedSize$set(MemorySegment seg, long index, int x) {
        _flowspec.MinimumPolicedSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


