// Generated by jextract

package com.jenet.enet.cpp;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$967 {

    static final  GroupLayout IID_IReleaseMarshalBuffers$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment IID_IReleaseMarshalBuffers$SEGMENT = RuntimeHelper.lookupGlobalVariable("IID_IReleaseMarshalBuffers", constants$967.IID_IReleaseMarshalBuffers$LAYOUT);
    static final  GroupLayout IID_IWaitMultiple$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment IID_IWaitMultiple$SEGMENT = RuntimeHelper.lookupGlobalVariable("IID_IWaitMultiple", constants$967.IID_IWaitMultiple$LAYOUT);
    static final  GroupLayout IID_IAddrTrackingControl$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment IID_IAddrTrackingControl$SEGMENT = RuntimeHelper.lookupGlobalVariable("IID_IAddrTrackingControl", constants$967.IID_IAddrTrackingControl$LAYOUT);
    static final  GroupLayout IID_IAddrExclusionControl$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment IID_IAddrExclusionControl$SEGMENT = RuntimeHelper.lookupGlobalVariable("IID_IAddrExclusionControl", constants$967.IID_IAddrExclusionControl$LAYOUT);
    static final  GroupLayout IID_IPipeByte$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment IID_IPipeByte$SEGMENT = RuntimeHelper.lookupGlobalVariable("IID_IPipeByte", constants$967.IID_IPipeByte$LAYOUT);
    static final  GroupLayout IID_AsyncIPipeByte$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment IID_AsyncIPipeByte$SEGMENT = RuntimeHelper.lookupGlobalVariable("IID_AsyncIPipeByte", constants$967.IID_AsyncIPipeByte$LAYOUT);
}


